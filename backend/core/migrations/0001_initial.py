# Generated by Django 5.2.7 on 2025-10-05 00:47

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('rol', models.CharField(choices=[('admin', 'Administrador'), ('anotador', 'Anotador'), ('visor', 'Visor')], default='anotador', max_length=20)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='core_user_set', related_query_name='core_user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='core_user_set', related_query_name='core_user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'usuario',
                'verbose_name_plural': 'usuarios',
                'db_table': 'usuarios',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Muestra',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_id', models.CharField(max_length=50, unique=True)),
                ('timestamp_inicio', models.DateTimeField()),
                ('duracion_ms', models.IntegerField()),
                ('frecuencia_muestreo_hz', models.DecimalField(decimal_places=2, max_digits=10)),
                ('num_puntos', models.IntegerField(default=5120)),
                ('origen_hardware', models.CharField(blank=True, max_length=50, null=True)),
                ('estado_procesamiento', models.CharField(choices=[('pendiente', 'Pendiente'), ('procesado', 'Procesado'), ('error', 'Error')], default='pendiente', max_length=20)),
                ('fecha_procesamiento', models.DateTimeField(blank=True, null=True)),
                ('fecha_creacion', models.DateTimeField(auto_now_add=True)),
                ('usuario_creacion', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'muestras',
            },
        ),
        migrations.CreateModel(
            name='Clasificacion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('clase_manual', models.CharField(blank=True, choices=[('sobretension', 'Sobretensión'), ('caida_tension', 'Caída de Tensión'), ('harmonicos', 'Armónicos'), ('transitorio', 'Transitorio'), ('falla_sistema', 'Falla del Sistema'), ('normal', 'Normal'), ('no_clasificado', 'No Clasificado')], max_length=50, null=True)),
                ('clase_modelo', models.CharField(blank=True, max_length=50, null=True)),
                ('confianza_modelo', models.DecimalField(blank=True, decimal_places=4, max_digits=5, null=True)),
                ('estado_clasificacion', models.CharField(choices=[('pendiente', 'Pendiente'), ('validada', 'Validada por Experto'), ('rechazada', 'Rechazada por Experto'), ('modelo_aplicado', 'Modelo Aplicado (sin validación)')], default='pendiente', max_length=20)),
                ('fecha_clasificacion', models.DateTimeField(auto_now_add=True)),
                ('version_modelo', models.CharField(blank=True, max_length=20, null=True)),
                ('usuario_validador', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('muestra', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='core.muestra')),
            ],
            options={
                'db_table': 'clasificaciones',
            },
        ),
        migrations.CreateModel(
            name='Anotacion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tipo_perturbacion', models.CharField(choices=[('sobretension', 'Sobretensión'), ('caida_tension', 'Caída de Tensión'), ('harmonicos', 'Armónicos'), ('transitorio', 'Transitorio'), ('falla_sistema', 'Falla del Sistema'), ('otros', 'Otros')], max_length=50)),
                ('comentarios', models.TextField(blank=True, null=True)),
                ('timestamp_inicio_region', models.IntegerField(blank=True, null=True)),
                ('timestamp_fin_region', models.IntegerField(blank=True, null=True)),
                ('fecha_anotacion', models.DateTimeField(auto_now_add=True)),
                ('usuario_anotador', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('muestra', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.muestra')),
            ],
            options={
                'db_table': 'anotaciones',
            },
        ),
        migrations.CreateModel(
            name='Espectrograma',
            fields=[
                ('muestra', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='core.muestra')),
                ('data_espectrograma', models.BinaryField()),
                ('metadata_json', models.JSONField(blank=True, null=True)),
                ('fecha_generacion', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'espectrogramas',
                'indexes': [models.Index(fields=['muestra'], name='idx_espectrogramas_muestra_id')],
            },
        ),
        migrations.AddIndex(
            model_name='muestra',
            index=models.Index(fields=['event_id'], name='idx_muestras_eventid'),
        ),
        migrations.AddIndex(
            model_name='muestra',
            index=models.Index(fields=['timestamp_inicio'], name='idx_muestras_ts_inicio'),
        ),
        migrations.AddIndex(
            model_name='muestra',
            index=models.Index(fields=['estado_procesamiento'], name='idx_muestras_estado_proc'),
        ),
        migrations.AddIndex(
            model_name='clasificacion',
            index=models.Index(fields=['muestra'], name='idx_clasi_muestra'),
        ),
        migrations.AddIndex(
            model_name='clasificacion',
            index=models.Index(fields=['clase_manual'], name='idx_clasi_clase_manual'),
        ),
        migrations.AddIndex(
            model_name='clasificacion',
            index=models.Index(fields=['clase_modelo'], name='idx_clasi_clase_modelo'),
        ),
        migrations.AddIndex(
            model_name='anotacion',
            index=models.Index(fields=['muestra'], name='idx_anotaciones_muestra'),
        ),
        migrations.AddIndex(
            model_name='anotacion',
            index=models.Index(fields=['tipo_perturbacion'], name='idx_anot_tipo_pert'),
        ),
    ]
