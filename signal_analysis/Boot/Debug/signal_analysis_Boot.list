
signal_analysis_Boot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002b0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009274  080002b0  080002b0  000012b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08009524  08009524  0000a524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009554  08009554  0000e030  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009554  08009554  0000a554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800955c  0800955c  0000e030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800955c  0800955c  0000a55c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009560  08009560  0000a560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  24000000  08009564  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 noncacheable_buffer 00003024  2400000c  08009570  0000b00c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00005284  24003030  0800c594  0000e030  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000000  20000000  0000f000  2**0
                  ALLOC
 12 .nocache      00000000  240082b4  240082b4  0000e030  2**0
                  CONTENTS
 13 .ARM.attributes 0000002e  00000000  00000000  0000e030  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001d9c4  00000000  00000000  0000e05e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000303b  00000000  00000000  0002ba22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000018f0  00000000  00000000  0002ea60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001375  00000000  00000000  00030350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00033d6d  00000000  00000000  000316c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001e69d  00000000  00000000  00065432  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00156f75  00000000  00000000  00083acf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001daa44  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006d84  00000000  00000000  001daa88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000075  00000000  00000000  001e180c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24003030 	.word	0x24003030
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800950c 	.word	0x0800950c

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24003034 	.word	0x24003034
 80002ec:	0800950c 	.word	0x0800950c

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b988 	b.w	8000618 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	468e      	mov	lr, r1
 8000328:	4604      	mov	r4, r0
 800032a:	4688      	mov	r8, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d962      	bls.n	80003fc <__udivmoddi4+0xdc>
 8000336:	fab2 f682 	clz	r6, r2
 800033a:	b14e      	cbz	r6, 8000350 <__udivmoddi4+0x30>
 800033c:	f1c6 0320 	rsb	r3, r6, #32
 8000340:	fa01 f806 	lsl.w	r8, r1, r6
 8000344:	fa20 f303 	lsr.w	r3, r0, r3
 8000348:	40b7      	lsls	r7, r6
 800034a:	ea43 0808 	orr.w	r8, r3, r8
 800034e:	40b4      	lsls	r4, r6
 8000350:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000354:	fa1f fc87 	uxth.w	ip, r7
 8000358:	fbb8 f1fe 	udiv	r1, r8, lr
 800035c:	0c23      	lsrs	r3, r4, #16
 800035e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000362:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000366:	fb01 f20c 	mul.w	r2, r1, ip
 800036a:	429a      	cmp	r2, r3
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0x62>
 800036e:	18fb      	adds	r3, r7, r3
 8000370:	f101 30ff 	add.w	r0, r1, #4294967295
 8000374:	f080 80ea 	bcs.w	800054c <__udivmoddi4+0x22c>
 8000378:	429a      	cmp	r2, r3
 800037a:	f240 80e7 	bls.w	800054c <__udivmoddi4+0x22c>
 800037e:	3902      	subs	r1, #2
 8000380:	443b      	add	r3, r7
 8000382:	1a9a      	subs	r2, r3, r2
 8000384:	b2a3      	uxth	r3, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000392:	fb00 fc0c 	mul.w	ip, r0, ip
 8000396:	459c      	cmp	ip, r3
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0x8e>
 800039a:	18fb      	adds	r3, r7, r3
 800039c:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a0:	f080 80d6 	bcs.w	8000550 <__udivmoddi4+0x230>
 80003a4:	459c      	cmp	ip, r3
 80003a6:	f240 80d3 	bls.w	8000550 <__udivmoddi4+0x230>
 80003aa:	443b      	add	r3, r7
 80003ac:	3802      	subs	r0, #2
 80003ae:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b2:	eba3 030c 	sub.w	r3, r3, ip
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11d      	cbz	r5, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40f3      	lsrs	r3, r6
 80003bc:	2200      	movs	r2, #0
 80003be:	e9c5 3200 	strd	r3, r2, [r5]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d905      	bls.n	80003d6 <__udivmoddi4+0xb6>
 80003ca:	b10d      	cbz	r5, 80003d0 <__udivmoddi4+0xb0>
 80003cc:	e9c5 0100 	strd	r0, r1, [r5]
 80003d0:	2100      	movs	r1, #0
 80003d2:	4608      	mov	r0, r1
 80003d4:	e7f5      	b.n	80003c2 <__udivmoddi4+0xa2>
 80003d6:	fab3 f183 	clz	r1, r3
 80003da:	2900      	cmp	r1, #0
 80003dc:	d146      	bne.n	800046c <__udivmoddi4+0x14c>
 80003de:	4573      	cmp	r3, lr
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xc8>
 80003e2:	4282      	cmp	r2, r0
 80003e4:	f200 8105 	bhi.w	80005f2 <__udivmoddi4+0x2d2>
 80003e8:	1a84      	subs	r4, r0, r2
 80003ea:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	4690      	mov	r8, r2
 80003f2:	2d00      	cmp	r5, #0
 80003f4:	d0e5      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003f6:	e9c5 4800 	strd	r4, r8, [r5]
 80003fa:	e7e2      	b.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f000 8090 	beq.w	8000522 <__udivmoddi4+0x202>
 8000402:	fab2 f682 	clz	r6, r2
 8000406:	2e00      	cmp	r6, #0
 8000408:	f040 80a4 	bne.w	8000554 <__udivmoddi4+0x234>
 800040c:	1a8a      	subs	r2, r1, r2
 800040e:	0c03      	lsrs	r3, r0, #16
 8000410:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000414:	b280      	uxth	r0, r0
 8000416:	b2bc      	uxth	r4, r7
 8000418:	2101      	movs	r1, #1
 800041a:	fbb2 fcfe 	udiv	ip, r2, lr
 800041e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000422:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000426:	fb04 f20c 	mul.w	r2, r4, ip
 800042a:	429a      	cmp	r2, r3
 800042c:	d907      	bls.n	800043e <__udivmoddi4+0x11e>
 800042e:	18fb      	adds	r3, r7, r3
 8000430:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x11c>
 8000436:	429a      	cmp	r2, r3
 8000438:	f200 80e0 	bhi.w	80005fc <__udivmoddi4+0x2dc>
 800043c:	46c4      	mov	ip, r8
 800043e:	1a9b      	subs	r3, r3, r2
 8000440:	fbb3 f2fe 	udiv	r2, r3, lr
 8000444:	fb0e 3312 	mls	r3, lr, r2, r3
 8000448:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800044c:	fb02 f404 	mul.w	r4, r2, r4
 8000450:	429c      	cmp	r4, r3
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x144>
 8000454:	18fb      	adds	r3, r7, r3
 8000456:	f102 30ff 	add.w	r0, r2, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x142>
 800045c:	429c      	cmp	r4, r3
 800045e:	f200 80ca 	bhi.w	80005f6 <__udivmoddi4+0x2d6>
 8000462:	4602      	mov	r2, r0
 8000464:	1b1b      	subs	r3, r3, r4
 8000466:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800046a:	e7a5      	b.n	80003b8 <__udivmoddi4+0x98>
 800046c:	f1c1 0620 	rsb	r6, r1, #32
 8000470:	408b      	lsls	r3, r1
 8000472:	fa22 f706 	lsr.w	r7, r2, r6
 8000476:	431f      	orrs	r7, r3
 8000478:	fa0e f401 	lsl.w	r4, lr, r1
 800047c:	fa20 f306 	lsr.w	r3, r0, r6
 8000480:	fa2e fe06 	lsr.w	lr, lr, r6
 8000484:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000488:	4323      	orrs	r3, r4
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	fa1f fc87 	uxth.w	ip, r7
 8000492:	fbbe f0f9 	udiv	r0, lr, r9
 8000496:	0c1c      	lsrs	r4, r3, #16
 8000498:	fb09 ee10 	mls	lr, r9, r0, lr
 800049c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80004a0:	fb00 fe0c 	mul.w	lr, r0, ip
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	fa02 f201 	lsl.w	r2, r2, r1
 80004aa:	d909      	bls.n	80004c0 <__udivmoddi4+0x1a0>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f100 3aff 	add.w	sl, r0, #4294967295
 80004b2:	f080 809c 	bcs.w	80005ee <__udivmoddi4+0x2ce>
 80004b6:	45a6      	cmp	lr, r4
 80004b8:	f240 8099 	bls.w	80005ee <__udivmoddi4+0x2ce>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	eba4 040e 	sub.w	r4, r4, lr
 80004c4:	fa1f fe83 	uxth.w	lr, r3
 80004c8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004cc:	fb09 4413 	mls	r4, r9, r3, r4
 80004d0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004d4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004d8:	45a4      	cmp	ip, r4
 80004da:	d908      	bls.n	80004ee <__udivmoddi4+0x1ce>
 80004dc:	193c      	adds	r4, r7, r4
 80004de:	f103 3eff 	add.w	lr, r3, #4294967295
 80004e2:	f080 8082 	bcs.w	80005ea <__udivmoddi4+0x2ca>
 80004e6:	45a4      	cmp	ip, r4
 80004e8:	d97f      	bls.n	80005ea <__udivmoddi4+0x2ca>
 80004ea:	3b02      	subs	r3, #2
 80004ec:	443c      	add	r4, r7
 80004ee:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004f2:	eba4 040c 	sub.w	r4, r4, ip
 80004f6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004fa:	4564      	cmp	r4, ip
 80004fc:	4673      	mov	r3, lr
 80004fe:	46e1      	mov	r9, ip
 8000500:	d362      	bcc.n	80005c8 <__udivmoddi4+0x2a8>
 8000502:	d05f      	beq.n	80005c4 <__udivmoddi4+0x2a4>
 8000504:	b15d      	cbz	r5, 800051e <__udivmoddi4+0x1fe>
 8000506:	ebb8 0203 	subs.w	r2, r8, r3
 800050a:	eb64 0409 	sbc.w	r4, r4, r9
 800050e:	fa04 f606 	lsl.w	r6, r4, r6
 8000512:	fa22 f301 	lsr.w	r3, r2, r1
 8000516:	431e      	orrs	r6, r3
 8000518:	40cc      	lsrs	r4, r1
 800051a:	e9c5 6400 	strd	r6, r4, [r5]
 800051e:	2100      	movs	r1, #0
 8000520:	e74f      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000522:	fbb1 fcf2 	udiv	ip, r1, r2
 8000526:	0c01      	lsrs	r1, r0, #16
 8000528:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800052c:	b280      	uxth	r0, r0
 800052e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000532:	463b      	mov	r3, r7
 8000534:	4638      	mov	r0, r7
 8000536:	463c      	mov	r4, r7
 8000538:	46b8      	mov	r8, r7
 800053a:	46be      	mov	lr, r7
 800053c:	2620      	movs	r6, #32
 800053e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000542:	eba2 0208 	sub.w	r2, r2, r8
 8000546:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800054a:	e766      	b.n	800041a <__udivmoddi4+0xfa>
 800054c:	4601      	mov	r1, r0
 800054e:	e718      	b.n	8000382 <__udivmoddi4+0x62>
 8000550:	4610      	mov	r0, r2
 8000552:	e72c      	b.n	80003ae <__udivmoddi4+0x8e>
 8000554:	f1c6 0220 	rsb	r2, r6, #32
 8000558:	fa2e f302 	lsr.w	r3, lr, r2
 800055c:	40b7      	lsls	r7, r6
 800055e:	40b1      	lsls	r1, r6
 8000560:	fa20 f202 	lsr.w	r2, r0, r2
 8000564:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000568:	430a      	orrs	r2, r1
 800056a:	fbb3 f8fe 	udiv	r8, r3, lr
 800056e:	b2bc      	uxth	r4, r7
 8000570:	fb0e 3318 	mls	r3, lr, r8, r3
 8000574:	0c11      	lsrs	r1, r2, #16
 8000576:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057a:	fb08 f904 	mul.w	r9, r8, r4
 800057e:	40b0      	lsls	r0, r6
 8000580:	4589      	cmp	r9, r1
 8000582:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000586:	b280      	uxth	r0, r0
 8000588:	d93e      	bls.n	8000608 <__udivmoddi4+0x2e8>
 800058a:	1879      	adds	r1, r7, r1
 800058c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000590:	d201      	bcs.n	8000596 <__udivmoddi4+0x276>
 8000592:	4589      	cmp	r9, r1
 8000594:	d81f      	bhi.n	80005d6 <__udivmoddi4+0x2b6>
 8000596:	eba1 0109 	sub.w	r1, r1, r9
 800059a:	fbb1 f9fe 	udiv	r9, r1, lr
 800059e:	fb09 f804 	mul.w	r8, r9, r4
 80005a2:	fb0e 1119 	mls	r1, lr, r9, r1
 80005a6:	b292      	uxth	r2, r2
 80005a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005ac:	4542      	cmp	r2, r8
 80005ae:	d229      	bcs.n	8000604 <__udivmoddi4+0x2e4>
 80005b0:	18ba      	adds	r2, r7, r2
 80005b2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005b6:	d2c4      	bcs.n	8000542 <__udivmoddi4+0x222>
 80005b8:	4542      	cmp	r2, r8
 80005ba:	d2c2      	bcs.n	8000542 <__udivmoddi4+0x222>
 80005bc:	f1a9 0102 	sub.w	r1, r9, #2
 80005c0:	443a      	add	r2, r7
 80005c2:	e7be      	b.n	8000542 <__udivmoddi4+0x222>
 80005c4:	45f0      	cmp	r8, lr
 80005c6:	d29d      	bcs.n	8000504 <__udivmoddi4+0x1e4>
 80005c8:	ebbe 0302 	subs.w	r3, lr, r2
 80005cc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005d0:	3801      	subs	r0, #1
 80005d2:	46e1      	mov	r9, ip
 80005d4:	e796      	b.n	8000504 <__udivmoddi4+0x1e4>
 80005d6:	eba7 0909 	sub.w	r9, r7, r9
 80005da:	4449      	add	r1, r9
 80005dc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005e0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e4:	fb09 f804 	mul.w	r8, r9, r4
 80005e8:	e7db      	b.n	80005a2 <__udivmoddi4+0x282>
 80005ea:	4673      	mov	r3, lr
 80005ec:	e77f      	b.n	80004ee <__udivmoddi4+0x1ce>
 80005ee:	4650      	mov	r0, sl
 80005f0:	e766      	b.n	80004c0 <__udivmoddi4+0x1a0>
 80005f2:	4608      	mov	r0, r1
 80005f4:	e6fd      	b.n	80003f2 <__udivmoddi4+0xd2>
 80005f6:	443b      	add	r3, r7
 80005f8:	3a02      	subs	r2, #2
 80005fa:	e733      	b.n	8000464 <__udivmoddi4+0x144>
 80005fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000600:	443b      	add	r3, r7
 8000602:	e71c      	b.n	800043e <__udivmoddi4+0x11e>
 8000604:	4649      	mov	r1, r9
 8000606:	e79c      	b.n	8000542 <__udivmoddi4+0x222>
 8000608:	eba1 0109 	sub.w	r1, r1, r9
 800060c:	46c4      	mov	ip, r8
 800060e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000612:	fb09 f804 	mul.w	r8, r9, r4
 8000616:	e7c4      	b.n	80005a2 <__udivmoddi4+0x282>

08000618 <__aeabi_idiv0>:
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop

0800061c <calculate_checksum>:
  * @param data Puntero a los datos.
  * @param length Número de bytes de los datos.
  * @retval El checksum de 16 bits calculado.
  */
uint16_t calculate_checksum(const uint8_t* data, uint16_t length)
{
 800061c:	b480      	push	{r7}
 800061e:	b085      	sub	sp, #20
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	460b      	mov	r3, r1
 8000626:	807b      	strh	r3, [r7, #2]
    uint16_t sum1 = 0;
 8000628:	2300      	movs	r3, #0
 800062a:	81fb      	strh	r3, [r7, #14]
    uint16_t sum2 = 0;
 800062c:	2300      	movs	r3, #0
 800062e:	81bb      	strh	r3, [r7, #12]
    for (uint16_t i = 0; i < length; ++i) {
 8000630:	2300      	movs	r3, #0
 8000632:	817b      	strh	r3, [r7, #10]
 8000634:	e025      	b.n	8000682 <calculate_checksum+0x66>
        sum1 = (sum1 + data[i]) % 255;
 8000636:	89fb      	ldrh	r3, [r7, #14]
 8000638:	897a      	ldrh	r2, [r7, #10]
 800063a:	6879      	ldr	r1, [r7, #4]
 800063c:	440a      	add	r2, r1
 800063e:	7812      	ldrb	r2, [r2, #0]
 8000640:	441a      	add	r2, r3
 8000642:	4b19      	ldr	r3, [pc, #100]	@ (80006a8 <calculate_checksum+0x8c>)
 8000644:	fb83 1302 	smull	r1, r3, r3, r2
 8000648:	4413      	add	r3, r2
 800064a:	11d9      	asrs	r1, r3, #7
 800064c:	17d3      	asrs	r3, r2, #31
 800064e:	1ac9      	subs	r1, r1, r3
 8000650:	460b      	mov	r3, r1
 8000652:	021b      	lsls	r3, r3, #8
 8000654:	1a5b      	subs	r3, r3, r1
 8000656:	1ad1      	subs	r1, r2, r3
 8000658:	460b      	mov	r3, r1
 800065a:	81fb      	strh	r3, [r7, #14]
        sum2 = (sum2 + sum1) % 255;
 800065c:	89ba      	ldrh	r2, [r7, #12]
 800065e:	89fb      	ldrh	r3, [r7, #14]
 8000660:	441a      	add	r2, r3
 8000662:	4b11      	ldr	r3, [pc, #68]	@ (80006a8 <calculate_checksum+0x8c>)
 8000664:	fb83 1302 	smull	r1, r3, r3, r2
 8000668:	4413      	add	r3, r2
 800066a:	11d9      	asrs	r1, r3, #7
 800066c:	17d3      	asrs	r3, r2, #31
 800066e:	1ac9      	subs	r1, r1, r3
 8000670:	460b      	mov	r3, r1
 8000672:	021b      	lsls	r3, r3, #8
 8000674:	1a5b      	subs	r3, r3, r1
 8000676:	1ad1      	subs	r1, r2, r3
 8000678:	460b      	mov	r3, r1
 800067a:	81bb      	strh	r3, [r7, #12]
    for (uint16_t i = 0; i < length; ++i) {
 800067c:	897b      	ldrh	r3, [r7, #10]
 800067e:	3301      	adds	r3, #1
 8000680:	817b      	strh	r3, [r7, #10]
 8000682:	897a      	ldrh	r2, [r7, #10]
 8000684:	887b      	ldrh	r3, [r7, #2]
 8000686:	429a      	cmp	r2, r3
 8000688:	d3d5      	bcc.n	8000636 <calculate_checksum+0x1a>
    }
    return (sum2 << 8) | sum1;
 800068a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800068e:	021b      	lsls	r3, r3, #8
 8000690:	b21a      	sxth	r2, r3
 8000692:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000696:	4313      	orrs	r3, r2
 8000698:	b21b      	sxth	r3, r3
 800069a:	b29b      	uxth	r3, r3
}
 800069c:	4618      	mov	r0, r3
 800069e:	3714      	adds	r7, #20
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr
 80006a8:	80808081 	.word	0x80808081

080006ac <send_buffer_to_esp32>:
  * @param huart Puntero a la estructura del UART.
  * @param buffer Puntero al buffer de datos (ej. processing_buffer).
  * @param num_samples El número de muestras en el buffer (ej. ADC_BUFFER_LEN).
  */
HAL_StatusTypeDef send_buffer_to_esp32(UART_HandleTypeDef *huart, uint16_t* buffer, uint16_t num_samples)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b086      	sub	sp, #24
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	60f8      	str	r0, [r7, #12]
 80006b4:	60b9      	str	r1, [r7, #8]
 80006b6:	4613      	mov	r3, r2
 80006b8:	80fb      	strh	r3, [r7, #6]
    uint16_t payload_length = num_samples * sizeof(uint16_t); // 5120 * 2 = 10240 bytes
 80006ba:	88fb      	ldrh	r3, [r7, #6]
 80006bc:	005b      	lsls	r3, r3, #1
 80006be:	82fb      	strh	r3, [r7, #22]
    uint16_t checksum = calculate_checksum((const uint8_t*)buffer, payload_length);
 80006c0:	8afb      	ldrh	r3, [r7, #22]
 80006c2:	4619      	mov	r1, r3
 80006c4:	68b8      	ldr	r0, [r7, #8]
 80006c6:	f7ff ffa9 	bl	800061c <calculate_checksum>
 80006ca:	4603      	mov	r3, r0
 80006cc:	82bb      	strh	r3, [r7, #20]
    uint16_t current_pos = 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	827b      	strh	r3, [r7, #18]

    // --- 1. Ensamblar el paquete completo en un solo buffer ---

    // Header (2 bytes)
    tx_packet_buffer[current_pos++] = UART_HEADER_BYTE_1;
 80006d2:	8a7b      	ldrh	r3, [r7, #18]
 80006d4:	1c5a      	adds	r2, r3, #1
 80006d6:	827a      	strh	r2, [r7, #18]
 80006d8:	461a      	mov	r2, r3
 80006da:	4b22      	ldr	r3, [pc, #136]	@ (8000764 <send_buffer_to_esp32+0xb8>)
 80006dc:	21aa      	movs	r1, #170	@ 0xaa
 80006de:	5499      	strb	r1, [r3, r2]
    tx_packet_buffer[current_pos++] = UART_HEADER_BYTE_2;
 80006e0:	8a7b      	ldrh	r3, [r7, #18]
 80006e2:	1c5a      	adds	r2, r3, #1
 80006e4:	827a      	strh	r2, [r7, #18]
 80006e6:	461a      	mov	r2, r3
 80006e8:	4b1e      	ldr	r3, [pc, #120]	@ (8000764 <send_buffer_to_esp32+0xb8>)
 80006ea:	2155      	movs	r1, #85	@ 0x55
 80006ec:	5499      	strb	r1, [r3, r2]

    // Length (2 bytes) - little-endian
    tx_packet_buffer[current_pos++] = (uint8_t)(payload_length & 0xFF);
 80006ee:	8a7b      	ldrh	r3, [r7, #18]
 80006f0:	1c5a      	adds	r2, r3, #1
 80006f2:	827a      	strh	r2, [r7, #18]
 80006f4:	461a      	mov	r2, r3
 80006f6:	8afb      	ldrh	r3, [r7, #22]
 80006f8:	b2d9      	uxtb	r1, r3
 80006fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000764 <send_buffer_to_esp32+0xb8>)
 80006fc:	5499      	strb	r1, [r3, r2]
    tx_packet_buffer[current_pos++] = (uint8_t)(payload_length >> 8);
 80006fe:	8afb      	ldrh	r3, [r7, #22]
 8000700:	0a1b      	lsrs	r3, r3, #8
 8000702:	b299      	uxth	r1, r3
 8000704:	8a7b      	ldrh	r3, [r7, #18]
 8000706:	1c5a      	adds	r2, r3, #1
 8000708:	827a      	strh	r2, [r7, #18]
 800070a:	461a      	mov	r2, r3
 800070c:	b2c9      	uxtb	r1, r1
 800070e:	4b15      	ldr	r3, [pc, #84]	@ (8000764 <send_buffer_to_esp32+0xb8>)
 8000710:	5499      	strb	r1, [r3, r2]

    // Payload (10240 bytes) - Usamos memcpy para máxima velocidad
    memcpy(&tx_packet_buffer[current_pos], buffer, payload_length);
 8000712:	8a7b      	ldrh	r3, [r7, #18]
 8000714:	4a13      	ldr	r2, [pc, #76]	@ (8000764 <send_buffer_to_esp32+0xb8>)
 8000716:	4413      	add	r3, r2
 8000718:	8afa      	ldrh	r2, [r7, #22]
 800071a:	68b9      	ldr	r1, [r7, #8]
 800071c:	4618      	mov	r0, r3
 800071e:	f008 fee7 	bl	80094f0 <memcpy>
    current_pos += payload_length;
 8000722:	8a7a      	ldrh	r2, [r7, #18]
 8000724:	8afb      	ldrh	r3, [r7, #22]
 8000726:	4413      	add	r3, r2
 8000728:	827b      	strh	r3, [r7, #18]

    // Checksum (2 bytes) - little-endian
    tx_packet_buffer[current_pos++] = (uint8_t)(checksum & 0xFF);
 800072a:	8a7b      	ldrh	r3, [r7, #18]
 800072c:	1c5a      	adds	r2, r3, #1
 800072e:	827a      	strh	r2, [r7, #18]
 8000730:	461a      	mov	r2, r3
 8000732:	8abb      	ldrh	r3, [r7, #20]
 8000734:	b2d9      	uxtb	r1, r3
 8000736:	4b0b      	ldr	r3, [pc, #44]	@ (8000764 <send_buffer_to_esp32+0xb8>)
 8000738:	5499      	strb	r1, [r3, r2]
    tx_packet_buffer[current_pos++] = (uint8_t)(checksum >> 8);
 800073a:	8abb      	ldrh	r3, [r7, #20]
 800073c:	0a1b      	lsrs	r3, r3, #8
 800073e:	b299      	uxth	r1, r3
 8000740:	8a7b      	ldrh	r3, [r7, #18]
 8000742:	1c5a      	adds	r2, r3, #1
 8000744:	827a      	strh	r2, [r7, #18]
 8000746:	461a      	mov	r2, r3
 8000748:	b2c9      	uxtb	r1, r1
 800074a:	4b06      	ldr	r3, [pc, #24]	@ (8000764 <send_buffer_to_esp32+0xb8>)
 800074c:	5499      	strb	r1, [r3, r2]

    // --- 2. Enviar el paquete completo con UN SOLO llamado al DMA ---
    return HAL_UART_Transmit_DMA(huart, tx_packet_buffer, PACKET_LEN);
 800074e:	f642 0206 	movw	r2, #10246	@ 0x2806
 8000752:	4904      	ldr	r1, [pc, #16]	@ (8000764 <send_buffer_to_esp32+0xb8>)
 8000754:	68f8      	ldr	r0, [r7, #12]
 8000756:	f007 fa8b 	bl	8007c70 <HAL_UART_Transmit_DMA>
 800075a:	4603      	mov	r3, r0
}
 800075c:	4618      	mov	r0, r3
 800075e:	3718      	adds	r7, #24
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	2400304c 	.word	0x2400304c

08000768 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b086      	sub	sp, #24
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == ext_button_Pin)
 8000772:	88fb      	ldrh	r3, [r7, #6]
 8000774:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000778:	d123      	bne.n	80007c2 <HAL_GPIO_EXTI_Callback+0x5a>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800077a:	f3ef 8310 	mrs	r3, PRIMASK
 800077e:	613b      	str	r3, [r7, #16]
  return(result);
 8000780:	693b      	ldr	r3, [r7, #16]
    {
        // Usamos una sección crítica para asegurar que el cambio de estado sea atómico
        uint32_t primask_status = __get_PRIMASK();
 8000782:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8000784:	b672      	cpsid	i
}
 8000786:	bf00      	nop
        __disable_irq();

        if (capture_state == CAPTURE_STATE_IDLE)
 8000788:	4b10      	ldr	r3, [pc, #64]	@ (80007cc <HAL_GPIO_EXTI_Callback+0x64>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	b2db      	uxtb	r3, r3
 800078e:	2b00      	cmp	r3, #0
 8000790:	d111      	bne.n	80007b6 <HAL_GPIO_EXTI_Callback+0x4e>
        {
            trigger_dma_count_at_trigger = __HAL_DMA_GET_COUNTER(&handle_GPDMA1_Channel0);
 8000792:	4b0f      	ldr	r3, [pc, #60]	@ (80007d0 <HAL_GPIO_EXTI_Callback+0x68>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000798:	b29b      	uxth	r3, r3
 800079a:	4a0e      	ldr	r2, [pc, #56]	@ (80007d4 <HAL_GPIO_EXTI_Callback+0x6c>)
 800079c:	6013      	str	r3, [r2, #0]
            post_trigger_samples_to_wait = POST_TRIGGER_CYCLES * SAMPLES_PER_CYCLE;
 800079e:	4b0e      	ldr	r3, [pc, #56]	@ (80007d8 <HAL_GPIO_EXTI_Callback+0x70>)
 80007a0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80007a4:	601a      	str	r2, [r3, #0]
            capture_state = CAPTURE_STATE_ARMED;
 80007a6:	4b09      	ldr	r3, [pc, #36]	@ (80007cc <HAL_GPIO_EXTI_Callback+0x64>)
 80007a8:	2201      	movs	r2, #1
 80007aa:	701a      	strb	r2, [r3, #0]
            HAL_GPIO_TogglePin(GPIOD, LD1_Pin); // Indica que el trigger fue aceptado
 80007ac:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007b0:	480a      	ldr	r0, [pc, #40]	@ (80007dc <HAL_GPIO_EXTI_Callback+0x74>)
 80007b2:	f004 fd55 	bl	8005260 <HAL_GPIO_TogglePin>
 80007b6:	697b      	ldr	r3, [r7, #20]
 80007b8:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	f383 8810 	msr	PRIMASK, r3
}
 80007c0:	bf00      	nop
        }

        __set_PRIMASK(primask_status);
    }
}
 80007c2:	bf00      	nop
 80007c4:	3718      	adds	r7, #24
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	240082a5 	.word	0x240082a5
 80007d0:	240058d4 	.word	0x240058d4
 80007d4:	240082a8 	.word	0x240082a8
 80007d8:	240082ac 	.word	0x240082ac
 80007dc:	58020c00 	.word	0x58020c00

080007e0 <handle_capture_logic>:
/**
  * @brief  Función de ayuda llamada desde las interrupciones DMA.
  * Ahora solo actúa como un contador.
  */
void handle_capture_logic(uint32_t num_samples_in_block)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b08a      	sub	sp, #40	@ 0x28
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80007e8:	f3ef 8310 	mrs	r3, PRIMASK
 80007ec:	60fb      	str	r3, [r7, #12]
  return(result);
 80007ee:	68fb      	ldr	r3, [r7, #12]
    uint32_t primask_status = __get_PRIMASK();
 80007f0:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 80007f2:	b672      	cpsid	i
}
 80007f4:	bf00      	nop
    __disable_irq();

    if (capture_state == CAPTURE_STATE_ARMED)
 80007f6:	4b39      	ldr	r3, [pc, #228]	@ (80008dc <handle_capture_logic+0xfc>)
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	2b01      	cmp	r3, #1
 80007fe:	d10f      	bne.n	8000820 <handle_capture_logic+0x40>
    {
        post_trigger_samples_to_wait -= num_samples_in_block;
 8000800:	4b37      	ldr	r3, [pc, #220]	@ (80008e0 <handle_capture_logic+0x100>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	461a      	mov	r2, r3
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	1ad3      	subs	r3, r2, r3
 800080a:	461a      	mov	r2, r3
 800080c:	4b34      	ldr	r3, [pc, #208]	@ (80008e0 <handle_capture_logic+0x100>)
 800080e:	601a      	str	r2, [r3, #0]

        if (post_trigger_samples_to_wait <= 0)
 8000810:	4b33      	ldr	r3, [pc, #204]	@ (80008e0 <handle_capture_logic+0x100>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	2b00      	cmp	r3, #0
 8000816:	dc56      	bgt.n	80008c6 <handle_capture_logic+0xe6>
        {
            // ¡Listo! Ya pasaron los 8 ciclos post-trigger.
            // Cambiamos el estado para que la próxima interrupción haga la copia.
            capture_state = CAPTURE_STATE_COPY_DATA;
 8000818:	4b30      	ldr	r3, [pc, #192]	@ (80008dc <handle_capture_logic+0xfc>)
 800081a:	2202      	movs	r2, #2
 800081c:	701a      	strb	r2, [r3, #0]
 800081e:	e052      	b.n	80008c6 <handle_capture_logic+0xe6>
        }
    }
    else if (capture_state == CAPTURE_STATE_COPY_DATA)
 8000820:	4b2e      	ldr	r3, [pc, #184]	@ (80008dc <handle_capture_logic+0xfc>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	b2db      	uxtb	r3, r3
 8000826:	2b02      	cmp	r3, #2
 8000828:	d14d      	bne.n	80008c6 <handle_capture_logic+0xe6>
    {
        // El bloque post-trigger está completo. Ahora hacemos la copia final.
        // El trigger_index se calcula AHORA, usando el valor guardado.
        uint32_t trigger_index = ADC_BUFFER_LEN - trigger_dma_count_at_trigger;
 800082a:	4b2e      	ldr	r3, [pc, #184]	@ (80008e4 <handle_capture_logic+0x104>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	f5c3 53c0 	rsb	r3, r3, #6144	@ 0x1800
 8000832:	623b      	str	r3, [r7, #32]

        // El punto de inicio de nuestros 10 ciclos (2 pre + 8 post)
        // El inicio del pre-trigger es el punto de disparo menos 2 ciclos.
        uint32_t pre_trigger_samples = PRE_TRIGGER_CYCLES * SAMPLES_PER_CYCLE;
 8000834:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000838:	61fb      	str	r3, [r7, #28]
        uint32_t start_index = (trigger_index - pre_trigger_samples + ADC_BUFFER_LEN) % ADC_BUFFER_LEN;
 800083a:	6a3a      	ldr	r2, [r7, #32]
 800083c:	69fb      	ldr	r3, [r7, #28]
 800083e:	1ad3      	subs	r3, r2, r3
 8000840:	f503 52c0 	add.w	r2, r3, #6144	@ 0x1800
 8000844:	4b28      	ldr	r3, [pc, #160]	@ (80008e8 <handle_capture_logic+0x108>)
 8000846:	fba3 1302 	umull	r1, r3, r3, r2
 800084a:	0b19      	lsrs	r1, r3, #12
 800084c:	460b      	mov	r3, r1
 800084e:	005b      	lsls	r3, r3, #1
 8000850:	440b      	add	r3, r1
 8000852:	02db      	lsls	r3, r3, #11
 8000854:	1ad3      	subs	r3, r2, r3
 8000856:	61bb      	str	r3, [r7, #24]

        // Copia de los 10 ciclos completos
        uint32_t total_samples_to_copy = TOTAL_CAPTURE_CYCLES * SAMPLES_PER_CYCLE;
 8000858:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800085c:	617b      	str	r3, [r7, #20]
        uint32_t samples_to_end = ADC_BUFFER_LEN - start_index;
 800085e:	69bb      	ldr	r3, [r7, #24]
 8000860:	f5c3 53c0 	rsb	r3, r3, #6144	@ 0x1800
 8000864:	613b      	str	r3, [r7, #16]

        if (samples_to_end >= total_samples_to_copy) {
 8000866:	693a      	ldr	r2, [r7, #16]
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	429a      	cmp	r2, r3
 800086c:	d30a      	bcc.n	8000884 <handle_capture_logic+0xa4>
            memcpy(&processing_buffer[0], (const void*)&adc_dma_buffer[start_index], total_samples_to_copy * sizeof(uint16_t));
 800086e:	69bb      	ldr	r3, [r7, #24]
 8000870:	005b      	lsls	r3, r3, #1
 8000872:	4a1e      	ldr	r2, [pc, #120]	@ (80008ec <handle_capture_logic+0x10c>)
 8000874:	1899      	adds	r1, r3, r2
 8000876:	697b      	ldr	r3, [r7, #20]
 8000878:	005b      	lsls	r3, r3, #1
 800087a:	461a      	mov	r2, r3
 800087c:	481c      	ldr	r0, [pc, #112]	@ (80008f0 <handle_capture_logic+0x110>)
 800087e:	f008 fe37 	bl	80094f0 <memcpy>
 8000882:	e015      	b.n	80008b0 <handle_capture_logic+0xd0>
        } else {
            memcpy(&processing_buffer[0], (const void*)&adc_dma_buffer[start_index], samples_to_end * sizeof(uint16_t));
 8000884:	69bb      	ldr	r3, [r7, #24]
 8000886:	005b      	lsls	r3, r3, #1
 8000888:	4a18      	ldr	r2, [pc, #96]	@ (80008ec <handle_capture_logic+0x10c>)
 800088a:	1899      	adds	r1, r3, r2
 800088c:	693b      	ldr	r3, [r7, #16]
 800088e:	005b      	lsls	r3, r3, #1
 8000890:	461a      	mov	r2, r3
 8000892:	4817      	ldr	r0, [pc, #92]	@ (80008f0 <handle_capture_logic+0x110>)
 8000894:	f008 fe2c 	bl	80094f0 <memcpy>
            memcpy(&processing_buffer[samples_to_end], (const void*)&adc_dma_buffer[0], (total_samples_to_copy - samples_to_end) * sizeof(uint16_t));
 8000898:	693b      	ldr	r3, [r7, #16]
 800089a:	005b      	lsls	r3, r3, #1
 800089c:	4a14      	ldr	r2, [pc, #80]	@ (80008f0 <handle_capture_logic+0x110>)
 800089e:	1898      	adds	r0, r3, r2
 80008a0:	697a      	ldr	r2, [r7, #20]
 80008a2:	693b      	ldr	r3, [r7, #16]
 80008a4:	1ad3      	subs	r3, r2, r3
 80008a6:	005b      	lsls	r3, r3, #1
 80008a8:	461a      	mov	r2, r3
 80008aa:	4910      	ldr	r1, [pc, #64]	@ (80008ec <handle_capture_logic+0x10c>)
 80008ac:	f008 fe20 	bl	80094f0 <memcpy>
        }

        // Reseteamos el sistema para la próxima captura
        capture_state = CAPTURE_STATE_IDLE;
 80008b0:	4b0a      	ldr	r3, [pc, #40]	@ (80008dc <handle_capture_logic+0xfc>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	701a      	strb	r2, [r3, #0]
        data_ready_flag = true;
 80008b6:	4b0f      	ldr	r3, [pc, #60]	@ (80008f4 <handle_capture_logic+0x114>)
 80008b8:	2201      	movs	r2, #1
 80008ba:	701a      	strb	r2, [r3, #0]
        HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80008bc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008c0:	480d      	ldr	r0, [pc, #52]	@ (80008f8 <handle_capture_logic+0x118>)
 80008c2:	f004 fccd 	bl	8005260 <HAL_GPIO_TogglePin>
 80008c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008c8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80008ca:	68bb      	ldr	r3, [r7, #8]
 80008cc:	f383 8810 	msr	PRIMASK, r3
}
 80008d0:	bf00      	nop
    }

    __set_PRIMASK(primask_status);
}
 80008d2:	bf00      	nop
 80008d4:	3728      	adds	r7, #40	@ 0x28
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	240082a5 	.word	0x240082a5
 80008e0:	240082ac 	.word	0x240082ac
 80008e4:	240082a8 	.word	0x240082a8
 80008e8:	aaaaaaab 	.word	0xaaaaaaab
 80008ec:	24000030 	.word	0x24000030
 80008f0:	24005aa4 	.word	0x24005aa4
 80008f4:	240082a4 	.word	0x240082a4
 80008f8:	58020c00 	.word	0x58020c00

080008fc <HAL_ADC_ConvHalfCpltCallback>:

/**
  * @brief  Callbacks de DMA.
  */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
    handle_capture_logic(ADC_BUFFER_LEN / 2);
 8000904:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8000908:	f7ff ff6a 	bl	80007e0 <handle_capture_logic>
}
 800090c:	bf00      	nop
 800090e:	3708      	adds	r7, #8
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}

08000914 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
    handle_capture_logic(ADC_BUFFER_LEN / 2);
 800091c:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8000920:	f7ff ff5e 	bl	80007e0 <handle_capture_logic>
}
 8000924:	bf00      	nop
 8000926:	3708      	adds	r7, #8
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}

0800092c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000934:	2180      	movs	r1, #128	@ 0x80
 8000936:	4807      	ldr	r0, [pc, #28]	@ (8000954 <HAL_UART_TxCpltCallback+0x28>)
 8000938:	f004 fc92 	bl	8005260 <HAL_GPIO_TogglePin>
  // Asegúrate de que la interrupción proviene del UART que nos interesa
  if (huart->Instance == USART2)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a05      	ldr	r2, [pc, #20]	@ (8000958 <HAL_UART_TxCpltCallback+0x2c>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d102      	bne.n	800094c <HAL_UART_TxCpltCallback+0x20>
  {
    // La transmisión DMA ha finalizado, el UART está disponible.
    uart_tx_in_progress = false;
 8000946:	4b05      	ldr	r3, [pc, #20]	@ (800095c <HAL_UART_TxCpltCallback+0x30>)
 8000948:	2200      	movs	r2, #0
 800094a:	701a      	strb	r2, [r3, #0]
  }
}
 800094c:	bf00      	nop
 800094e:	3708      	adds	r7, #8
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	58020400 	.word	0x58020400
 8000958:	40004400 	.word	0x40004400
 800095c:	240082a6 	.word	0x240082a6

08000960 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a09      	ldr	r2, [pc, #36]	@ (8000994 <HAL_UART_ErrorCallback+0x34>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d10c      	bne.n	800098c <HAL_UART_ErrorCallback+0x2c>
    {
        // Ha ocurrido un error. Comprobamos si es un error de DMA.
        if (HAL_UART_GetError(huart) & HAL_UART_ERROR_DMA)
 8000972:	6878      	ldr	r0, [r7, #4]
 8000974:	f007 fd96 	bl	80084a4 <HAL_UART_GetError>
 8000978:	4603      	mov	r3, r0
 800097a:	f003 0310 	and.w	r3, r3, #16
 800097e:	2b00      	cmp	r3, #0
 8000980:	d004      	beq.n	800098c <HAL_UART_ErrorCallback+0x2c>
        {
            // ¡Error de DMA detectado! Enciende un LED para señalarlo.
            HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000982:	2201      	movs	r2, #1
 8000984:	2180      	movs	r1, #128	@ 0x80
 8000986:	4804      	ldr	r0, [pc, #16]	@ (8000998 <HAL_UART_ErrorCallback+0x38>)
 8000988:	f004 fc52 	bl	8005230 <HAL_GPIO_WritePin>
        }
    }
}
 800098c:	bf00      	nop
 800098e:	3708      	adds	r7, #8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	40004400 	.word	0x40004400
 8000998:	58020400 	.word	0x58020400

0800099c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80009a2:	f000 fb13 	bl	8000fcc <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80009a6:	4b5a      	ldr	r3, [pc, #360]	@ (8000b10 <main+0x174>)
 80009a8:	695b      	ldr	r3, [r3, #20]
 80009aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d11b      	bne.n	80009ea <main+0x4e>
  __ASM volatile ("dsb 0xF":::"memory");
 80009b2:	f3bf 8f4f 	dsb	sy
}
 80009b6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009b8:	f3bf 8f6f 	isb	sy
}
 80009bc:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80009be:	4b54      	ldr	r3, [pc, #336]	@ (8000b10 <main+0x174>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80009c6:	f3bf 8f4f 	dsb	sy
}
 80009ca:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009cc:	f3bf 8f6f 	isb	sy
}
 80009d0:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80009d2:	4b4f      	ldr	r3, [pc, #316]	@ (8000b10 <main+0x174>)
 80009d4:	695b      	ldr	r3, [r3, #20]
 80009d6:	4a4e      	ldr	r2, [pc, #312]	@ (8000b10 <main+0x174>)
 80009d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009dc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80009de:	f3bf 8f4f 	dsb	sy
}
 80009e2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009e4:	f3bf 8f6f 	isb	sy
}
 80009e8:	e000      	b.n	80009ec <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80009ea:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80009ec:	4b48      	ldr	r3, [pc, #288]	@ (8000b10 <main+0x174>)
 80009ee:	695b      	ldr	r3, [r3, #20]
 80009f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d138      	bne.n	8000a6a <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80009f8:	4b45      	ldr	r3, [pc, #276]	@ (8000b10 <main+0x174>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000a00:	f3bf 8f4f 	dsb	sy
}
 8000a04:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000a06:	4b42      	ldr	r3, [pc, #264]	@ (8000b10 <main+0x174>)
 8000a08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000a0c:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	0b5b      	lsrs	r3, r3, #13
 8000a12:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000a16:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	08db      	lsrs	r3, r3, #3
 8000a1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000a20:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000a22:	68bb      	ldr	r3, [r7, #8]
 8000a24:	015a      	lsls	r2, r3, #5
 8000a26:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000a2a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000a2c:	687a      	ldr	r2, [r7, #4]
 8000a2e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000a30:	4937      	ldr	r1, [pc, #220]	@ (8000b10 <main+0x174>)
 8000a32:	4313      	orrs	r3, r2
 8000a34:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	1e5a      	subs	r2, r3, #1
 8000a3c:	607a      	str	r2, [r7, #4]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d1ef      	bne.n	8000a22 <main+0x86>
    } while(sets-- != 0U);
 8000a42:	68bb      	ldr	r3, [r7, #8]
 8000a44:	1e5a      	subs	r2, r3, #1
 8000a46:	60ba      	str	r2, [r7, #8]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d1e5      	bne.n	8000a18 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000a4c:	f3bf 8f4f 	dsb	sy
}
 8000a50:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000a52:	4b2f      	ldr	r3, [pc, #188]	@ (8000b10 <main+0x174>)
 8000a54:	695b      	ldr	r3, [r3, #20]
 8000a56:	4a2e      	ldr	r2, [pc, #184]	@ (8000b10 <main+0x174>)
 8000a58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000a5c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000a5e:	f3bf 8f4f 	dsb	sy
}
 8000a62:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a64:	f3bf 8f6f 	isb	sy
}
 8000a68:	e000      	b.n	8000a6c <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000a6a:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a6c:	f000 fd85 	bl	800157a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a70:	f000 f860 	bl	8000b34 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000a74:	f000 f8c2 	bl	8000bfc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a78:	f000 fa1e 	bl	8000eb8 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 8000a7c:	f000 f954 	bl	8000d28 <MX_GPDMA1_Init>
  MX_ADC1_Init();
 8000a80:	f000 f8d6 	bl	8000c30 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000a84:	f000 f97e 	bl	8000d84 <MX_TIM3_Init>
  MX_SBS_Init();
 8000a88:	f000 f974 	bl	8000d74 <MX_SBS_Init>
  MX_USART2_UART_Init();
 8000a8c:	f000 f9c8 	bl	8000e20 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  // Agrega estas comprobaciones
  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 8000a90:	217f      	movs	r1, #127	@ 0x7f
 8000a92:	4820      	ldr	r0, [pc, #128]	@ (8000b14 <main+0x178>)
 8000a94:	f002 f890 	bl	8002bb8 <HAL_ADCEx_Calibration_Start>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <main+0x106>
  {
      // Si la calibración falla, ve al manejador de errores
      Error_Handler();
 8000a9e:	f000 face 	bl	800103e <Error_Handler>
  }
  if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adc_dma_buffer, ADC_BUFFER_LEN) != HAL_OK)
 8000aa2:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8000aa6:	491c      	ldr	r1, [pc, #112]	@ (8000b18 <main+0x17c>)
 8000aa8:	481a      	ldr	r0, [pc, #104]	@ (8000b14 <main+0x178>)
 8000aaa:	f001 f985 	bl	8001db8 <HAL_ADC_Start_DMA>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <main+0x11c>
  {
      // Si el inicio del ADC/DMA falla, ve al manejador de errores
      Error_Handler();
 8000ab4:	f000 fac3 	bl	800103e <Error_Handler>
  }
  if (HAL_TIM_Base_Start(&htim3) != HAL_OK)  // Puedes hacer lo mismo con el timer
 8000ab8:	4818      	ldr	r0, [pc, #96]	@ (8000b1c <main+0x180>)
 8000aba:	f006 fd1d 	bl	80074f8 <HAL_TIM_Base_Start>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <main+0x12c>
  {
      Error_Handler();
 8000ac4:	f000 fabb 	bl	800103e <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Si la bandera está levantada, significa que tenemos una captura fresca en processing_buffer
	  if (data_ready_flag == true && uart_tx_in_progress == false)
 8000ac8:	4b15      	ldr	r3, [pc, #84]	@ (8000b20 <main+0x184>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d0fa      	beq.n	8000ac8 <main+0x12c>
 8000ad2:	4b14      	ldr	r3, [pc, #80]	@ (8000b24 <main+0x188>)
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	f083 0301 	eor.w	r3, r3, #1
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d0f2      	beq.n	8000ac8 <main+0x12c>
	  {
	      data_ready_flag = false; // Bajas la bandera de datos primero
 8000ae2:	4b0f      	ldr	r3, [pc, #60]	@ (8000b20 <main+0x184>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	701a      	strb	r2, [r3, #0]

	      // Levanta la bandera de transmisión ANTES de llamar a la función
	      uart_tx_in_progress = true;
 8000ae8:	4b0e      	ldr	r3, [pc, #56]	@ (8000b24 <main+0x188>)
 8000aea:	2201      	movs	r2, #1
 8000aec:	701a      	strb	r2, [r3, #0]
	      HAL_GPIO_TogglePin(GPIOD, LD1_Pin);
 8000aee:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000af2:	480d      	ldr	r0, [pc, #52]	@ (8000b28 <main+0x18c>)
 8000af4:	f004 fbb4 	bl	8005260 <HAL_GPIO_TogglePin>
	      HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000af8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000afc:	480a      	ldr	r0, [pc, #40]	@ (8000b28 <main+0x18c>)
 8000afe:	f004 fbaf 	bl	8005260 <HAL_GPIO_TogglePin>
	      send_buffer_to_esp32(&huart2, processing_buffer, PROCESSING_BUFFER_LEN);
 8000b02:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 8000b06:	4909      	ldr	r1, [pc, #36]	@ (8000b2c <main+0x190>)
 8000b08:	4809      	ldr	r0, [pc, #36]	@ (8000b30 <main+0x194>)
 8000b0a:	f7ff fdcf 	bl	80006ac <send_buffer_to_esp32>
	  if (data_ready_flag == true && uart_tx_in_progress == false)
 8000b0e:	e7db      	b.n	8000ac8 <main+0x12c>
 8000b10:	e000ed00 	.word	0xe000ed00
 8000b14:	24005854 	.word	0x24005854
 8000b18:	24000030 	.word	0x24000030
 8000b1c:	2400594c 	.word	0x2400594c
 8000b20:	240082a4 	.word	0x240082a4
 8000b24:	240082a6 	.word	0x240082a6
 8000b28:	58020c00 	.word	0x58020c00
 8000b2c:	24005aa4 	.word	0x24005aa4
 8000b30:	24005998 	.word	0x24005998

08000b34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b0b0      	sub	sp, #192	@ 0xc0
 8000b38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b3e:	229c      	movs	r2, #156	@ 0x9c
 8000b40:	2100      	movs	r1, #0
 8000b42:	4618      	mov	r0, r3
 8000b44:	f008 fca8 	bl	8009498 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b48:	1d3b      	adds	r3, r7, #4
 8000b4a:	2220      	movs	r2, #32
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f008 fca2 	bl	8009498 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 8000b54:	2001      	movs	r0, #1
 8000b56:	f004 fc09 	bl	800536c <HAL_PWREx_ControlVoltageScaling>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <SystemClock_Config+0x30>
  {
    Error_Handler();
 8000b60:	f000 fa6d 	bl	800103e <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b64:	2302      	movs	r3, #2
 8000b66:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b70:	2340      	movs	r3, #64	@ 0x40
 8000b72:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL1.PLLState = RCC_PLL_ON;
 8000b74:	2302      	movs	r3, #2
 8000b76:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL1.PLLSource = RCC_PLLSOURCE_HSI;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL1.PLLM = 32;
 8000b7c:	2320      	movs	r3, #32
 8000b7e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL1.PLLN = 300;
 8000b80:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8000b84:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL1.PLLP = 1;
 8000b86:	2301      	movs	r3, #1
 8000b88:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL1.PLLQ = 2;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL1.PLLR = 2;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL1.PLLS = 2;
 8000b92:	2302      	movs	r3, #2
 8000b94:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL1.PLLT = 2;
 8000b96:	2302      	movs	r3, #2
 8000b98:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL1.PLLFractional = 0;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL2.PLLState = RCC_PLL_NONE;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL3.PLLState = RCC_PLL_NONE;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ba8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bac:	4618      	mov	r0, r3
 8000bae:	f004 fc05 	bl	80053bc <HAL_RCC_OscConfig>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000bb8:	f000 fa41 	bl	800103e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bbc:	233f      	movs	r3, #63	@ 0x3f
 8000bbe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK4|RCC_CLOCKTYPE_PCLK5;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bc0:	2303      	movs	r3, #3
 8000bc2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000bc8:	2308      	movs	r3, #8
 8000bca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000bcc:	2304      	movs	r3, #4
 8000bce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000bd0:	2340      	movs	r3, #64	@ 0x40
 8000bd2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000bd4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000bd8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB5CLKDivider = RCC_APB5_DIV2;
 8000bda:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000bde:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000be0:	1d3b      	adds	r3, r7, #4
 8000be2:	2137      	movs	r1, #55	@ 0x37
 8000be4:	4618      	mov	r0, r3
 8000be6:	f004 ff23 	bl	8005a30 <HAL_RCC_ClockConfig>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000bf0:	f000 fa25 	bl	800103e <Error_Handler>
  }
}
 8000bf4:	bf00      	nop
 8000bf6:	37c0      	adds	r7, #192	@ 0xc0
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b0a2      	sub	sp, #136	@ 0x88
 8000c00:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c02:	1d3b      	adds	r3, r7, #4
 8000c04:	2284      	movs	r2, #132	@ 0x84
 8000c06:	2100      	movs	r1, #0
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f008 fc45 	bl	8009498 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 8000c0e:	2308      	movs	r3, #8
 8000c10:	607b      	str	r3, [r7, #4]
  PeriphClkInit.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8000c12:	2300      	movs	r3, #0
 8000c14:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c16:	1d3b      	adds	r3, r7, #4
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f005 fd11 	bl	8006640 <HAL_RCCEx_PeriphCLKConfig>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <PeriphCommonClock_Config+0x2c>
  {
    Error_Handler();
 8000c24:	f000 fa0b 	bl	800103e <Error_Handler>
  }
}
 8000c28:	bf00      	nop
 8000c2a:	3788      	adds	r7, #136	@ 0x88
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b08c      	sub	sp, #48	@ 0x30
 8000c34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000c36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]
 8000c3e:	605a      	str	r2, [r3, #4]
 8000c40:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c42:	1d3b      	adds	r3, r7, #4
 8000c44:	2220      	movs	r2, #32
 8000c46:	2100      	movs	r1, #0
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f008 fc25 	bl	8009498 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c4e:	4b33      	ldr	r3, [pc, #204]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000c50:	4a33      	ldr	r2, [pc, #204]	@ (8000d20 <MX_ADC1_Init+0xf0>)
 8000c52:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000c54:	4b31      	ldr	r3, [pc, #196]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000c56:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000c5a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c5c:	4b2f      	ldr	r3, [pc, #188]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c62:	4b2e      	ldr	r3, [pc, #184]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c68:	4b2c      	ldr	r3, [pc, #176]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c6e:	4b2b      	ldr	r3, [pc, #172]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000c70:	2204      	movs	r2, #4
 8000c72:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c74:	4b29      	ldr	r3, [pc, #164]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c7a:	4b28      	ldr	r3, [pc, #160]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000c80:	4b26      	ldr	r3, [pc, #152]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000c82:	2201      	movs	r2, #1
 8000c84:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c86:	4b25      	ldr	r3, [pc, #148]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 8000c8e:	4b23      	ldr	r3, [pc, #140]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000c90:	f44f 6290 	mov.w	r2, #1152	@ 0x480
 8000c94:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000c96:	4b21      	ldr	r3, [pc, #132]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000c98:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c9c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8000c9e:	4b1f      	ldr	r3, [pc, #124]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000ca4:	4b1d      	ldr	r3, [pc, #116]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000ca6:	2202      	movs	r2, #2
 8000ca8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000caa:	4b1c      	ldr	r3, [pc, #112]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000cb0:	4b1a      	ldr	r3, [pc, #104]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cb8:	4818      	ldr	r0, [pc, #96]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000cba:	f000 ff2b 	bl	8001b14 <HAL_ADC_Init>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000cc4:	f000 f9bb 	bl	800103e <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ccc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4812      	ldr	r0, [pc, #72]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000cd4:	f001 ffd2 	bl	8002c7c <HAL_ADCEx_MultiModeConfigChannel>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000cde:	f000 f9ae 	bl	800103e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ce2:	4b10      	ldr	r3, [pc, #64]	@ (8000d24 <MX_ADC1_Init+0xf4>)
 8000ce4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ce6:	2306      	movs	r3, #6
 8000ce8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8000cea:	2305      	movs	r3, #5
 8000cec:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000cee:	237f      	movs	r3, #127	@ 0x7f
 8000cf0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000cf2:	2304      	movs	r3, #4
 8000cf4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC_OFFSET_SIGN_NEGATIVE;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	61fb      	str	r3, [r7, #28]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cfe:	1d3b      	adds	r3, r7, #4
 8000d00:	4619      	mov	r1, r3
 8000d02:	4806      	ldr	r0, [pc, #24]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000d04:	f001 f98c 	bl	8002020 <HAL_ADC_ConfigChannel>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000d0e:	f000 f996 	bl	800103e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d12:	bf00      	nop
 8000d14:	3730      	adds	r7, #48	@ 0x30
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	24005854 	.word	0x24005854
 8000d20:	40022000 	.word	0x40022000
 8000d24:	04300002 	.word	0x04300002

08000d28 <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8000d2e:	4b10      	ldr	r3, [pc, #64]	@ (8000d70 <MX_GPDMA1_Init+0x48>)
 8000d30:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000d34:	4a0e      	ldr	r2, [pc, #56]	@ (8000d70 <MX_GPDMA1_Init+0x48>)
 8000d36:	f043 0310 	orr.w	r3, r3, #16
 8000d3a:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8000d3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d70 <MX_GPDMA1_Init+0x48>)
 8000d40:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000d44:	607b      	str	r3, [r7, #4]
 8000d46:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 1, 0);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	2101      	movs	r1, #1
 8000d4c:	2027      	movs	r0, #39	@ 0x27
 8000d4e:	f002 f914 	bl	8002f7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 8000d52:	2027      	movs	r0, #39	@ 0x27
 8000d54:	f002 f92b 	bl	8002fae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel1_IRQn, 1, 0);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	2101      	movs	r1, #1
 8000d5c:	2028      	movs	r0, #40	@ 0x28
 8000d5e:	f002 f90c 	bl	8002f7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel1_IRQn);
 8000d62:	2028      	movs	r0, #40	@ 0x28
 8000d64:	f002 f923 	bl	8002fae <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 8000d68:	bf00      	nop
 8000d6a:	3708      	adds	r7, #8
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	58024400 	.word	0x58024400

08000d74 <MX_SBS_Init>:
  * @brief SBS Initialization Function
  * @param None
  * @retval None
  */
static void MX_SBS_Init(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE END SBS_Init 1 */
  /* USER CODE BEGIN SBS_Init 2 */

  /* USER CODE END SBS_Init 2 */

}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
	...

08000d84 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b088      	sub	sp, #32
 8000d88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d8a:	f107 0310 	add.w	r3, r7, #16
 8000d8e:	2200      	movs	r2, #0
 8000d90:	601a      	str	r2, [r3, #0]
 8000d92:	605a      	str	r2, [r3, #4]
 8000d94:	609a      	str	r2, [r3, #8]
 8000d96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d98:	1d3b      	adds	r3, r7, #4
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	605a      	str	r2, [r3, #4]
 8000da0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000da2:	4b1d      	ldr	r3, [pc, #116]	@ (8000e18 <MX_TIM3_Init+0x94>)
 8000da4:	4a1d      	ldr	r2, [pc, #116]	@ (8000e1c <MX_TIM3_Init+0x98>)
 8000da6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2;
 8000da8:	4b1b      	ldr	r3, [pc, #108]	@ (8000e18 <MX_TIM3_Init+0x94>)
 8000daa:	2202      	movs	r2, #2
 8000dac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dae:	4b1a      	ldr	r3, [pc, #104]	@ (8000e18 <MX_TIM3_Init+0x94>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3254;
 8000db4:	4b18      	ldr	r3, [pc, #96]	@ (8000e18 <MX_TIM3_Init+0x94>)
 8000db6:	f640 42b6 	movw	r2, #3254	@ 0xcb6
 8000dba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dbc:	4b16      	ldr	r3, [pc, #88]	@ (8000e18 <MX_TIM3_Init+0x94>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dc2:	4b15      	ldr	r3, [pc, #84]	@ (8000e18 <MX_TIM3_Init+0x94>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000dc8:	4813      	ldr	r0, [pc, #76]	@ (8000e18 <MX_TIM3_Init+0x94>)
 8000dca:	f006 fb3d 	bl	8007448 <HAL_TIM_Base_Init>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000dd4:	f000 f933 	bl	800103e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dd8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ddc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000dde:	f107 0310 	add.w	r3, r7, #16
 8000de2:	4619      	mov	r1, r3
 8000de4:	480c      	ldr	r0, [pc, #48]	@ (8000e18 <MX_TIM3_Init+0x94>)
 8000de6:	f006 fbf5 	bl	80075d4 <HAL_TIM_ConfigClockSource>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000df0:	f000 f925 	bl	800103e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000df4:	2320      	movs	r3, #32
 8000df6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000dfc:	1d3b      	adds	r3, r7, #4
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4805      	ldr	r0, [pc, #20]	@ (8000e18 <MX_TIM3_Init+0x94>)
 8000e02:	f006 fe5b 	bl	8007abc <HAL_TIMEx_MasterConfigSynchronization>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000e0c:	f000 f917 	bl	800103e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e10:	bf00      	nop
 8000e12:	3720      	adds	r7, #32
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	2400594c 	.word	0x2400594c
 8000e1c:	40000400 	.word	0x40000400

08000e20 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e24:	4b22      	ldr	r3, [pc, #136]	@ (8000eb0 <MX_USART2_UART_Init+0x90>)
 8000e26:	4a23      	ldr	r2, [pc, #140]	@ (8000eb4 <MX_USART2_UART_Init+0x94>)
 8000e28:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e2a:	4b21      	ldr	r3, [pc, #132]	@ (8000eb0 <MX_USART2_UART_Init+0x90>)
 8000e2c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e30:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e32:	4b1f      	ldr	r3, [pc, #124]	@ (8000eb0 <MX_USART2_UART_Init+0x90>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e38:	4b1d      	ldr	r3, [pc, #116]	@ (8000eb0 <MX_USART2_UART_Init+0x90>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e3e:	4b1c      	ldr	r3, [pc, #112]	@ (8000eb0 <MX_USART2_UART_Init+0x90>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 8000e44:	4b1a      	ldr	r3, [pc, #104]	@ (8000eb0 <MX_USART2_UART_Init+0x90>)
 8000e46:	2208      	movs	r2, #8
 8000e48:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e4a:	4b19      	ldr	r3, [pc, #100]	@ (8000eb0 <MX_USART2_UART_Init+0x90>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e50:	4b17      	ldr	r3, [pc, #92]	@ (8000eb0 <MX_USART2_UART_Init+0x90>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e56:	4b16      	ldr	r3, [pc, #88]	@ (8000eb0 <MX_USART2_UART_Init+0x90>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e5c:	4b14      	ldr	r3, [pc, #80]	@ (8000eb0 <MX_USART2_UART_Init+0x90>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e62:	4b13      	ldr	r3, [pc, #76]	@ (8000eb0 <MX_USART2_UART_Init+0x90>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e68:	4811      	ldr	r0, [pc, #68]	@ (8000eb0 <MX_USART2_UART_Init+0x90>)
 8000e6a:	f006 feb1 	bl	8007bd0 <HAL_UART_Init>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000e74:	f000 f8e3 	bl	800103e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e78:	2100      	movs	r1, #0
 8000e7a:	480d      	ldr	r0, [pc, #52]	@ (8000eb0 <MX_USART2_UART_Init+0x90>)
 8000e7c:	f008 fa42 	bl	8009304 <HAL_UARTEx_SetTxFifoThreshold>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000e86:	f000 f8da 	bl	800103e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	4808      	ldr	r0, [pc, #32]	@ (8000eb0 <MX_USART2_UART_Init+0x90>)
 8000e8e:	f008 fa77 	bl	8009380 <HAL_UARTEx_SetRxFifoThreshold>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000e98:	f000 f8d1 	bl	800103e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000e9c:	4804      	ldr	r0, [pc, #16]	@ (8000eb0 <MX_USART2_UART_Init+0x90>)
 8000e9e:	f008 f9f8 	bl	8009292 <HAL_UARTEx_DisableFifoMode>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000ea8:	f000 f8c9 	bl	800103e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000eac:	bf00      	nop
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	24005998 	.word	0x24005998
 8000eb4:	40004400 	.word	0x40004400

08000eb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b08a      	sub	sp, #40	@ 0x28
 8000ebc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ebe:	f107 0314 	add.w	r3, r7, #20
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	605a      	str	r2, [r3, #4]
 8000ec8:	609a      	str	r2, [r3, #8]
 8000eca:	60da      	str	r2, [r3, #12]
 8000ecc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ece:	4b3b      	ldr	r3, [pc, #236]	@ (8000fbc <MX_GPIO_Init+0x104>)
 8000ed0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ed4:	4a39      	ldr	r2, [pc, #228]	@ (8000fbc <MX_GPIO_Init+0x104>)
 8000ed6:	f043 0304 	orr.w	r3, r3, #4
 8000eda:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000ede:	4b37      	ldr	r3, [pc, #220]	@ (8000fbc <MX_GPIO_Init+0x104>)
 8000ee0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ee4:	613b      	str	r3, [r7, #16]
 8000ee6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee8:	4b34      	ldr	r3, [pc, #208]	@ (8000fbc <MX_GPIO_Init+0x104>)
 8000eea:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000eee:	4a33      	ldr	r2, [pc, #204]	@ (8000fbc <MX_GPIO_Init+0x104>)
 8000ef0:	f043 0302 	orr.w	r3, r3, #2
 8000ef4:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000ef8:	4b30      	ldr	r3, [pc, #192]	@ (8000fbc <MX_GPIO_Init+0x104>)
 8000efa:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f02:	4b2e      	ldr	r3, [pc, #184]	@ (8000fbc <MX_GPIO_Init+0x104>)
 8000f04:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f08:	4a2c      	ldr	r2, [pc, #176]	@ (8000fbc <MX_GPIO_Init+0x104>)
 8000f0a:	f043 0308 	orr.w	r3, r3, #8
 8000f0e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f12:	4b2a      	ldr	r3, [pc, #168]	@ (8000fbc <MX_GPIO_Init+0x104>)
 8000f14:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f18:	60bb      	str	r3, [r7, #8]
 8000f1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1c:	4b27      	ldr	r3, [pc, #156]	@ (8000fbc <MX_GPIO_Init+0x104>)
 8000f1e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f22:	4a26      	ldr	r2, [pc, #152]	@ (8000fbc <MX_GPIO_Init+0x104>)
 8000f24:	f043 0301 	orr.w	r3, r3, #1
 8000f28:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f2c:	4b23      	ldr	r3, [pc, #140]	@ (8000fbc <MX_GPIO_Init+0x104>)
 8000f2e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f32:	607b      	str	r3, [r7, #4]
 8000f34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000f36:	2200      	movs	r2, #0
 8000f38:	2180      	movs	r1, #128	@ 0x80
 8000f3a:	4821      	ldr	r0, [pc, #132]	@ (8000fc0 <MX_GPIO_Init+0x108>)
 8000f3c:	f004 f978 	bl	8005230 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD2_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000f40:	2200      	movs	r2, #0
 8000f42:	f44f 5110 	mov.w	r1, #9216	@ 0x2400
 8000f46:	481f      	ldr	r0, [pc, #124]	@ (8000fc4 <MX_GPIO_Init+0x10c>)
 8000f48:	f004 f972 	bl	8005230 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ext_button_Pin */
  GPIO_InitStruct.Pin = ext_button_Pin;
 8000f4c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f52:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000f56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ext_button_GPIO_Port, &GPIO_InitStruct);
 8000f5c:	f107 0314 	add.w	r3, r7, #20
 8000f60:	4619      	mov	r1, r3
 8000f62:	4819      	ldr	r0, [pc, #100]	@ (8000fc8 <MX_GPIO_Init+0x110>)
 8000f64:	f004 f804 	bl	8004f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000f68:	2380      	movs	r3, #128	@ 0x80
 8000f6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f74:	2300      	movs	r3, #0
 8000f76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000f78:	f107 0314 	add.w	r3, r7, #20
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4810      	ldr	r0, [pc, #64]	@ (8000fc0 <MX_GPIO_Init+0x108>)
 8000f80:	f003 fff6 	bl	8004f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD1_Pin;
 8000f84:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 8000f88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f92:	2300      	movs	r3, #0
 8000f94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f96:	f107 0314 	add.w	r3, r7, #20
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4809      	ldr	r0, [pc, #36]	@ (8000fc4 <MX_GPIO_Init+0x10c>)
 8000f9e:	f003 ffe7 	bl	8004f70 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI10_IRQn, 0, 0);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	201a      	movs	r0, #26
 8000fa8:	f001 ffe7 	bl	8002f7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI10_IRQn);
 8000fac:	201a      	movs	r0, #26
 8000fae:	f001 fffe 	bl	8002fae <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000fb2:	bf00      	nop
 8000fb4:	3728      	adds	r7, #40	@ 0x28
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	58024400 	.word	0x58024400
 8000fc0:	58020400 	.word	0x58020400
 8000fc4:	58020c00 	.word	0x58020c00
 8000fc8:	58020800 	.word	0x58020800

08000fcc <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

static void MPU_Config(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000fd2:	463b      	mov	r3, r7
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000fde:	f002 f823 	bl	8003028 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 8000fea:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 8000fee:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000ff0:	2312      	movs	r3, #18
 8000ff2:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001000:	2301      	movs	r3, #1
 8001002:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001004:	2301      	movs	r3, #1
 8001006:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8001008:	2301      	movs	r3, #1
 800100a:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 800100c:	2301      	movs	r3, #1
 800100e:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001010:	463b      	mov	r3, r7
 8001012:	4618      	mov	r0, r3
 8001014:	f002 f826 	bl	8003064 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8001018:	2301      	movs	r3, #1
 800101a:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 800101c:	230d      	movs	r3, #13
 800101e:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001020:	2300      	movs	r3, #0
 8001022:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001024:	2300      	movs	r3, #0
 8001026:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001028:	463b      	mov	r3, r7
 800102a:	4618      	mov	r0, r3
 800102c:	f002 f81a 	bl	8003064 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001030:	2004      	movs	r0, #4
 8001032:	f001 ffd7 	bl	8002fe4 <HAL_MPU_Enable>

}
 8001036:	bf00      	nop
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800103e:	b480      	push	{r7}
 8001040:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001042:	b672      	cpsid	i
}
 8001044:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001046:	bf00      	nop
 8001048:	e7fd      	b.n	8001046 <Error_Handler+0x8>
	...

0800104c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0

  /* Configure the system Power Supply */

  if (HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY) != HAL_OK)
 8001052:	2002      	movs	r0, #2
 8001054:	f004 f938 	bl	80052c8 <HAL_PWREx_ConfigSupply>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <HAL_MspInit+0x16>
  {
    /* Initialization error */
    Error_Handler();
 800105e:	f7ff ffee 	bl	800103e <Error_Handler>

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SBS_CLK_ENABLE();
 8001062:	4b08      	ldr	r3, [pc, #32]	@ (8001084 <HAL_MspInit+0x38>)
 8001064:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001068:	4a06      	ldr	r2, [pc, #24]	@ (8001084 <HAL_MspInit+0x38>)
 800106a:	f043 0302 	orr.w	r3, r3, #2
 800106e:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8001072:	4b04      	ldr	r3, [pc, #16]	@ (8001084 <HAL_MspInit+0x38>)
 8001074:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001078:	607b      	str	r3, [r7, #4]
 800107a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800107c:	bf00      	nop
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	58024400 	.word	0x58024400

08001088 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b0c6      	sub	sp, #280	@ 0x118
 800108c:	af00      	add	r7, sp, #0
 800108e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001092:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001096:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001098:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
 80010a6:	611a      	str	r2, [r3, #16]
  DMA_NodeConfTypeDef NodeConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010a8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80010ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80010b0:	4618      	mov	r0, r3
 80010b2:	2384      	movs	r3, #132	@ 0x84
 80010b4:	461a      	mov	r2, r3
 80010b6:	2100      	movs	r1, #0
 80010b8:	f008 f9ee 	bl	8009498 <memset>
  if(hadc->Instance==ADC1)
 80010bc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80010c0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a71      	ldr	r2, [pc, #452]	@ (8001290 <HAL_ADC_MspInit+0x208>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	f040 80db 	bne.w	8001286 <HAL_ADC_MspInit+0x1fe>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80010d0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80010d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80010d8:	2210      	movs	r2, #16
 80010da:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 80010dc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80010e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80010e4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80010e8:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010ea:	f107 0314 	add.w	r3, r7, #20
 80010ee:	4618      	mov	r0, r3
 80010f0:	f005 faa6 	bl	8006640 <HAL_RCCEx_PeriphCLKConfig>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 80010fa:	f7ff ffa0 	bl	800103e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80010fe:	4b65      	ldr	r3, [pc, #404]	@ (8001294 <HAL_ADC_MspInit+0x20c>)
 8001100:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8001104:	4a63      	ldr	r2, [pc, #396]	@ (8001294 <HAL_ADC_MspInit+0x20c>)
 8001106:	f043 0320 	orr.w	r3, r3, #32
 800110a:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 800110e:	4b61      	ldr	r3, [pc, #388]	@ (8001294 <HAL_ADC_MspInit+0x20c>)
 8001110:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
 8001114:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001118:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001122:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001126:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001128:	4b5a      	ldr	r3, [pc, #360]	@ (8001294 <HAL_ADC_MspInit+0x20c>)
 800112a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800112e:	4a59      	ldr	r2, [pc, #356]	@ (8001294 <HAL_ADC_MspInit+0x20c>)
 8001130:	f043 0301 	orr.w	r3, r3, #1
 8001134:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001138:	4b56      	ldr	r3, [pc, #344]	@ (8001294 <HAL_ADC_MspInit+0x20c>)
 800113a:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 800113e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001142:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800114c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001150:	681b      	ldr	r3, [r3, #0]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_INP1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001152:	2302      	movs	r3, #2
 8001154:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001158:	2303      	movs	r3, #3
 800115a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115e:	2300      	movs	r3, #0
 8001160:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001164:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8001168:	4619      	mov	r1, r3
 800116a:	484b      	ldr	r0, [pc, #300]	@ (8001298 <HAL_ADC_MspInit+0x210>)
 800116c:	f003 ff00 	bl	8004f70 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* GPDMA1_REQUEST_ADC1 Init */
    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 8001170:	2321      	movs	r3, #33	@ 0x21
 8001172:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    NodeConfig.Init.Request = GPDMA1_REQUEST_ADC1;
 8001176:	2300      	movs	r3, #0
 8001178:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 800117c:	2300      	movs	r3, #0
 800117e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001182:	2300      	movs	r3, #0
 8001184:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 8001188:	2300      	movs	r3, #0
 800118a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 800118e:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8001192:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 8001196:	2301      	movs	r3, #1
 8001198:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 800119c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    NodeConfig.Init.SrcBurstLength = 1;
 80011a4:	2301      	movs	r3, #1
 80011a6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    NodeConfig.Init.DestBurstLength = 1;
 80011aa:	2301      	movs	r3, #1
 80011ac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80011b6:	2300      	movs	r3, #0
 80011b8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    NodeConfig.Init.Mode = DMA_NORMAL;
 80011bc:	2300      	movs	r3, #0
 80011be:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 80011c2:	2300      	movs	r3, #0
 80011c4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 80011c8:	2300      	movs	r3, #0
 80011ca:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 80011ce:	2300      	movs	r3, #0
 80011d0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel0) != HAL_OK)
 80011d4:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80011d8:	4930      	ldr	r1, [pc, #192]	@ (800129c <HAL_ADC_MspInit+0x214>)
 80011da:	4618      	mov	r0, r3
 80011dc:	f002 ffd6 	bl	800418c <HAL_DMAEx_List_BuildNode>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <HAL_ADC_MspInit+0x162>
    {
      Error_Handler();
 80011e6:	f7ff ff2a 	bl	800103e <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel0, NULL, &Node_GPDMA1_Channel0) != HAL_OK)
 80011ea:	4a2c      	ldr	r2, [pc, #176]	@ (800129c <HAL_ADC_MspInit+0x214>)
 80011ec:	2100      	movs	r1, #0
 80011ee:	482c      	ldr	r0, [pc, #176]	@ (80012a0 <HAL_ADC_MspInit+0x218>)
 80011f0:	f002 fff8 	bl	80041e4 <HAL_DMAEx_List_InsertNode>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <HAL_ADC_MspInit+0x176>
    {
      Error_Handler();
 80011fa:	f7ff ff20 	bl	800103e <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel0) != HAL_OK)
 80011fe:	4828      	ldr	r0, [pc, #160]	@ (80012a0 <HAL_ADC_MspInit+0x218>)
 8001200:	f003 f8b9 	bl	8004376 <HAL_DMAEx_List_SetCircularMode>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <HAL_ADC_MspInit+0x186>
    {
      Error_Handler();
 800120a:	f7ff ff18 	bl	800103e <Error_Handler>
    }

    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 800120e:	4b25      	ldr	r3, [pc, #148]	@ (80012a4 <HAL_ADC_MspInit+0x21c>)
 8001210:	4a25      	ldr	r2, [pc, #148]	@ (80012a8 <HAL_ADC_MspInit+0x220>)
 8001212:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.InitLinkedList.Priority = DMA_LOW_PRIORITY_MID_WEIGHT;
 8001214:	4b23      	ldr	r3, [pc, #140]	@ (80012a4 <HAL_ADC_MspInit+0x21c>)
 8001216:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800121a:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel0.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 800121c:	4b21      	ldr	r3, [pc, #132]	@ (80012a4 <HAL_ADC_MspInit+0x21c>)
 800121e:	2200      	movs	r2, #0
 8001220:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel0.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 8001222:	4b20      	ldr	r3, [pc, #128]	@ (80012a4 <HAL_ADC_MspInit+0x21c>)
 8001224:	2200      	movs	r2, #0
 8001226:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel0.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001228:	4b1e      	ldr	r3, [pc, #120]	@ (80012a4 <HAL_ADC_MspInit+0x21c>)
 800122a:	2200      	movs	r2, #0
 800122c:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel0.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 800122e:	4b1d      	ldr	r3, [pc, #116]	@ (80012a4 <HAL_ADC_MspInit+0x21c>)
 8001230:	2281      	movs	r2, #129	@ 0x81
 8001232:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 8001234:	481b      	ldr	r0, [pc, #108]	@ (80012a4 <HAL_ADC_MspInit+0x21c>)
 8001236:	f002 fde7 	bl	8003e08 <HAL_DMAEx_List_Init>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <HAL_ADC_MspInit+0x1bc>
    {
      Error_Handler();
 8001240:	f7ff fefd 	bl	800103e <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel0, &List_GPDMA1_Channel0) != HAL_OK)
 8001244:	4916      	ldr	r1, [pc, #88]	@ (80012a0 <HAL_ADC_MspInit+0x218>)
 8001246:	4817      	ldr	r0, [pc, #92]	@ (80012a4 <HAL_ADC_MspInit+0x21c>)
 8001248:	f003 f8f6 	bl	8004438 <HAL_DMAEx_List_LinkQ>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <HAL_ADC_MspInit+0x1ce>
    {
      Error_Handler();
 8001252:	f7ff fef4 	bl	800103e <Error_Handler>
    }

    __HAL_LINKDMA(hadc, DMA_Handle, handle_GPDMA1_Channel0);
 8001256:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800125a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a10      	ldr	r2, [pc, #64]	@ (80012a4 <HAL_ADC_MspInit+0x21c>)
 8001262:	651a      	str	r2, [r3, #80]	@ 0x50
 8001264:	4a0f      	ldr	r2, [pc, #60]	@ (80012a4 <HAL_ADC_MspInit+0x21c>)
 8001266:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800126a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001272:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8001276:	480b      	ldr	r0, [pc, #44]	@ (80012a4 <HAL_ADC_MspInit+0x21c>)
 8001278:	f002 fae0 	bl	800383c <HAL_DMA_ConfigChannelAttributes>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <HAL_ADC_MspInit+0x1fe>
    {
      Error_Handler();
 8001282:	f7ff fedc 	bl	800103e <Error_Handler>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001286:	bf00      	nop
 8001288:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40022000 	.word	0x40022000
 8001294:	58024400 	.word	0x58024400
 8001298:	58020000 	.word	0x58020000
 800129c:	2400000c 	.word	0x2400000c
 80012a0:	240058bc 	.word	0x240058bc
 80012a4:	240058d4 	.word	0x240058d4
 80012a8:	40021050 	.word	0x40021050

080012ac <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b085      	sub	sp, #20
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a0a      	ldr	r2, [pc, #40]	@ (80012e4 <HAL_TIM_Base_MspInit+0x38>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d10c      	bne.n	80012d8 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012be:	4b0a      	ldr	r3, [pc, #40]	@ (80012e8 <HAL_TIM_Base_MspInit+0x3c>)
 80012c0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80012c4:	4a08      	ldr	r2, [pc, #32]	@ (80012e8 <HAL_TIM_Base_MspInit+0x3c>)
 80012c6:	f043 0302 	orr.w	r3, r3, #2
 80012ca:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80012ce:	4b06      	ldr	r3, [pc, #24]	@ (80012e8 <HAL_TIM_Base_MspInit+0x3c>)
 80012d0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80012d4:	60fb      	str	r3, [r7, #12]
 80012d6:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 80012d8:	bf00      	nop
 80012da:	3714      	adds	r7, #20
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr
 80012e4:	40000400 	.word	0x40000400
 80012e8:	58024400 	.word	0x58024400

080012ec <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b0aa      	sub	sp, #168	@ 0xa8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f4:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]
 8001302:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001304:	f107 0310 	add.w	r3, r7, #16
 8001308:	2284      	movs	r2, #132	@ 0x84
 800130a:	2100      	movs	r1, #0
 800130c:	4618      	mov	r0, r3
 800130e:	f008 f8c3 	bl	8009498 <memset>
  if(huart->Instance==USART2)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a49      	ldr	r2, [pc, #292]	@ (800143c <HAL_UART_MspInit+0x150>)
 8001318:	4293      	cmp	r3, r2
 800131a:	f040 808a 	bne.w	8001432 <HAL_UART_MspInit+0x146>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART234578;
 800131e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001322:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PCLK1;
 8001324:	2300      	movs	r3, #0
 8001326:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800132a:	f107 0310 	add.w	r3, r7, #16
 800132e:	4618      	mov	r0, r3
 8001330:	f005 f986 	bl	8006640 <HAL_RCCEx_PeriphCLKConfig>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <HAL_UART_MspInit+0x52>
    {
      Error_Handler();
 800133a:	f7ff fe80 	bl	800103e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800133e:	4b40      	ldr	r3, [pc, #256]	@ (8001440 <HAL_UART_MspInit+0x154>)
 8001340:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001344:	4a3e      	ldr	r2, [pc, #248]	@ (8001440 <HAL_UART_MspInit+0x154>)
 8001346:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800134a:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800134e:	4b3c      	ldr	r3, [pc, #240]	@ (8001440 <HAL_UART_MspInit+0x154>)
 8001350:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001354:	60fb      	str	r3, [r7, #12]
 8001356:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001358:	4b39      	ldr	r3, [pc, #228]	@ (8001440 <HAL_UART_MspInit+0x154>)
 800135a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800135e:	4a38      	ldr	r2, [pc, #224]	@ (8001440 <HAL_UART_MspInit+0x154>)
 8001360:	f043 0308 	orr.w	r3, r3, #8
 8001364:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001368:	4b35      	ldr	r3, [pc, #212]	@ (8001440 <HAL_UART_MspInit+0x154>)
 800136a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800136e:	60bb      	str	r3, [r7, #8]
 8001370:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001372:	2360      	movs	r3, #96	@ 0x60
 8001374:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001378:	2302      	movs	r3, #2
 800137a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137e:	2300      	movs	r3, #0
 8001380:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001384:	2300      	movs	r3, #0
 8001386:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800138a:	2307      	movs	r3, #7
 800138c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001390:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001394:	4619      	mov	r1, r3
 8001396:	482b      	ldr	r0, [pc, #172]	@ (8001444 <HAL_UART_MspInit+0x158>)
 8001398:	f003 fdea 	bl	8004f70 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* GPDMA1_REQUEST_USART2_TX Init */
    handle_GPDMA1_Channel1.Instance = GPDMA1_Channel1;
 800139c:	4b2a      	ldr	r3, [pc, #168]	@ (8001448 <HAL_UART_MspInit+0x15c>)
 800139e:	4a2b      	ldr	r2, [pc, #172]	@ (800144c <HAL_UART_MspInit+0x160>)
 80013a0:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel1.Init.Request = GPDMA1_REQUEST_USART2_TX;
 80013a2:	4b29      	ldr	r3, [pc, #164]	@ (8001448 <HAL_UART_MspInit+0x15c>)
 80013a4:	224c      	movs	r2, #76	@ 0x4c
 80013a6:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel1.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80013a8:	4b27      	ldr	r3, [pc, #156]	@ (8001448 <HAL_UART_MspInit+0x15c>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013ae:	4b26      	ldr	r3, [pc, #152]	@ (8001448 <HAL_UART_MspInit+0x15c>)
 80013b0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013b4:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel1.Init.SrcInc = DMA_SINC_INCREMENTED;
 80013b6:	4b24      	ldr	r3, [pc, #144]	@ (8001448 <HAL_UART_MspInit+0x15c>)
 80013b8:	2208      	movs	r2, #8
 80013ba:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel1.Init.DestInc = DMA_DINC_FIXED;
 80013bc:	4b22      	ldr	r3, [pc, #136]	@ (8001448 <HAL_UART_MspInit+0x15c>)
 80013be:	2200      	movs	r2, #0
 80013c0:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel1.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 80013c2:	4b21      	ldr	r3, [pc, #132]	@ (8001448 <HAL_UART_MspInit+0x15c>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel1.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 80013c8:	4b1f      	ldr	r3, [pc, #124]	@ (8001448 <HAL_UART_MspInit+0x15c>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel1.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 80013ce:	4b1e      	ldr	r3, [pc, #120]	@ (8001448 <HAL_UART_MspInit+0x15c>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel1.Init.SrcBurstLength = 1;
 80013d4:	4b1c      	ldr	r3, [pc, #112]	@ (8001448 <HAL_UART_MspInit+0x15c>)
 80013d6:	2201      	movs	r2, #1
 80013d8:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel1.Init.DestBurstLength = 1;
 80013da:	4b1b      	ldr	r3, [pc, #108]	@ (8001448 <HAL_UART_MspInit+0x15c>)
 80013dc:	2201      	movs	r2, #1
 80013de:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel1.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80013e0:	4b19      	ldr	r3, [pc, #100]	@ (8001448 <HAL_UART_MspInit+0x15c>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel1.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80013e6:	4b18      	ldr	r3, [pc, #96]	@ (8001448 <HAL_UART_MspInit+0x15c>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel1.Init.Mode = DMA_NORMAL;
 80013ec:	4b16      	ldr	r3, [pc, #88]	@ (8001448 <HAL_UART_MspInit+0x15c>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel1) != HAL_OK)
 80013f2:	4815      	ldr	r0, [pc, #84]	@ (8001448 <HAL_UART_MspInit+0x15c>)
 80013f4:	f001 fe7c 	bl	80030f0 <HAL_DMA_Init>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <HAL_UART_MspInit+0x116>
    {
      Error_Handler();
 80013fe:	f7ff fe1e 	bl	800103e <Error_Handler>
    }

    __HAL_LINKDMA(huart, hdmatx, handle_GPDMA1_Channel1);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a10      	ldr	r2, [pc, #64]	@ (8001448 <HAL_UART_MspInit+0x15c>)
 8001406:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001408:	4a0f      	ldr	r2, [pc, #60]	@ (8001448 <HAL_UART_MspInit+0x15c>)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel1, DMA_CHANNEL_NPRIV) != HAL_OK)
 800140e:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8001412:	480d      	ldr	r0, [pc, #52]	@ (8001448 <HAL_UART_MspInit+0x15c>)
 8001414:	f002 fa12 	bl	800383c <HAL_DMA_ConfigChannelAttributes>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <HAL_UART_MspInit+0x136>
    {
      Error_Handler();
 800141e:	f7ff fe0e 	bl	800103e <Error_Handler>
    }

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001422:	2200      	movs	r2, #0
 8001424:	2100      	movs	r1, #0
 8001426:	2053      	movs	r0, #83	@ 0x53
 8001428:	f001 fda7 	bl	8002f7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800142c:	2053      	movs	r0, #83	@ 0x53
 800142e:	f001 fdbe 	bl	8002fae <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001432:	bf00      	nop
 8001434:	37a8      	adds	r7, #168	@ 0xa8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40004400 	.word	0x40004400
 8001440:	58024400 	.word	0x58024400
 8001444:	58020c00 	.word	0x58020c00
 8001448:	24005a2c 	.word	0x24005a2c
 800144c:	400210d0 	.word	0x400210d0

08001450 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001454:	bf00      	nop
 8001456:	e7fd      	b.n	8001454 <NMI_Handler+0x4>

08001458 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800145c:	bf00      	nop
 800145e:	e7fd      	b.n	800145c <HardFault_Handler+0x4>

08001460 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001464:	bf00      	nop
 8001466:	e7fd      	b.n	8001464 <MemManage_Handler+0x4>

08001468 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800146c:	bf00      	nop
 800146e:	e7fd      	b.n	800146c <BusFault_Handler+0x4>

08001470 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001474:	bf00      	nop
 8001476:	e7fd      	b.n	8001474 <UsageFault_Handler+0x4>

08001478 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800147c:	bf00      	nop
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr

08001486 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001486:	b480      	push	{r7}
 8001488:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800148a:	bf00      	nop
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001498:	bf00      	nop
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr

080014a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014a2:	b580      	push	{r7, lr}
 80014a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014a6:	f000 f8bd 	bl	8001624 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}

080014ae <EXTI10_IRQHandler>:

/**
  * @brief This function handles EXTI line10 interrupt.
  */
void EXTI10_IRQHandler(void)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI10_IRQn 0 */

  /* USER CODE END EXTI10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80014b2:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80014b6:	f003 feed 	bl	8005294 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI10_IRQn 1 */

  /* USER CODE END EXTI10_IRQn 1 */
}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
	...

080014c0 <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 80014c4:	4802      	ldr	r0, [pc, #8]	@ (80014d0 <GPDMA1_Channel0_IRQHandler+0x10>)
 80014c6:	f002 f857 	bl	8003578 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	240058d4 	.word	0x240058d4

080014d4 <GPDMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 1 global interrupt.
  */
void GPDMA1_Channel1_IRQHandler(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 0 */

  /* USER CODE END GPDMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel1);
 80014d8:	4802      	ldr	r0, [pc, #8]	@ (80014e4 <GPDMA1_Channel1_IRQHandler+0x10>)
 80014da:	f002 f84d 	bl	8003578 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 1 */

  /* USER CODE END GPDMA1_Channel1_IRQn 1 */
}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	24005a2c 	.word	0x24005a2c

080014e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80014ec:	4802      	ldr	r0, [pc, #8]	@ (80014f8 <USART2_IRQHandler+0x10>)
 80014ee:	f006 fc87 	bl	8007e00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	24005998 	.word	0x24005998

080014fc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
  SCB->VTOR = INTVECT_START;
 8001500:	4b07      	ldr	r3, [pc, #28]	@ (8001520 <SystemInit+0x24>)
 8001502:	4a08      	ldr	r2, [pc, #32]	@ (8001524 <SystemInit+0x28>)
 8001504:	609a      	str	r2, [r3, #8]

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001506:	4b06      	ldr	r3, [pc, #24]	@ (8001520 <SystemInit+0x24>)
 8001508:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800150c:	4a04      	ldr	r2, [pc, #16]	@ (8001520 <SystemInit+0x24>)
 800150e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001512:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001516:	bf00      	nop
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr
 8001520:	e000ed00 	.word	0xe000ed00
 8001524:	08000000 	.word	0x08000000

08001528 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001528:	480d      	ldr	r0, [pc, #52]	@ (8001560 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800152a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800152c:	f7ff ffe6 	bl	80014fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001530:	480c      	ldr	r0, [pc, #48]	@ (8001564 <LoopForever+0x6>)
  ldr r1, =_edata
 8001532:	490d      	ldr	r1, [pc, #52]	@ (8001568 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001534:	4a0d      	ldr	r2, [pc, #52]	@ (800156c <LoopForever+0xe>)
  movs r3, #0
 8001536:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001538:	e002      	b.n	8001540 <LoopCopyDataInit>

0800153a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800153a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800153c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800153e:	3304      	adds	r3, #4

08001540 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001540:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001542:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001544:	d3f9      	bcc.n	800153a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001546:	4a0a      	ldr	r2, [pc, #40]	@ (8001570 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001548:	4c0a      	ldr	r4, [pc, #40]	@ (8001574 <LoopForever+0x16>)
  movs r3, #0
 800154a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800154c:	e001      	b.n	8001552 <LoopFillZerobss>

0800154e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800154e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001550:	3204      	adds	r2, #4

08001552 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001552:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001554:	d3fb      	bcc.n	800154e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001556:	f007 ffa7 	bl	80094a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800155a:	f7ff fa1f 	bl	800099c <main>

0800155e <LoopForever>:

LoopForever:
  b LoopForever
 800155e:	e7fe      	b.n	800155e <LoopForever>
  ldr   r0, =_estack
 8001560:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001564:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001568:	2400000c 	.word	0x2400000c
  ldr r2, =_sidata
 800156c:	08009564 	.word	0x08009564
  ldr r2, =_sbss
 8001570:	24003030 	.word	0x24003030
  ldr r4, =_ebss
 8001574:	240082b4 	.word	0x240082b4

08001578 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001578:	e7fe      	b.n	8001578 <ADC1_2_IRQHandler>

0800157a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	b082      	sub	sp, #8
 800157e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001580:	2300      	movs	r3, #0
 8001582:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001584:	2003      	movs	r0, #3
 8001586:	f001 fced 	bl	8002f64 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800158a:	200f      	movs	r0, #15
 800158c:	f000 f80e 	bl	80015ac <HAL_InitTick>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d002      	beq.n	800159c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	71fb      	strb	r3, [r7, #7]
 800159a:	e001      	b.n	80015a0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800159c:	f7ff fd56 	bl	800104c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80015a0:	79fb      	ldrb	r3, [r7, #7]
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
	...

080015ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80015b4:	2300      	movs	r3, #0
 80015b6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80015b8:	4b17      	ldr	r3, [pc, #92]	@ (8001618 <HAL_InitTick+0x6c>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d023      	beq.n	8001608 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80015c0:	4b16      	ldr	r3, [pc, #88]	@ (800161c <HAL_InitTick+0x70>)
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	4b14      	ldr	r3, [pc, #80]	@ (8001618 <HAL_InitTick+0x6c>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	4619      	mov	r1, r3
 80015ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80015d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015d6:	4618      	mov	r0, r3
 80015d8:	f001 fcf7 	bl	8002fca <HAL_SYSTICK_Config>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d10f      	bne.n	8001602 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2b0f      	cmp	r3, #15
 80015e6:	d809      	bhi.n	80015fc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015e8:	2200      	movs	r2, #0
 80015ea:	6879      	ldr	r1, [r7, #4]
 80015ec:	f04f 30ff 	mov.w	r0, #4294967295
 80015f0:	f001 fcc3 	bl	8002f7a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015f4:	4a0a      	ldr	r2, [pc, #40]	@ (8001620 <HAL_InitTick+0x74>)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6013      	str	r3, [r2, #0]
 80015fa:	e007      	b.n	800160c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	73fb      	strb	r3, [r7, #15]
 8001600:	e004      	b.n	800160c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	73fb      	strb	r3, [r7, #15]
 8001606:	e001      	b.n	800160c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800160c:	7bfb      	ldrb	r3, [r7, #15]
}
 800160e:	4618      	mov	r0, r3
 8001610:	3710      	adds	r7, #16
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	24000008 	.word	0x24000008
 800161c:	24000000 	.word	0x24000000
 8001620:	24000004 	.word	0x24000004

08001624 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001628:	4b06      	ldr	r3, [pc, #24]	@ (8001644 <HAL_IncTick+0x20>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	461a      	mov	r2, r3
 800162e:	4b06      	ldr	r3, [pc, #24]	@ (8001648 <HAL_IncTick+0x24>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4413      	add	r3, r2
 8001634:	4a04      	ldr	r2, [pc, #16]	@ (8001648 <HAL_IncTick+0x24>)
 8001636:	6013      	str	r3, [r2, #0]
}
 8001638:	bf00      	nop
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	24000008 	.word	0x24000008
 8001648:	240082b0 	.word	0x240082b0

0800164c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  return uwTick;
 8001650:	4b03      	ldr	r3, [pc, #12]	@ (8001660 <HAL_GetTick+0x14>)
 8001652:	681b      	ldr	r3, [r3, #0]
}
 8001654:	4618      	mov	r0, r3
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	240082b0 	.word	0x240082b0

08001664 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	431a      	orrs	r2, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	609a      	str	r2, [r3, #8]
}
 800167e:	bf00      	nop
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr

0800168a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800168a:	b480      	push	{r7}
 800168c:	b083      	sub	sp, #12
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
 8001692:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	431a      	orrs	r2, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	609a      	str	r2, [r3, #8]
}
 80016a4:	bf00      	nop
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <LL_ADC_SetPathInternalChAdd>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VDDCORE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetPathInternalChAdd(ADC_TypeDef *ADCx, uint32_t PathInternal)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	6039      	str	r1, [r7, #0]
  SET_BIT(ADCx->OR, PathInternal);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	431a      	orrs	r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 80016e6:	bf00      	nop
 80016e8:	370c      	adds	r7, #12
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
	...

080016f4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels: 6.5 (sampling) + 12.5 (conversion 12b) = 19 ADC clock cycles (fADC)
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b087      	sub	sp, #28
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	60b9      	str	r1, [r7, #8]
 80016fe:	607a      	str	r2, [r7, #4]
 8001700:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	3360      	adds	r3, #96	@ 0x60
 8001706:	461a      	mov	r2, r3
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	4413      	add	r3, r2
 800170e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	4b08      	ldr	r3, [pc, #32]	@ (8001738 <LL_ADC_SetOffset+0x44>)
 8001716:	4013      	ands	r3, r2
 8001718:	687a      	ldr	r2, [r7, #4]
 800171a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800171e:	683a      	ldr	r2, [r7, #0]
 8001720:	430a      	orrs	r2, r1
 8001722:	4313      	orrs	r3, r2
 8001724:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800172c:	bf00      	nop
 800172e:	371c      	adds	r7, #28
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr
 8001738:	03fff000 	.word	0x03fff000

0800173c <LL_ADC_GetOffsetChannel>:
  *         (3) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	3360      	adds	r3, #96	@ 0x60
 800174a:	461a      	mov	r2, r3
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	4413      	add	r3, r2
 8001752:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800175c:	4618      	mov	r0, r3
 800175e:	3714      	adds	r7, #20
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001768:	b480      	push	{r7}
 800176a:	b087      	sub	sp, #28
 800176c:	af00      	add	r7, sp, #0
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	60b9      	str	r1, [r7, #8]
 8001772:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	3360      	adds	r3, #96	@ 0x60
 8001778:	461a      	mov	r2, r3
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	4413      	add	r3, r2
 8001780:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	431a      	orrs	r2, r3
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001792:	bf00      	nop
 8001794:	371c      	adds	r7, #28
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr

0800179e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800179e:	b480      	push	{r7}
 80017a0:	b087      	sub	sp, #28
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	60f8      	str	r0, [r7, #12]
 80017a6:	60b9      	str	r1, [r7, #8]
 80017a8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	3360      	adds	r3, #96	@ 0x60
 80017ae:	461a      	mov	r2, r3
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	4413      	add	r3, r2
 80017b6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	431a      	orrs	r2, r3
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80017c8:	bf00      	nop
 80017ca:	371c      	adds	r7, #28
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b087      	sub	sp, #28
 80017d8:	af00      	add	r7, sp, #0
 80017da:	60f8      	str	r0, [r7, #12]
 80017dc:	60b9      	str	r1, [r7, #8]
 80017de:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	3360      	adds	r3, #96	@ 0x60
 80017e4:	461a      	mov	r2, r3
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	4413      	add	r3, r2
 80017ec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	431a      	orrs	r2, r3
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80017fe:	bf00      	nop
 8001800:	371c      	adds	r7, #28
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr

0800180a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800180a:	b480      	push	{r7}
 800180c:	b083      	sub	sp, #12
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
 8001812:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	695b      	ldr	r3, [r3, #20]
 8001818:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	431a      	orrs	r2, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	615a      	str	r2, [r3, #20]
}
 8001824:	bf00      	nop
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001840:	2b00      	cmp	r3, #0
 8001842:	d101      	bne.n	8001848 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001844:	2301      	movs	r3, #1
 8001846:	e000      	b.n	800184a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001848:	2300      	movs	r3, #0
}
 800184a:	4618      	mov	r0, r3
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr

08001856 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7RS, fast channel allows: 2.5 (sampling) + 12.5 (conversion 12b) = 15 ADC clock cycles (fADC)
  *             Other channels are slow channels: 6.5 (sampling) + 12.5 (conversion 12b) = 19 ADC clock cycles (fADC)
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001856:	b480      	push	{r7}
 8001858:	b087      	sub	sp, #28
 800185a:	af00      	add	r7, sp, #0
 800185c:	60f8      	str	r0, [r7, #12]
 800185e:	60b9      	str	r1, [r7, #8]
 8001860:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	3330      	adds	r3, #48	@ 0x30
 8001866:	461a      	mov	r2, r3
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	0a1b      	lsrs	r3, r3, #8
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	f003 030c 	and.w	r3, r3, #12
 8001872:	4413      	add	r3, r2
 8001874:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	f003 031f 	and.w	r3, r3, #31
 8001880:	211f      	movs	r1, #31
 8001882:	fa01 f303 	lsl.w	r3, r1, r3
 8001886:	43db      	mvns	r3, r3
 8001888:	401a      	ands	r2, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	0e9b      	lsrs	r3, r3, #26
 800188e:	f003 011f 	and.w	r1, r3, #31
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	f003 031f 	and.w	r3, r3, #31
 8001898:	fa01 f303 	lsl.w	r3, r1, r3
 800189c:	431a      	orrs	r2, r3
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80018a2:	bf00      	nop
 80018a4:	371c      	adds	r7, #28
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr

080018ae <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80018ae:	b480      	push	{r7}
 80018b0:	b087      	sub	sp, #28
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	60f8      	str	r0, [r7, #12]
 80018b6:	60b9      	str	r1, [r7, #8]
 80018b8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	3314      	adds	r3, #20
 80018be:	461a      	mov	r2, r3
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	0e5b      	lsrs	r3, r3, #25
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	f003 0304 	and.w	r3, r3, #4
 80018ca:	4413      	add	r3, r2
 80018cc:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	0d1b      	lsrs	r3, r3, #20
 80018d6:	f003 031f 	and.w	r3, r3, #31
 80018da:	2107      	movs	r1, #7
 80018dc:	fa01 f303 	lsl.w	r3, r1, r3
 80018e0:	43db      	mvns	r3, r3
 80018e2:	401a      	ands	r2, r3
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	0d1b      	lsrs	r3, r3, #20
 80018e8:	f003 031f 	and.w	r3, r3, #31
 80018ec:	6879      	ldr	r1, [r7, #4]
 80018ee:	fa01 f303 	lsl.w	r3, r1, r3
 80018f2:	431a      	orrs	r2, r3
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80018f8:	bf00      	nop
 80018fa:	371c      	adds	r7, #28
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	60b9      	str	r1, [r7, #8]
 800190e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800191c:	43db      	mvns	r3, r3
 800191e:	401a      	ands	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f003 0318 	and.w	r3, r3, #24
 8001926:	4908      	ldr	r1, [pc, #32]	@ (8001948 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001928:	40d9      	lsrs	r1, r3
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	400b      	ands	r3, r1
 800192e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001932:	431a      	orrs	r2, r3
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800193a:	bf00      	nop
 800193c:	3714      	adds	r7, #20
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	0007ffff 	.word	0x0007ffff

0800194c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	f003 031f 	and.w	r3, r3, #31
}
 800195c:	4618      	mov	r0, r3
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	689a      	ldr	r2, [r3, #8]
 8001974:	4b04      	ldr	r3, [pc, #16]	@ (8001988 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001976:	4013      	ands	r3, r2
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	6093      	str	r3, [r2, #8]
}
 800197c:	bf00      	nop
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr
 8001988:	5fffffc0 	.word	0x5fffffc0

0800198c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800199c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80019a0:	d101      	bne.n	80019a6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80019a2:	2301      	movs	r3, #1
 80019a4:	e000      	b.n	80019a8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80019a6:	2300      	movs	r3, #0
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	689a      	ldr	r2, [r3, #8]
 80019c0:	4b05      	ldr	r3, [pc, #20]	@ (80019d8 <LL_ADC_EnableInternalRegulator+0x24>)
 80019c2:	4013      	ands	r3, r2
 80019c4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80019cc:	bf00      	nop
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr
 80019d8:	6fffffc0 	.word	0x6fffffc0

080019dc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80019f0:	d101      	bne.n	80019f6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80019f2:	2301      	movs	r3, #1
 80019f4:	e000      	b.n	80019f8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80019f6:	2300      	movs	r3, #0
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	689a      	ldr	r2, [r3, #8]
 8001a10:	4b05      	ldr	r3, [pc, #20]	@ (8001a28 <LL_ADC_Enable+0x24>)
 8001a12:	4013      	ands	r3, r2
 8001a14:	f043 0201 	orr.w	r2, r3, #1
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001a1c:	bf00      	nop
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr
 8001a28:	7fffffc0 	.word	0x7fffffc0

08001a2c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	689a      	ldr	r2, [r3, #8]
 8001a38:	4b05      	ldr	r3, [pc, #20]	@ (8001a50 <LL_ADC_Disable+0x24>)
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	f043 0202 	orr.w	r2, r3, #2
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001a44:	bf00      	nop
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr
 8001a50:	7fffffc0 	.word	0x7fffffc0

08001a54 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	f003 0301 	and.w	r3, r3, #1
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d101      	bne.n	8001a6c <LL_ADC_IsEnabled+0x18>
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e000      	b.n	8001a6e <LL_ADC_IsEnabled+0x1a>
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr

08001a7a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	b083      	sub	sp, #12
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	f003 0302 	and.w	r3, r3, #2
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d101      	bne.n	8001a92 <LL_ADC_IsDisableOngoing+0x18>
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e000      	b.n	8001a94 <LL_ADC_IsDisableOngoing+0x1a>
 8001a92:	2300      	movs	r3, #0
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	689a      	ldr	r2, [r3, #8]
 8001aac:	4b05      	ldr	r3, [pc, #20]	@ (8001ac4 <LL_ADC_REG_StartConversion+0x24>)
 8001aae:	4013      	ands	r3, r2
 8001ab0:	f043 0204 	orr.w	r2, r3, #4
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001ab8:	bf00      	nop
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr
 8001ac4:	7fffffc0 	.word	0x7fffffc0

08001ac8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f003 0304 	and.w	r3, r3, #4
 8001ad8:	2b04      	cmp	r3, #4
 8001ada:	d101      	bne.n	8001ae0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001adc:	2301      	movs	r3, #1
 8001ade:	e000      	b.n	8001ae2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr

08001aee <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001aee:	b480      	push	{r7}
 8001af0:	b083      	sub	sp, #12
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	f003 0308 	and.w	r3, r3, #8
 8001afe:	2b08      	cmp	r3, #8
 8001b00:	d101      	bne.n	8001b06 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001b02:	2301      	movs	r3, #1
 8001b04:	e000      	b.n	8001b08 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001b06:	2300      	movs	r3, #0
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b14:	b590      	push	{r4, r7, lr}
 8001b16:	b089      	sub	sp, #36	@ 0x24
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001b20:	2300      	movs	r3, #0
 8001b22:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d101      	bne.n	8001b2e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e130      	b.n	8001d90 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	691b      	ldr	r3, [r3, #16]
 8001b32:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d109      	bne.n	8001b50 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f7ff faa3 	bl	8001088 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2200      	movs	r2, #0
 8001b46:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff ff19 	bl	800198c <LL_ADC_IsDeepPowerDownEnabled>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d004      	beq.n	8001b6a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff feff 	bl	8001968 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7ff ff34 	bl	80019dc <LL_ADC_IsInternalRegulatorEnabled>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d115      	bne.n	8001ba6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7ff ff18 	bl	80019b4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b84:	4b84      	ldr	r3, [pc, #528]	@ (8001d98 <HAL_ADC_Init+0x284>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	099b      	lsrs	r3, r3, #6
 8001b8a:	4a84      	ldr	r2, [pc, #528]	@ (8001d9c <HAL_ADC_Init+0x288>)
 8001b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b90:	099b      	lsrs	r3, r3, #6
 8001b92:	3301      	adds	r3, #1
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001b98:	e002      	b.n	8001ba0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	3b01      	subs	r3, #1
 8001b9e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d1f9      	bne.n	8001b9a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7ff ff16 	bl	80019dc <LL_ADC_IsInternalRegulatorEnabled>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d10d      	bne.n	8001bd2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bba:	f043 0210 	orr.w	r2, r3, #16
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bc6:	f043 0201 	orr.w	r2, r3, #1
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7ff ff76 	bl	8001ac8 <LL_ADC_REG_IsConversionOngoing>
 8001bdc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001be2:	f003 0310 	and.w	r3, r3, #16
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	f040 80c9 	bne.w	8001d7e <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	f040 80c5 	bne.w	8001d7e <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bf8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001bfc:	f043 0202 	orr.w	r2, r3, #2
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff ff23 	bl	8001a54 <LL_ADC_IsEnabled>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d110      	bne.n	8001c36 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001c14:	4862      	ldr	r0, [pc, #392]	@ (8001da0 <HAL_ADC_Init+0x28c>)
 8001c16:	f7ff ff1d 	bl	8001a54 <LL_ADC_IsEnabled>
 8001c1a:	4604      	mov	r4, r0
 8001c1c:	4861      	ldr	r0, [pc, #388]	@ (8001da4 <HAL_ADC_Init+0x290>)
 8001c1e:	f7ff ff19 	bl	8001a54 <LL_ADC_IsEnabled>
 8001c22:	4603      	mov	r3, r0
 8001c24:	4323      	orrs	r3, r4
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d105      	bne.n	8001c36 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	4619      	mov	r1, r3
 8001c30:	485d      	ldr	r0, [pc, #372]	@ (8001da8 <HAL_ADC_Init+0x294>)
 8001c32:	f7ff fd17 	bl	8001664 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	7e5b      	ldrb	r3, [r3, #25]
 8001c3a:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c40:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001c46:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001c4c:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c54:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c56:	4313      	orrs	r3, r2
 8001c58:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d106      	bne.n	8001c72 <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c68:	3b01      	subs	r3, #1
 8001c6a:	045b      	lsls	r3, r3, #17
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d009      	beq.n	8001c8e <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c7e:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c86:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	68da      	ldr	r2, [r3, #12]
 8001c94:	4b45      	ldr	r3, [pc, #276]	@ (8001dac <HAL_ADC_Init+0x298>)
 8001c96:	4013      	ands	r3, r2
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	6812      	ldr	r2, [r2, #0]
 8001c9c:	69b9      	ldr	r1, [r7, #24]
 8001c9e:	430b      	orrs	r3, r1
 8001ca0:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	691b      	ldr	r3, [r3, #16]
 8001ca8:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	611a      	str	r2, [r3, #16]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff ff16 	bl	8001aee <LL_ADC_INJ_IsConversionOngoing>
 8001cc2:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d137      	bne.n	8001d3a <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d134      	bne.n	8001d3a <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	7e1b      	ldrb	r3, [r3, #24]
 8001cd4:	039a      	lsls	r2, r3, #14
                   hadc->Init.ConversionDataManagement);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      tmp_cfgr = (
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	68da      	ldr	r2, [r3, #12]
 8001ce4:	4b32      	ldr	r3, [pc, #200]	@ (8001db0 <HAL_ADC_Init+0x29c>)
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	6812      	ldr	r2, [r2, #0]
 8001cec:	69b9      	ldr	r1, [r7, #24]
 8001cee:	430b      	orrs	r3, r1
 8001cf0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d116      	bne.n	8001d2a <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	691a      	ldr	r2, [r3, #16]
 8001d02:	4b2c      	ldr	r3, [pc, #176]	@ (8001db4 <HAL_ADC_Init+0x2a0>)
 8001d04:	4013      	ands	r3, r2
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001d0e:	4311      	orrs	r1, r2
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001d14:	4311      	orrs	r1, r2
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001d1a:	430a      	orrs	r2, r1
 8001d1c:	431a      	orrs	r2, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f042 0201 	orr.w	r2, r2, #1
 8001d26:	611a      	str	r2, [r3, #16]
 8001d28:	e007      	b.n	8001d3a <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	691a      	ldr	r2, [r3, #16]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f022 0201 	bic.w	r2, r2, #1
 8001d38:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d10c      	bne.n	8001d5c <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d48:	f023 010f 	bic.w	r1, r3, #15
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	69db      	ldr	r3, [r3, #28]
 8001d50:	1e5a      	subs	r2, r3, #1
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	430a      	orrs	r2, r1
 8001d58:	631a      	str	r2, [r3, #48]	@ 0x30
 8001d5a:	e007      	b.n	8001d6c <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f022 020f 	bic.w	r2, r2, #15
 8001d6a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d70:	f023 0303 	bic.w	r3, r3, #3
 8001d74:	f043 0201 	orr.w	r2, r3, #1
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	659a      	str	r2, [r3, #88]	@ 0x58
 8001d7c:	e007      	b.n	8001d8e <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d82:	f043 0210 	orr.w	r2, r3, #16
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d8e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3724      	adds	r7, #36	@ 0x24
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd90      	pop	{r4, r7, pc}
 8001d98:	24000000 	.word	0x24000000
 8001d9c:	053e2d63 	.word	0x053e2d63
 8001da0:	40022000 	.word	0x40022000
 8001da4:	40022100 	.word	0x40022100
 8001da8:	40022300 	.word	0x40022300
 8001dac:	fff04007 	.word	0xfff04007
 8001db0:	ffffbff9 	.word	0xffffbff9
 8001db4:	fffff803 	.word	0xfffff803

08001db8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b0a2      	sub	sp, #136	@ 0x88
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001dc4:	488a      	ldr	r0, [pc, #552]	@ (8001ff0 <HAL_ADC_Start_DMA+0x238>)
 8001dc6:	f7ff fdc1 	bl	800194c <LL_ADC_GetMultimode>
 8001dca:	67f8      	str	r0, [r7, #124]	@ 0x7c

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7ff fe79 	bl	8001ac8 <LL_ADC_REG_IsConversionOngoing>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	f040 80ff 	bne.w	8001fdc <HAL_ADC_Start_DMA+0x224>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d101      	bne.n	8001dec <HAL_ADC_Start_DMA+0x34>
 8001de8:	2302      	movs	r3, #2
 8001dea:	e0fc      	b.n	8001fe6 <HAL_ADC_Start_DMA+0x22e>
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2201      	movs	r2, #1
 8001df0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001df4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d006      	beq.n	8001e08 <HAL_ADC_Start_DMA+0x50>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001dfa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001dfc:	2b05      	cmp	r3, #5
 8001dfe:	d003      	beq.n	8001e08 <HAL_ADC_Start_DMA+0x50>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001e00:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001e02:	2b09      	cmp	r3, #9
 8001e04:	f040 80e2 	bne.w	8001fcc <HAL_ADC_Start_DMA+0x214>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001e08:	68f8      	ldr	r0, [r7, #12]
 8001e0a:	f000 fd07 	bl	800281c <ADC_Enable>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001e14:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	f040 80d2 	bne.w	8001fc2 <HAL_ADC_Start_DMA+0x20a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001e22:	4b74      	ldr	r3, [pc, #464]	@ (8001ff4 <HAL_ADC_Start_DMA+0x23c>)
 8001e24:	4013      	ands	r3, r2
 8001e26:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	659a      	str	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a71      	ldr	r2, [pc, #452]	@ (8001ff8 <HAL_ADC_Start_DMA+0x240>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d002      	beq.n	8001e3e <HAL_ADC_Start_DMA+0x86>
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	e000      	b.n	8001e40 <HAL_ADC_Start_DMA+0x88>
 8001e3e:	4b6f      	ldr	r3, [pc, #444]	@ (8001ffc <HAL_ADC_Start_DMA+0x244>)
 8001e40:	68fa      	ldr	r2, [r7, #12]
 8001e42:	6812      	ldr	r2, [r2, #0]
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d002      	beq.n	8001e4e <HAL_ADC_Start_DMA+0x96>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e48:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d105      	bne.n	8001e5a <HAL_ADC_Start_DMA+0xa2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e52:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	659a      	str	r2, [r3, #88]	@ 0x58
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e5e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d006      	beq.n	8001e74 <HAL_ADC_Start_DMA+0xbc>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e6a:	f023 0206 	bic.w	r2, r3, #6
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001e72:	e002      	b.n	8001e7a <HAL_ADC_Start_DMA+0xc2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2200      	movs	r2, #0
 8001e78:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e7e:	4a60      	ldr	r2, [pc, #384]	@ (8002000 <HAL_ADC_Start_DMA+0x248>)
 8001e80:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e86:	4a5f      	ldr	r2, [pc, #380]	@ (8002004 <HAL_ADC_Start_DMA+0x24c>)
 8001e88:	665a      	str	r2, [r3, #100]	@ 0x64

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e8e:	4a5e      	ldr	r2, [pc, #376]	@ (8002008 <HAL_ADC_Start_DMA+0x250>)
 8001e90:	669a      	str	r2, [r3, #104]	@ 0x68
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	221c      	movs	r2, #28
 8001e98:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	685a      	ldr	r2, [r3, #4]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f042 0210 	orr.w	r2, r2, #16
 8001eb0:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	68da      	ldr	r2, [r3, #12]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f042 0201 	orr.w	r2, r2, #1
 8001ec0:	60da      	str	r2, [r3, #12]

        /* Check linkedlist mode */
        if ((hadc->DMA_Handle->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ec6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ec8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d04d      	beq.n	8001f6c <HAL_ADC_Start_DMA+0x1b4>
        {
          if ((hadc->DMA_Handle->LinkedListQueue != NULL) && (hadc->DMA_Handle->LinkedListQueue->Head != NULL))
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ed4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d046      	beq.n	8001f68 <HAL_ADC_Start_DMA+0x1b0>
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ede:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d040      	beq.n	8001f68 <HAL_ADC_Start_DMA+0x1b0>
          {
            /* Length should be converted to number of bytes */
            if (HAL_DMAEx_List_GetNodeConfig(&node_conf, hadc->DMA_Handle->LinkedListQueue->Head) != HAL_OK)
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001eea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	f107 0310 	add.w	r3, r7, #16
 8001ef2:	4611      	mov	r1, r2
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f002 f95f 	bl	80041b8 <HAL_DMAEx_List_GetNodeConfig>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <HAL_ADC_Start_DMA+0x14c>
            {
              return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e070      	b.n	8001fe6 <HAL_ADC_Start_DMA+0x22e>
            }

            /* Length should be converted to number of bytes */
            if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8001f04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d104      	bne.n	8001f14 <HAL_ADC_Start_DMA+0x15c>
            {
              /* Word -> Bytes */
              length_bytes = Length * 4U;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001f12:	e00a      	b.n	8001f2a <HAL_ADC_Start_DMA+0x172>
            }
            else if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 8001f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d104      	bne.n	8001f24 <HAL_ADC_Start_DMA+0x16c>
            {
              /* Halfword -> Bytes */
              length_bytes = Length * 2U;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001f22:	e002      	b.n	8001f2a <HAL_ADC_Start_DMA+0x172>
            }
            else /* Bytes */
            {
              /* Same size already expressed in Bytes */
              length_bytes = Length;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
            }

            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (uint32_t)length_bytes;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001f36:	609a      	str	r2, [r3, #8]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
                (uint32_t)&hadc->Instance->DR;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f103 0240 	add.w	r2, r3, #64	@ 0x40
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	60da      	str	r2, [r3, #12]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)pData;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	68ba      	ldr	r2, [r7, #8]
 8001f54:	611a      	str	r2, [r3, #16]
            tmp_hal_status = HAL_DMAEx_List_Start_IT(hadc->DMA_Handle);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f002 f880 	bl	8004060 <HAL_DMAEx_List_Start_IT>
 8001f60:	4603      	mov	r3, r0
 8001f62:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8001f66:	e026      	b.n	8001fb6 <HAL_ADC_Start_DMA+0x1fe>
          }
          else
          {
            return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e03c      	b.n	8001fe6 <HAL_ADC_Start_DMA+0x22e>
          }
        }
        else
        {
          /* Length should be converted to number of bytes */
          if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f70:	699b      	ldr	r3, [r3, #24]
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d104      	bne.n	8001f80 <HAL_ADC_Start_DMA+0x1c8>
          {
            /* Word -> Bytes */
            length_bytes = Length * 4U;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001f7e:	e00c      	b.n	8001f9a <HAL_ADC_Start_DMA+0x1e2>
          }
          else if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f84:	699b      	ldr	r3, [r3, #24]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d104      	bne.n	8001f94 <HAL_ADC_Start_DMA+0x1dc>
          {
            /* Halfword -> Bytes */
            length_bytes = Length * 2U;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001f92:	e002      	b.n	8001f9a <HAL_ADC_Start_DMA+0x1e2>
          }
          else /* Bytes */
          {
            /* Same size already expressed in Bytes */
            length_bytes = Length;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
          }

          /* Start the DMA channel */
          tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData,        \
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	3340      	adds	r3, #64	@ 0x40
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	68ba      	ldr	r2, [r7, #8]
 8001fa8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001fac:	f001 f9e0 	bl	8003370 <HAL_DMA_Start_IT>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7ff fd70 	bl	8001aa0 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001fc0:	e00f      	b.n	8001fe2 <HAL_ADC_Start_DMA+0x22a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      if (tmp_hal_status == HAL_OK)
 8001fca:	e00a      	b.n	8001fe2 <HAL_ADC_Start_DMA+0x22a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8001fda:	e002      	b.n	8001fe2 <HAL_ADC_Start_DMA+0x22a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001fdc:	2302      	movs	r3, #2
 8001fde:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
  }

  /* Return function status */
  return tmp_hal_status;
 8001fe2:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3788      	adds	r7, #136	@ 0x88
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	40022300 	.word	0x40022300
 8001ff4:	fffff0fe 	.word	0xfffff0fe
 8001ff8:	40022100 	.word	0x40022100
 8001ffc:	40022000 	.word	0x40022000
 8002000:	080029e7 	.word	0x080029e7
 8002004:	08002abf 	.word	0x08002abf
 8002008:	08002adb 	.word	0x08002adb

0800200c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002014:	bf00      	nop
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b0b6      	sub	sp, #216	@ 0xd8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800202a:	2300      	movs	r3, #0
 800202c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002030:	2300      	movs	r3, #0
 8002032:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800203a:	2b01      	cmp	r3, #1
 800203c:	d101      	bne.n	8002042 <HAL_ADC_ConfigChannel+0x22>
 800203e:	2302      	movs	r3, #2
 8002040:	e3d4      	b.n	80027ec <HAL_ADC_ConfigChannel+0x7cc>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2201      	movs	r2, #1
 8002046:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4618      	mov	r0, r3
 8002050:	f7ff fd3a 	bl	8001ac8 <LL_ADC_REG_IsConversionOngoing>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	f040 83b9 	bne.w	80027ce <HAL_ADC_ConfigChannel+0x7ae>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6818      	ldr	r0, [r3, #0]
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	6859      	ldr	r1, [r3, #4]
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	461a      	mov	r2, r3
 800206a:	f7ff fbf4 	bl	8001856 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4618      	mov	r0, r3
 8002074:	f7ff fd28 	bl	8001ac8 <LL_ADC_REG_IsConversionOngoing>
 8002078:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4618      	mov	r0, r3
 8002082:	f7ff fd34 	bl	8001aee <LL_ADC_INJ_IsConversionOngoing>
 8002086:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800208a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800208e:	2b00      	cmp	r3, #0
 8002090:	f040 81d9 	bne.w	8002446 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002094:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002098:	2b00      	cmp	r3, #0
 800209a:	f040 81d4 	bne.w	8002446 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80020a6:	d10f      	bne.n	80020c8 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6818      	ldr	r0, [r3, #0]
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2200      	movs	r2, #0
 80020b2:	4619      	mov	r1, r3
 80020b4:	f7ff fbfb 	bl	80018ae <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7ff fba2 	bl	800180a <LL_ADC_SetSamplingTimeCommonConfig>
 80020c6:	e00e      	b.n	80020e6 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6818      	ldr	r0, [r3, #0]
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	6819      	ldr	r1, [r3, #0]
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	461a      	mov	r2, r3
 80020d6:	f7ff fbea 	bl	80018ae <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2100      	movs	r1, #0
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7ff fb92 	bl	800180a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	695a      	ldr	r2, [r3, #20]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	08db      	lsrs	r3, r3, #3
 80020f2:	f003 0303 	and.w	r3, r3, #3
 80020f6:	005b      	lsls	r3, r3, #1
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	691b      	ldr	r3, [r3, #16]
 8002104:	2b04      	cmp	r3, #4
 8002106:	d022      	beq.n	800214e <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6818      	ldr	r0, [r3, #0]
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	6919      	ldr	r1, [r3, #16]
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002118:	f7ff faec 	bl	80016f4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6818      	ldr	r0, [r3, #0]
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	6919      	ldr	r1, [r3, #16]
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	461a      	mov	r2, r3
 800212a:	f7ff fb38 	bl	800179e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6818      	ldr	r0, [r3, #0]
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800213a:	2b01      	cmp	r3, #1
 800213c:	d102      	bne.n	8002144 <HAL_ADC_ConfigChannel+0x124>
 800213e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002142:	e000      	b.n	8002146 <HAL_ADC_ConfigChannel+0x126>
 8002144:	2300      	movs	r3, #0
 8002146:	461a      	mov	r2, r3
 8002148:	f7ff fb44 	bl	80017d4 <LL_ADC_SetOffsetSaturation>
 800214c:	e17b      	b.n	8002446 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2100      	movs	r1, #0
 8002154:	4618      	mov	r0, r3
 8002156:	f7ff faf1 	bl	800173c <LL_ADC_GetOffsetChannel>
 800215a:	4603      	mov	r3, r0
 800215c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002160:	2b00      	cmp	r3, #0
 8002162:	d10a      	bne.n	800217a <HAL_ADC_ConfigChannel+0x15a>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2100      	movs	r1, #0
 800216a:	4618      	mov	r0, r3
 800216c:	f7ff fae6 	bl	800173c <LL_ADC_GetOffsetChannel>
 8002170:	4603      	mov	r3, r0
 8002172:	0e9b      	lsrs	r3, r3, #26
 8002174:	f003 021f 	and.w	r2, r3, #31
 8002178:	e01e      	b.n	80021b8 <HAL_ADC_ConfigChannel+0x198>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	2100      	movs	r1, #0
 8002180:	4618      	mov	r0, r3
 8002182:	f7ff fadb 	bl	800173c <LL_ADC_GetOffsetChannel>
 8002186:	4603      	mov	r3, r0
 8002188:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800218c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002190:	fa93 f3a3 	rbit	r3, r3
 8002194:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  return result;
 8002198:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800219c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  if (value == 0U)
 80021a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d101      	bne.n	80021ac <HAL_ADC_ConfigChannel+0x18c>
    return 32U;
 80021a8:	2320      	movs	r3, #32
 80021aa:	e004      	b.n	80021b6 <HAL_ADC_ConfigChannel+0x196>
  return __builtin_clz(value);
 80021ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80021b0:	fab3 f383 	clz	r3, r3
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d105      	bne.n	80021d0 <HAL_ADC_ConfigChannel+0x1b0>
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	0e9b      	lsrs	r3, r3, #26
 80021ca:	f003 031f 	and.w	r3, r3, #31
 80021ce:	e018      	b.n	8002202 <HAL_ADC_ConfigChannel+0x1e2>
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80021dc:	fa93 f3a3 	rbit	r3, r3
 80021e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80021e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80021e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80021ec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d101      	bne.n	80021f8 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80021f4:	2320      	movs	r3, #32
 80021f6:	e004      	b.n	8002202 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80021f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80021fc:	fab3 f383 	clz	r3, r3
 8002200:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002202:	429a      	cmp	r2, r3
 8002204:	d106      	bne.n	8002214 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2200      	movs	r2, #0
 800220c:	2100      	movs	r1, #0
 800220e:	4618      	mov	r0, r3
 8002210:	f7ff faaa 	bl	8001768 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2101      	movs	r1, #1
 800221a:	4618      	mov	r0, r3
 800221c:	f7ff fa8e 	bl	800173c <LL_ADC_GetOffsetChannel>
 8002220:	4603      	mov	r3, r0
 8002222:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002226:	2b00      	cmp	r3, #0
 8002228:	d10a      	bne.n	8002240 <HAL_ADC_ConfigChannel+0x220>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2101      	movs	r1, #1
 8002230:	4618      	mov	r0, r3
 8002232:	f7ff fa83 	bl	800173c <LL_ADC_GetOffsetChannel>
 8002236:	4603      	mov	r3, r0
 8002238:	0e9b      	lsrs	r3, r3, #26
 800223a:	f003 021f 	and.w	r2, r3, #31
 800223e:	e01e      	b.n	800227e <HAL_ADC_ConfigChannel+0x25e>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2101      	movs	r1, #1
 8002246:	4618      	mov	r0, r3
 8002248:	f7ff fa78 	bl	800173c <LL_ADC_GetOffsetChannel>
 800224c:	4603      	mov	r3, r0
 800224e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002252:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002256:	fa93 f3a3 	rbit	r3, r3
 800225a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800225e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002262:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002266:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800226a:	2b00      	cmp	r3, #0
 800226c:	d101      	bne.n	8002272 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 800226e:	2320      	movs	r3, #32
 8002270:	e004      	b.n	800227c <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8002272:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002276:	fab3 f383 	clz	r3, r3
 800227a:	b2db      	uxtb	r3, r3
 800227c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002286:	2b00      	cmp	r3, #0
 8002288:	d105      	bne.n	8002296 <HAL_ADC_ConfigChannel+0x276>
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	0e9b      	lsrs	r3, r3, #26
 8002290:	f003 031f 	and.w	r3, r3, #31
 8002294:	e018      	b.n	80022c8 <HAL_ADC_ConfigChannel+0x2a8>
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800229e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80022a2:	fa93 f3a3 	rbit	r3, r3
 80022a6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80022aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80022ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80022b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d101      	bne.n	80022be <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80022ba:	2320      	movs	r3, #32
 80022bc:	e004      	b.n	80022c8 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80022be:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80022c2:	fab3 f383 	clz	r3, r3
 80022c6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d106      	bne.n	80022da <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2200      	movs	r2, #0
 80022d2:	2101      	movs	r1, #1
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7ff fa47 	bl	8001768 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2102      	movs	r1, #2
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7ff fa2b 	bl	800173c <LL_ADC_GetOffsetChannel>
 80022e6:	4603      	mov	r3, r0
 80022e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d10a      	bne.n	8002306 <HAL_ADC_ConfigChannel+0x2e6>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2102      	movs	r1, #2
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7ff fa20 	bl	800173c <LL_ADC_GetOffsetChannel>
 80022fc:	4603      	mov	r3, r0
 80022fe:	0e9b      	lsrs	r3, r3, #26
 8002300:	f003 021f 	and.w	r2, r3, #31
 8002304:	e01e      	b.n	8002344 <HAL_ADC_ConfigChannel+0x324>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	2102      	movs	r1, #2
 800230c:	4618      	mov	r0, r3
 800230e:	f7ff fa15 	bl	800173c <LL_ADC_GetOffsetChannel>
 8002312:	4603      	mov	r3, r0
 8002314:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002318:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800231c:	fa93 f3a3 	rbit	r3, r3
 8002320:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002324:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002328:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800232c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002330:	2b00      	cmp	r3, #0
 8002332:	d101      	bne.n	8002338 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002334:	2320      	movs	r3, #32
 8002336:	e004      	b.n	8002342 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8002338:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800233c:	fab3 f383 	clz	r3, r3
 8002340:	b2db      	uxtb	r3, r3
 8002342:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800234c:	2b00      	cmp	r3, #0
 800234e:	d105      	bne.n	800235c <HAL_ADC_ConfigChannel+0x33c>
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	0e9b      	lsrs	r3, r3, #26
 8002356:	f003 031f 	and.w	r3, r3, #31
 800235a:	e016      	b.n	800238a <HAL_ADC_ConfigChannel+0x36a>
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002364:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002368:	fa93 f3a3 	rbit	r3, r3
 800236c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800236e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002370:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002374:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002378:	2b00      	cmp	r3, #0
 800237a:	d101      	bne.n	8002380 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 800237c:	2320      	movs	r3, #32
 800237e:	e004      	b.n	800238a <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002380:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002384:	fab3 f383 	clz	r3, r3
 8002388:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800238a:	429a      	cmp	r2, r3
 800238c:	d106      	bne.n	800239c <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2200      	movs	r2, #0
 8002394:	2102      	movs	r1, #2
 8002396:	4618      	mov	r0, r3
 8002398:	f7ff f9e6 	bl	8001768 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2103      	movs	r1, #3
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7ff f9ca 	bl	800173c <LL_ADC_GetOffsetChannel>
 80023a8:	4603      	mov	r3, r0
 80023aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d10a      	bne.n	80023c8 <HAL_ADC_ConfigChannel+0x3a8>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2103      	movs	r1, #3
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7ff f9bf 	bl	800173c <LL_ADC_GetOffsetChannel>
 80023be:	4603      	mov	r3, r0
 80023c0:	0e9b      	lsrs	r3, r3, #26
 80023c2:	f003 021f 	and.w	r2, r3, #31
 80023c6:	e017      	b.n	80023f8 <HAL_ADC_ConfigChannel+0x3d8>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2103      	movs	r1, #3
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7ff f9b4 	bl	800173c <LL_ADC_GetOffsetChannel>
 80023d4:	4603      	mov	r3, r0
 80023d6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80023da:	fa93 f3a3 	rbit	r3, r3
 80023de:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80023e0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80023e2:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80023e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d101      	bne.n	80023ee <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80023ea:	2320      	movs	r3, #32
 80023ec:	e003      	b.n	80023f6 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80023ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80023f0:	fab3 f383 	clz	r3, r3
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002400:	2b00      	cmp	r3, #0
 8002402:	d105      	bne.n	8002410 <HAL_ADC_ConfigChannel+0x3f0>
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	0e9b      	lsrs	r3, r3, #26
 800240a:	f003 031f 	and.w	r3, r3, #31
 800240e:	e011      	b.n	8002434 <HAL_ADC_ConfigChannel+0x414>
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002416:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002418:	fa93 f3a3 	rbit	r3, r3
 800241c:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800241e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002420:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002422:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002424:	2b00      	cmp	r3, #0
 8002426:	d101      	bne.n	800242c <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002428:	2320      	movs	r3, #32
 800242a:	e003      	b.n	8002434 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 800242c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800242e:	fab3 f383 	clz	r3, r3
 8002432:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002434:	429a      	cmp	r2, r3
 8002436:	d106      	bne.n	8002446 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2200      	movs	r2, #0
 800243e:	2103      	movs	r1, #3
 8002440:	4618      	mov	r0, r3
 8002442:	f7ff f991 	bl	8001768 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4618      	mov	r0, r3
 800244c:	f7ff fb02 	bl	8001a54 <LL_ADC_IsEnabled>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	f040 8140 	bne.w	80026d8 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6818      	ldr	r0, [r3, #0]
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	6819      	ldr	r1, [r3, #0]
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	461a      	mov	r2, r3
 8002466:	f7ff fa4d 	bl	8001904 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	4a8f      	ldr	r2, [pc, #572]	@ (80026ac <HAL_ADC_ConfigChannel+0x68c>)
 8002470:	4293      	cmp	r3, r2
 8002472:	f040 8131 	bne.w	80026d8 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002482:	2b00      	cmp	r3, #0
 8002484:	d10b      	bne.n	800249e <HAL_ADC_ConfigChannel+0x47e>
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	0e9b      	lsrs	r3, r3, #26
 800248c:	3301      	adds	r3, #1
 800248e:	f003 031f 	and.w	r3, r3, #31
 8002492:	2b09      	cmp	r3, #9
 8002494:	bf94      	ite	ls
 8002496:	2301      	movls	r3, #1
 8002498:	2300      	movhi	r3, #0
 800249a:	b2db      	uxtb	r3, r3
 800249c:	e019      	b.n	80024d2 <HAL_ADC_ConfigChannel+0x4b2>
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80024a6:	fa93 f3a3 	rbit	r3, r3
 80024aa:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80024ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80024ae:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80024b0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d101      	bne.n	80024ba <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80024b6:	2320      	movs	r3, #32
 80024b8:	e003      	b.n	80024c2 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80024ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80024bc:	fab3 f383 	clz	r3, r3
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	3301      	adds	r3, #1
 80024c4:	f003 031f 	and.w	r3, r3, #31
 80024c8:	2b09      	cmp	r3, #9
 80024ca:	bf94      	ite	ls
 80024cc:	2301      	movls	r3, #1
 80024ce:	2300      	movhi	r3, #0
 80024d0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d079      	beq.n	80025ca <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d107      	bne.n	80024f2 <HAL_ADC_ConfigChannel+0x4d2>
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	0e9b      	lsrs	r3, r3, #26
 80024e8:	3301      	adds	r3, #1
 80024ea:	069b      	lsls	r3, r3, #26
 80024ec:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80024f0:	e015      	b.n	800251e <HAL_ADC_ConfigChannel+0x4fe>
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80024fa:	fa93 f3a3 	rbit	r3, r3
 80024fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002500:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002502:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002504:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002506:	2b00      	cmp	r3, #0
 8002508:	d101      	bne.n	800250e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800250a:	2320      	movs	r3, #32
 800250c:	e003      	b.n	8002516 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800250e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002510:	fab3 f383 	clz	r3, r3
 8002514:	b2db      	uxtb	r3, r3
 8002516:	3301      	adds	r3, #1
 8002518:	069b      	lsls	r3, r3, #26
 800251a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002526:	2b00      	cmp	r3, #0
 8002528:	d109      	bne.n	800253e <HAL_ADC_ConfigChannel+0x51e>
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	0e9b      	lsrs	r3, r3, #26
 8002530:	3301      	adds	r3, #1
 8002532:	f003 031f 	and.w	r3, r3, #31
 8002536:	2101      	movs	r1, #1
 8002538:	fa01 f303 	lsl.w	r3, r1, r3
 800253c:	e017      	b.n	800256e <HAL_ADC_ConfigChannel+0x54e>
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002544:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002546:	fa93 f3a3 	rbit	r3, r3
 800254a:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800254c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800254e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002550:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002552:	2b00      	cmp	r3, #0
 8002554:	d101      	bne.n	800255a <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8002556:	2320      	movs	r3, #32
 8002558:	e003      	b.n	8002562 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800255a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800255c:	fab3 f383 	clz	r3, r3
 8002560:	b2db      	uxtb	r3, r3
 8002562:	3301      	adds	r3, #1
 8002564:	f003 031f 	and.w	r3, r3, #31
 8002568:	2101      	movs	r1, #1
 800256a:	fa01 f303 	lsl.w	r3, r1, r3
 800256e:	ea42 0103 	orr.w	r1, r2, r3
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800257a:	2b00      	cmp	r3, #0
 800257c:	d10a      	bne.n	8002594 <HAL_ADC_ConfigChannel+0x574>
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	0e9b      	lsrs	r3, r3, #26
 8002584:	3301      	adds	r3, #1
 8002586:	f003 021f 	and.w	r2, r3, #31
 800258a:	4613      	mov	r3, r2
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	4413      	add	r3, r2
 8002590:	051b      	lsls	r3, r3, #20
 8002592:	e018      	b.n	80025c6 <HAL_ADC_ConfigChannel+0x5a6>
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800259c:	fa93 f3a3 	rbit	r3, r3
 80025a0:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80025a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80025a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d101      	bne.n	80025b0 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80025ac:	2320      	movs	r3, #32
 80025ae:	e003      	b.n	80025b8 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80025b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025b2:	fab3 f383 	clz	r3, r3
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	3301      	adds	r3, #1
 80025ba:	f003 021f 	and.w	r2, r3, #31
 80025be:	4613      	mov	r3, r2
 80025c0:	005b      	lsls	r3, r3, #1
 80025c2:	4413      	add	r3, r2
 80025c4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025c6:	430b      	orrs	r3, r1
 80025c8:	e081      	b.n	80026ce <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d107      	bne.n	80025e6 <HAL_ADC_ConfigChannel+0x5c6>
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	0e9b      	lsrs	r3, r3, #26
 80025dc:	3301      	adds	r3, #1
 80025de:	069b      	lsls	r3, r3, #26
 80025e0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80025e4:	e015      	b.n	8002612 <HAL_ADC_ConfigChannel+0x5f2>
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025ee:	fa93 f3a3 	rbit	r3, r3
 80025f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80025f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025f6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80025f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d101      	bne.n	8002602 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80025fe:	2320      	movs	r3, #32
 8002600:	e003      	b.n	800260a <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002604:	fab3 f383 	clz	r3, r3
 8002608:	b2db      	uxtb	r3, r3
 800260a:	3301      	adds	r3, #1
 800260c:	069b      	lsls	r3, r3, #26
 800260e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800261a:	2b00      	cmp	r3, #0
 800261c:	d109      	bne.n	8002632 <HAL_ADC_ConfigChannel+0x612>
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	0e9b      	lsrs	r3, r3, #26
 8002624:	3301      	adds	r3, #1
 8002626:	f003 031f 	and.w	r3, r3, #31
 800262a:	2101      	movs	r1, #1
 800262c:	fa01 f303 	lsl.w	r3, r1, r3
 8002630:	e017      	b.n	8002662 <HAL_ADC_ConfigChannel+0x642>
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002638:	6a3b      	ldr	r3, [r7, #32]
 800263a:	fa93 f3a3 	rbit	r3, r3
 800263e:	61fb      	str	r3, [r7, #28]
  return result;
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002646:	2b00      	cmp	r3, #0
 8002648:	d101      	bne.n	800264e <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 800264a:	2320      	movs	r3, #32
 800264c:	e003      	b.n	8002656 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 800264e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002650:	fab3 f383 	clz	r3, r3
 8002654:	b2db      	uxtb	r3, r3
 8002656:	3301      	adds	r3, #1
 8002658:	f003 031f 	and.w	r3, r3, #31
 800265c:	2101      	movs	r1, #1
 800265e:	fa01 f303 	lsl.w	r3, r1, r3
 8002662:	ea42 0103 	orr.w	r1, r2, r3
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800266e:	2b00      	cmp	r3, #0
 8002670:	d10d      	bne.n	800268e <HAL_ADC_ConfigChannel+0x66e>
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	0e9b      	lsrs	r3, r3, #26
 8002678:	3301      	adds	r3, #1
 800267a:	f003 021f 	and.w	r2, r3, #31
 800267e:	4613      	mov	r3, r2
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	4413      	add	r3, r2
 8002684:	3b1e      	subs	r3, #30
 8002686:	051b      	lsls	r3, r3, #20
 8002688:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800268c:	e01e      	b.n	80026cc <HAL_ADC_ConfigChannel+0x6ac>
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	fa93 f3a3 	rbit	r3, r3
 800269a:	613b      	str	r3, [r7, #16]
  return result;
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d104      	bne.n	80026b0 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80026a6:	2320      	movs	r3, #32
 80026a8:	e006      	b.n	80026b8 <HAL_ADC_ConfigChannel+0x698>
 80026aa:	bf00      	nop
 80026ac:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	fab3 f383 	clz	r3, r3
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	3301      	adds	r3, #1
 80026ba:	f003 021f 	and.w	r2, r3, #31
 80026be:	4613      	mov	r3, r2
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	4413      	add	r3, r2
 80026c4:	3b1e      	subs	r3, #30
 80026c6:	051b      	lsls	r3, r3, #20
 80026c8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026cc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80026ce:	683a      	ldr	r2, [r7, #0]
 80026d0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026d2:	4619      	mov	r1, r3
 80026d4:	f7ff f8eb 	bl	80018ae <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	4b45      	ldr	r3, [pc, #276]	@ (80027f4 <HAL_ADC_ConfigChannel+0x7d4>)
 80026de:	4013      	ands	r3, r2
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d07d      	beq.n	80027e0 <HAL_ADC_ConfigChannel+0x7c0>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026e4:	4844      	ldr	r0, [pc, #272]	@ (80027f8 <HAL_ADC_ConfigChannel+0x7d8>)
 80026e6:	f7fe ffe3 	bl	80016b0 <LL_ADC_GetCommonPathInternalCh>
 80026ea:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a42      	ldr	r2, [pc, #264]	@ (80027fc <HAL_ADC_ConfigChannel+0x7dc>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d127      	bne.n	8002748 <HAL_ADC_ConfigChannel+0x728>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80026f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80026fc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d121      	bne.n	8002748 <HAL_ADC_ConfigChannel+0x728>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a3d      	ldr	r2, [pc, #244]	@ (8002800 <HAL_ADC_ConfigChannel+0x7e0>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d168      	bne.n	80027e0 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800270e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002712:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002716:	4619      	mov	r1, r3
 8002718:	4837      	ldr	r0, [pc, #220]	@ (80027f8 <HAL_ADC_ConfigChannel+0x7d8>)
 800271a:	f7fe ffb6 	bl	800168a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800271e:	4b39      	ldr	r3, [pc, #228]	@ (8002804 <HAL_ADC_ConfigChannel+0x7e4>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	099b      	lsrs	r3, r3, #6
 8002724:	4a38      	ldr	r2, [pc, #224]	@ (8002808 <HAL_ADC_ConfigChannel+0x7e8>)
 8002726:	fba2 2303 	umull	r2, r3, r2, r3
 800272a:	099b      	lsrs	r3, r3, #6
 800272c:	1c5a      	adds	r2, r3, #1
 800272e:	4613      	mov	r3, r2
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	4413      	add	r3, r2
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002738:	e002      	b.n	8002740 <HAL_ADC_ConfigChannel+0x720>
          {
            wait_loop_index--;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	3b01      	subs	r3, #1
 800273e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d1f9      	bne.n	800273a <HAL_ADC_ConfigChannel+0x71a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002746:	e04b      	b.n	80027e0 <HAL_ADC_ConfigChannel+0x7c0>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a2f      	ldr	r2, [pc, #188]	@ (800280c <HAL_ADC_ConfigChannel+0x7ec>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d113      	bne.n	800277a <HAL_ADC_ConfigChannel+0x75a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002752:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002756:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d10d      	bne.n	800277a <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a2b      	ldr	r2, [pc, #172]	@ (8002810 <HAL_ADC_ConfigChannel+0x7f0>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d13b      	bne.n	80027e0 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002768:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800276c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002770:	4619      	mov	r1, r3
 8002772:	4821      	ldr	r0, [pc, #132]	@ (80027f8 <HAL_ADC_ConfigChannel+0x7d8>)
 8002774:	f7fe ff89 	bl	800168a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002778:	e032      	b.n	80027e0 <HAL_ADC_ConfigChannel+0x7c0>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a25      	ldr	r2, [pc, #148]	@ (8002814 <HAL_ADC_ConfigChannel+0x7f4>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d113      	bne.n	80027ac <HAL_ADC_ConfigChannel+0x78c>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002784:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002788:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d10d      	bne.n	80027ac <HAL_ADC_ConfigChannel+0x78c>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a1a      	ldr	r2, [pc, #104]	@ (8002800 <HAL_ADC_ConfigChannel+0x7e0>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d122      	bne.n	80027e0 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800279a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800279e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80027a2:	4619      	mov	r1, r3
 80027a4:	4814      	ldr	r0, [pc, #80]	@ (80027f8 <HAL_ADC_ConfigChannel+0x7d8>)
 80027a6:	f7fe ff70 	bl	800168a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_VREFINT_INSTANCE(hadc))
 80027aa:	e019      	b.n	80027e0 <HAL_ADC_ConfigChannel+0x7c0>
                                         LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
        }
      }
      else if (pConfig->Channel == ADC_CHANNEL_VDDCORE)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a19      	ldr	r2, [pc, #100]	@ (8002818 <HAL_ADC_ConfigChannel+0x7f8>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d114      	bne.n	80027e0 <HAL_ADC_ConfigChannel+0x7c0>
      {
        if (ADC_VDDCORE_INSTANCE(hadc))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a15      	ldr	r2, [pc, #84]	@ (8002810 <HAL_ADC_ConfigChannel+0x7f0>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d10f      	bne.n	80027e0 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetPathInternalChAdd(hadc->Instance, LL_ADC_PATH_INTERNAL_VDDCORE);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2101      	movs	r1, #1
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7fe ff80 	bl	80016cc <LL_ADC_SetPathInternalChAdd>
 80027cc:	e008      	b.n	80027e0 <HAL_ADC_ConfigChannel+0x7c0>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027d2:	f043 0220 	orr.w	r2, r3, #32
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80027e8:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	37d8      	adds	r7, #216	@ 0xd8
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	80080000 	.word	0x80080000
 80027f8:	40022300 	.word	0x40022300
 80027fc:	c3210000 	.word	0xc3210000
 8002800:	40022000 	.word	0x40022000
 8002804:	24000000 	.word	0x24000000
 8002808:	053e2d63 	.word	0x053e2d63
 800280c:	43290000 	.word	0x43290000
 8002810:	40022100 	.word	0x40022100
 8002814:	c7520000 	.word	0xc7520000
 8002818:	475a0000 	.word	0x475a0000

0800281c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002824:	2300      	movs	r3, #0
 8002826:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4618      	mov	r0, r3
 800282e:	f7ff f911 	bl	8001a54 <LL_ADC_IsEnabled>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d169      	bne.n	800290c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	689a      	ldr	r2, [r3, #8]
 800283e:	4b36      	ldr	r3, [pc, #216]	@ (8002918 <ADC_Enable+0xfc>)
 8002840:	4013      	ands	r3, r2
 8002842:	2b00      	cmp	r3, #0
 8002844:	d00d      	beq.n	8002862 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800284a:	f043 0210 	orr.w	r2, r3, #16
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002856:	f043 0201 	orr.w	r2, r3, #1
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e055      	b.n	800290e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4618      	mov	r0, r3
 8002868:	f7ff f8cc 	bl	8001a04 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800286c:	482b      	ldr	r0, [pc, #172]	@ (800291c <ADC_Enable+0x100>)
 800286e:	f7fe ff1f 	bl	80016b0 <LL_ADC_GetCommonPathInternalCh>
 8002872:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002874:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002878:	2b00      	cmp	r3, #0
 800287a:	d013      	beq.n	80028a4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800287c:	4b28      	ldr	r3, [pc, #160]	@ (8002920 <ADC_Enable+0x104>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	099b      	lsrs	r3, r3, #6
 8002882:	4a28      	ldr	r2, [pc, #160]	@ (8002924 <ADC_Enable+0x108>)
 8002884:	fba2 2303 	umull	r2, r3, r2, r3
 8002888:	099b      	lsrs	r3, r3, #6
 800288a:	1c5a      	adds	r2, r3, #1
 800288c:	4613      	mov	r3, r2
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	4413      	add	r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002896:	e002      	b.n	800289e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	3b01      	subs	r3, #1
 800289c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d1f9      	bne.n	8002898 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80028a4:	f7fe fed2 	bl	800164c <HAL_GetTick>
 80028a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80028aa:	e028      	b.n	80028fe <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7ff f8cf 	bl	8001a54 <LL_ADC_IsEnabled>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d104      	bne.n	80028c6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7ff f89f 	bl	8001a04 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80028c6:	f7fe fec1 	bl	800164c <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d914      	bls.n	80028fe <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d00d      	beq.n	80028fe <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028e6:	f043 0210 	orr.w	r2, r3, #16
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028f2:	f043 0201 	orr.w	r2, r3, #1
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e007      	b.n	800290e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0301 	and.w	r3, r3, #1
 8002908:	2b01      	cmp	r3, #1
 800290a:	d1cf      	bne.n	80028ac <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3710      	adds	r7, #16
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	8000003f 	.word	0x8000003f
 800291c:	40022300 	.word	0x40022300
 8002920:	24000000 	.word	0x24000000
 8002924:	053e2d63 	.word	0x053e2d63

08002928 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4618      	mov	r0, r3
 8002936:	f7ff f8a0 	bl	8001a7a <LL_ADC_IsDisableOngoing>
 800293a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4618      	mov	r0, r3
 8002942:	f7ff f887 	bl	8001a54 <LL_ADC_IsEnabled>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d047      	beq.n	80029dc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d144      	bne.n	80029dc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f003 030d 	and.w	r3, r3, #13
 800295c:	2b01      	cmp	r3, #1
 800295e:	d10c      	bne.n	800297a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4618      	mov	r0, r3
 8002966:	f7ff f861 	bl	8001a2c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2203      	movs	r2, #3
 8002970:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002972:	f7fe fe6b 	bl	800164c <HAL_GetTick>
 8002976:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002978:	e029      	b.n	80029ce <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800297e:	f043 0210 	orr.w	r2, r3, #16
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800298a:	f043 0201 	orr.w	r2, r3, #1
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e023      	b.n	80029de <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002996:	f7fe fe59 	bl	800164c <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d914      	bls.n	80029ce <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d00d      	beq.n	80029ce <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029b6:	f043 0210 	orr.w	r2, r3, #16
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029c2:	f043 0201 	orr.w	r2, r3, #1
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e007      	b.n	80029de <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f003 0301 	and.w	r3, r3, #1
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d1dc      	bne.n	8002996 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3710      	adds	r7, #16
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}

080029e6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80029e6:	b580      	push	{r7, lr}
 80029e8:	b084      	sub	sp, #16
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029f2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d14b      	bne.n	8002a98 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a04:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0308 	and.w	r3, r3, #8
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d021      	beq.n	8002a5e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7fe ff06 	bl	8001830 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d032      	beq.n	8002a90 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d12b      	bne.n	8002a90 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a3c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	659a      	str	r2, [r3, #88]	@ 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a48:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d11f      	bne.n	8002a90 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a54:	f043 0201 	orr.w	r2, r3, #1
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	659a      	str	r2, [r3, #88]	@ 0x58
 8002a5c:	e018      	b.n	8002a90 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	f003 0302 	and.w	r3, r3, #2
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d111      	bne.n	8002a90 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a70:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	659a      	str	r2, [r3, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a7c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d105      	bne.n	8002a90 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a88:	f043 0201 	orr.w	r2, r3, #1
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a90:	68f8      	ldr	r0, [r7, #12]
 8002a92:	f7fd ff3f 	bl	8000914 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002a96:	e00e      	b.n	8002ab6 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a9c:	f003 0310 	and.w	r3, r3, #16
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d003      	beq.n	8002aac <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002aa4:	68f8      	ldr	r0, [r7, #12]
 8002aa6:	f7ff fab1 	bl	800200c <HAL_ADC_ErrorCallback>
}
 8002aaa:	e004      	b.n	8002ab6 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ab0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	4798      	blx	r3
}
 8002ab6:	bf00      	nop
 8002ab8:	3710      	adds	r7, #16
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}

08002abe <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002abe:	b580      	push	{r7, lr}
 8002ac0:	b084      	sub	sp, #16
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aca:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002acc:	68f8      	ldr	r0, [r7, #12]
 8002ace:	f7fd ff15 	bl	80008fc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ad2:	bf00      	nop
 8002ad4:	3710      	adds	r7, #16
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}

08002ada <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002ada:	b580      	push	{r7, lr}
 8002adc:	b084      	sub	sp, #16
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ae6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aec:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002af8:	f043 0204 	orr.w	r2, r3, #4
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002b00:	68f8      	ldr	r0, [r7, #12]
 8002b02:	f7ff fa83 	bl	800200c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b06:	bf00      	nop
 8002b08:	3710      	adds	r7, #16
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}

08002b0e <LL_ADC_IsEnabled>:
{
 8002b0e:	b480      	push	{r7}
 8002b10:	b083      	sub	sp, #12
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d101      	bne.n	8002b26 <LL_ADC_IsEnabled+0x18>
 8002b22:	2301      	movs	r3, #1
 8002b24:	e000      	b.n	8002b28 <LL_ADC_IsEnabled+0x1a>
 8002b26:	2300      	movs	r3, #0
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <LL_ADC_StartCalibration>:
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	689a      	ldr	r2, [r3, #8]
 8002b42:	4b08      	ldr	r3, [pc, #32]	@ (8002b64 <LL_ADC_StartCalibration+0x30>)
 8002b44:	4013      	ands	r3, r2
 8002b46:	683a      	ldr	r2, [r7, #0]
 8002b48:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	609a      	str	r2, [r3, #8]
}
 8002b56:	bf00      	nop
 8002b58:	370c      	adds	r7, #12
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	3fffffc0 	.word	0x3fffffc0

08002b68 <LL_ADC_IsCalibrationOnGoing>:
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002b78:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002b7c:	d101      	bne.n	8002b82 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e000      	b.n	8002b84 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002b82:	2300      	movs	r3, #0
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <LL_ADC_REG_IsConversionOngoing>:
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f003 0304 	and.w	r3, r3, #4
 8002ba0:	2b04      	cmp	r3, #4
 8002ba2:	d101      	bne.n	8002ba8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e000      	b.n	8002baa <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
	...

08002bb8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d101      	bne.n	8002bd4 <HAL_ADCEx_Calibration_Start+0x1c>
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	e04b      	b.n	8002c6c <HAL_ADCEx_Calibration_Start+0xb4>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f7ff fea3 	bl	8002928 <ADC_Disable>
 8002be2:	4603      	mov	r3, r0
 8002be4:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002be6:	7bfb      	ldrb	r3, [r7, #15]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d134      	bne.n	8002c56 <HAL_ADCEx_Calibration_Start+0x9e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002bf0:	4b20      	ldr	r3, [pc, #128]	@ (8002c74 <HAL_ADCEx_Calibration_Start+0xbc>)
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	f043 0202 	orr.w	r2, r3, #2
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	659a      	str	r2, [r3, #88]	@ 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	6839      	ldr	r1, [r7, #0]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7ff ff96 	bl	8002b34 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002c08:	e014      	b.n	8002c34 <HAL_ADCEx_Calibration_Start+0x7c>
    {
      wait_loop_index++;
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	4a19      	ldr	r2, [pc, #100]	@ (8002c78 <HAL_ADCEx_Calibration_Start+0xc0>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d30d      	bcc.n	8002c34 <HAL_ADCEx_Calibration_Start+0x7c>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c1c:	f023 0312 	bic.w	r3, r3, #18
 8002c20:	f043 0210 	orr.w	r2, r3, #16
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	659a      	str	r2, [r3, #88]	@ 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e01b      	b.n	8002c6c <HAL_ADCEx_Calibration_Start+0xb4>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7ff ff95 	bl	8002b68 <LL_ADC_IsCalibrationOnGoing>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d1e2      	bne.n	8002c0a <HAL_ADCEx_Calibration_Start+0x52>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c48:	f023 0303 	bic.w	r3, r3, #3
 8002c4c:	f043 0201 	orr.w	r2, r3, #1
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	659a      	str	r2, [r3, #88]	@ 0x58
 8002c54:	e005      	b.n	8002c62 <HAL_ADCEx_Calibration_Start+0xaa>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c5a:	f043 0210 	orr.w	r2, r3, #16
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8002c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3710      	adds	r7, #16
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	ffffeefd 	.word	0xffffeefd
 8002c78:	25c3f800 	.word	0x25c3f800

08002c7c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002c7c:	b590      	push	{r4, r7, lr}
 8002c7e:	b0a1      	sub	sp, #132	@ 0x84
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c86:	2300      	movs	r3, #0
 8002c88:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d101      	bne.n	8002c9a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002c96:	2302      	movs	r3, #2
 8002c98:	e087      	b.n	8002daa <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a41      	ldr	r2, [pc, #260]	@ (8002db4 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d102      	bne.n	8002cba <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002cb4:	4b40      	ldr	r3, [pc, #256]	@ (8002db8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002cb6:	60fb      	str	r3, [r7, #12]
 8002cb8:	e001      	b.n	8002cbe <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002cba:	2300      	movs	r3, #0
 8002cbc:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d10b      	bne.n	8002cdc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cc8:	f043 0220 	orr.w	r2, r3, #32
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e066      	b.n	8002daa <HAL_ADCEx_MultiModeConfigChannel+0x12e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7ff ff56 	bl	8002b90 <LL_ADC_REG_IsConversionOngoing>
 8002ce4:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4618      	mov	r0, r3
 8002cec:	f7ff ff50 	bl	8002b90 <LL_ADC_REG_IsConversionOngoing>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d148      	bne.n	8002d88 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002cf6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d145      	bne.n	8002d88 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002cfc:	4b2f      	ldr	r3, [pc, #188]	@ (8002dbc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002cfe:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d027      	beq.n	8002d58 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002d08:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	6859      	ldr	r1, [r3, #4]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d18:	085b      	lsrs	r3, r3, #1
 8002d1a:	035b      	lsls	r3, r3, #13
 8002d1c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d20:	430b      	orrs	r3, r1
 8002d22:	431a      	orrs	r2, r3
 8002d24:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d26:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d28:	4822      	ldr	r0, [pc, #136]	@ (8002db4 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8002d2a:	f7ff fef0 	bl	8002b0e <LL_ADC_IsEnabled>
 8002d2e:	4604      	mov	r4, r0
 8002d30:	4821      	ldr	r0, [pc, #132]	@ (8002db8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002d32:	f7ff feec 	bl	8002b0e <LL_ADC_IsEnabled>
 8002d36:	4603      	mov	r3, r0
 8002d38:	4323      	orrs	r3, r4
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d12e      	bne.n	8002d9c <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002d3e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d40:	689a      	ldr	r2, [r3, #8]
 8002d42:	4b1f      	ldr	r3, [pc, #124]	@ (8002dc0 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002d44:	4013      	ands	r3, r2
 8002d46:	683a      	ldr	r2, [r7, #0]
 8002d48:	6811      	ldr	r1, [r2, #0]
 8002d4a:	683a      	ldr	r2, [r7, #0]
 8002d4c:	6892      	ldr	r2, [r2, #8]
 8002d4e:	430a      	orrs	r2, r1
 8002d50:	431a      	orrs	r2, r3
 8002d52:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d54:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002d56:	e021      	b.n	8002d9c <HAL_ADCEx_MultiModeConfigChannel+0x120>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002d58:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002d60:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d62:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d64:	4813      	ldr	r0, [pc, #76]	@ (8002db4 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8002d66:	f7ff fed2 	bl	8002b0e <LL_ADC_IsEnabled>
 8002d6a:	4604      	mov	r4, r0
 8002d6c:	4812      	ldr	r0, [pc, #72]	@ (8002db8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002d6e:	f7ff fece 	bl	8002b0e <LL_ADC_IsEnabled>
 8002d72:	4603      	mov	r3, r0
 8002d74:	4323      	orrs	r3, r4
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d110      	bne.n	8002d9c <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002d7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d7c:	689a      	ldr	r2, [r3, #8]
 8002d7e:	4b10      	ldr	r3, [pc, #64]	@ (8002dc0 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002d80:	4013      	ands	r3, r2
 8002d82:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002d84:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002d86:	e009      	b.n	8002d9c <HAL_ADCEx_MultiModeConfigChannel+0x120>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d8c:	f043 0220 	orr.w	r2, r3, #32
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002d9a:	e000      	b.n	8002d9e <HAL_ADCEx_MultiModeConfigChannel+0x122>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002d9c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8002da6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3784      	adds	r7, #132	@ 0x84
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd90      	pop	{r4, r7, pc}
 8002db2:	bf00      	nop
 8002db4:	40022000 	.word	0x40022000
 8002db8:	40022100 	.word	0x40022100
 8002dbc:	40022300 	.word	0x40022300
 8002dc0:	fffff0e0 	.word	0xfffff0e0

08002dc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b085      	sub	sp, #20
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f003 0307 	and.w	r3, r3, #7
 8002dd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002dd4:	4b0b      	ldr	r3, [pc, #44]	@ (8002e04 <__NVIC_SetPriorityGrouping+0x40>)
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dda:	68ba      	ldr	r2, [r7, #8]
 8002ddc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002de0:	4013      	ands	r3, r2
 8002de2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002dec:	4b06      	ldr	r3, [pc, #24]	@ (8002e08 <__NVIC_SetPriorityGrouping+0x44>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002df2:	4a04      	ldr	r2, [pc, #16]	@ (8002e04 <__NVIC_SetPriorityGrouping+0x40>)
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	60d3      	str	r3, [r2, #12]
}
 8002df8:	bf00      	nop
 8002dfa:	3714      	adds	r7, #20
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr
 8002e04:	e000ed00 	.word	0xe000ed00
 8002e08:	05fa0000 	.word	0x05fa0000

08002e0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e10:	4b04      	ldr	r3, [pc, #16]	@ (8002e24 <__NVIC_GetPriorityGrouping+0x18>)
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	0a1b      	lsrs	r3, r3, #8
 8002e16:	f003 0307 	and.w	r3, r3, #7
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr
 8002e24:	e000ed00 	.word	0xe000ed00

08002e28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	4603      	mov	r3, r0
 8002e30:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002e32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	db0b      	blt.n	8002e52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e3a:	88fb      	ldrh	r3, [r7, #6]
 8002e3c:	f003 021f 	and.w	r2, r3, #31
 8002e40:	4907      	ldr	r1, [pc, #28]	@ (8002e60 <__NVIC_EnableIRQ+0x38>)
 8002e42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e46:	095b      	lsrs	r3, r3, #5
 8002e48:	2001      	movs	r0, #1
 8002e4a:	fa00 f202 	lsl.w	r2, r0, r2
 8002e4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e52:	bf00      	nop
 8002e54:	370c      	adds	r7, #12
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	e000e100 	.word	0xe000e100

08002e64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	6039      	str	r1, [r7, #0]
 8002e6e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002e70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	db0a      	blt.n	8002e8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	b2da      	uxtb	r2, r3
 8002e7c:	490c      	ldr	r1, [pc, #48]	@ (8002eb0 <__NVIC_SetPriority+0x4c>)
 8002e7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e82:	0112      	lsls	r2, r2, #4
 8002e84:	b2d2      	uxtb	r2, r2
 8002e86:	440b      	add	r3, r1
 8002e88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e8c:	e00a      	b.n	8002ea4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	b2da      	uxtb	r2, r3
 8002e92:	4908      	ldr	r1, [pc, #32]	@ (8002eb4 <__NVIC_SetPriority+0x50>)
 8002e94:	88fb      	ldrh	r3, [r7, #6]
 8002e96:	f003 030f 	and.w	r3, r3, #15
 8002e9a:	3b04      	subs	r3, #4
 8002e9c:	0112      	lsls	r2, r2, #4
 8002e9e:	b2d2      	uxtb	r2, r2
 8002ea0:	440b      	add	r3, r1
 8002ea2:	761a      	strb	r2, [r3, #24]
}
 8002ea4:	bf00      	nop
 8002ea6:	370c      	adds	r7, #12
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr
 8002eb0:	e000e100 	.word	0xe000e100
 8002eb4:	e000ed00 	.word	0xe000ed00

08002eb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b089      	sub	sp, #36	@ 0x24
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f003 0307 	and.w	r3, r3, #7
 8002eca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	f1c3 0307 	rsb	r3, r3, #7
 8002ed2:	2b04      	cmp	r3, #4
 8002ed4:	bf28      	it	cs
 8002ed6:	2304      	movcs	r3, #4
 8002ed8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	3304      	adds	r3, #4
 8002ede:	2b06      	cmp	r3, #6
 8002ee0:	d902      	bls.n	8002ee8 <NVIC_EncodePriority+0x30>
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	3b03      	subs	r3, #3
 8002ee6:	e000      	b.n	8002eea <NVIC_EncodePriority+0x32>
 8002ee8:	2300      	movs	r3, #0
 8002eea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002eec:	f04f 32ff 	mov.w	r2, #4294967295
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef6:	43da      	mvns	r2, r3
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	401a      	ands	r2, r3
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f00:	f04f 31ff 	mov.w	r1, #4294967295
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	fa01 f303 	lsl.w	r3, r1, r3
 8002f0a:	43d9      	mvns	r1, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f10:	4313      	orrs	r3, r2
         );
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3724      	adds	r7, #36	@ 0x24
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
	...

08002f20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f30:	d301      	bcc.n	8002f36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f32:	2301      	movs	r3, #1
 8002f34:	e00f      	b.n	8002f56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f36:	4a0a      	ldr	r2, [pc, #40]	@ (8002f60 <SysTick_Config+0x40>)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f3e:	210f      	movs	r1, #15
 8002f40:	f04f 30ff 	mov.w	r0, #4294967295
 8002f44:	f7ff ff8e 	bl	8002e64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f48:	4b05      	ldr	r3, [pc, #20]	@ (8002f60 <SysTick_Config+0x40>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f4e:	4b04      	ldr	r3, [pc, #16]	@ (8002f60 <SysTick_Config+0x40>)
 8002f50:	2207      	movs	r2, #7
 8002f52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3708      	adds	r7, #8
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	e000e010 	.word	0xe000e010

08002f64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f7ff ff29 	bl	8002dc4 <__NVIC_SetPriorityGrouping>
}
 8002f72:	bf00      	nop
 8002f74:	3708      	adds	r7, #8
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b086      	sub	sp, #24
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	4603      	mov	r3, r0
 8002f82:	60b9      	str	r1, [r7, #8]
 8002f84:	607a      	str	r2, [r7, #4]
 8002f86:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_PRIO_INTERRUPT(IRQn));
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f88:	f7ff ff40 	bl	8002e0c <__NVIC_GetPriorityGrouping>
 8002f8c:	6178      	str	r0, [r7, #20]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority, prioritygroup));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority, prioritygroup));

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	68b9      	ldr	r1, [r7, #8]
 8002f92:	6978      	ldr	r0, [r7, #20]
 8002f94:	f7ff ff90 	bl	8002eb8 <NVIC_EncodePriority>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002f9e:	4611      	mov	r1, r2
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f7ff ff5f 	bl	8002e64 <__NVIC_SetPriority>
}
 8002fa6:	bf00      	nop
 8002fa8:	3718      	adds	r7, #24
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}

08002fae <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *         to the appropriate CMSIS device file (stm32h7rsxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fae:	b580      	push	{r7, lr}
 8002fb0:	b082      	sub	sp, #8
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fb8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7ff ff33 	bl	8002e28 <__NVIC_EnableIRQ>
}
 8002fc2:	bf00      	nop
 8002fc4:	3708      	adds	r7, #8
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b082      	sub	sp, #8
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f7ff ffa4 	bl	8002f20 <SysTick_Config>
 8002fd8:	4603      	mov	r3, r0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3708      	adds	r7, #8
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
	...

08002fe4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("dmb 0xF":::"memory");
 8002fec:	f3bf 8f5f 	dmb	sy
}
 8002ff0:	bf00      	nop
  /* Force any outstanding transfers to complete before enabling MPU */
  __DMB();

  /* Enable the MPU */
  MPU->CTRL = (MPU_Control | MPU_CTRL_ENABLE_Msk);
 8002ff2:	4a0b      	ldr	r2, [pc, #44]	@ (8003020 <HAL_MPU_Enable+0x3c>)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f043 0301 	orr.w	r3, r3, #1
 8002ffa:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002ffc:	4b09      	ldr	r3, [pc, #36]	@ (8003024 <HAL_MPU_Enable+0x40>)
 8002ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003000:	4a08      	ldr	r2, [pc, #32]	@ (8003024 <HAL_MPU_Enable+0x40>)
 8003002:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003006:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003008:	f3bf 8f4f 	dsb	sy
}
 800300c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800300e:	f3bf 8f6f 	isb	sy
}
 8003012:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003014:	bf00      	nop
 8003016:	370c      	adds	r7, #12
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr
 8003020:	e000ed90 	.word	0xe000ed90
 8003024:	e000ed00 	.word	0xe000ed00

08003028 <HAL_MPU_Disable>:
/**
  * @brief  Disable the MPU.
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 800302c:	f3bf 8f5f 	dmb	sy
}
 8003030:	bf00      	nop
  /* Force any outstanding transfers to complete before disabling MPU */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003032:	4b0a      	ldr	r3, [pc, #40]	@ (800305c <HAL_MPU_Disable+0x34>)
 8003034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003036:	4a09      	ldr	r2, [pc, #36]	@ (800305c <HAL_MPU_Disable+0x34>)
 8003038:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800303c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register */
  MPU->CTRL = 0U;
 800303e:	4b08      	ldr	r3, [pc, #32]	@ (8003060 <HAL_MPU_Disable+0x38>)
 8003040:	2200      	movs	r2, #0
 8003042:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 8003044:	f3bf 8f4f 	dsb	sy
}
 8003048:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800304a:	f3bf 8f6f 	isb	sy
}
 800304e:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003050:	bf00      	nop
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	e000ed00 	.word	0xe000ed00
 8003060:	e000ed90 	.word	0xe000ed90

08003064 <HAL_MPU_ConfigRegion>:
  *                  the initialization and configuration information.
  * @note   The region base address must be aligned to the size of the region.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *pMPU_RegionInit)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(pMPU_RegionInit->Number));
  assert_param(IS_MPU_REGION_ENABLE(pMPU_RegionInit->Enable));

  /* Set the Region number */
  MPU->RNR = pMPU_RegionInit->Number;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	785a      	ldrb	r2, [r3, #1]
 8003070:	4b1e      	ldr	r3, [pc, #120]	@ (80030ec <HAL_MPU_ConfigRegion+0x88>)
 8003072:	609a      	str	r2, [r3, #8]
  assert_param(IS_MPU_SUB_REGION_DISABLE(pMPU_RegionInit->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(pMPU_RegionInit->Size));
  assert_param(IS_MPU_ADDRESS_MULTIPLE_SIZE(pMPU_RegionInit->BaseAddress, pMPU_RegionInit->Size));

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003074:	4b1d      	ldr	r3, [pc, #116]	@ (80030ec <HAL_MPU_ConfigRegion+0x88>)
 8003076:	691b      	ldr	r3, [r3, #16]
 8003078:	4a1c      	ldr	r2, [pc, #112]	@ (80030ec <HAL_MPU_ConfigRegion+0x88>)
 800307a:	f023 0301 	bic.w	r3, r3, #1
 800307e:	6113      	str	r3, [r2, #16]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003080:	4b1a      	ldr	r3, [pc, #104]	@ (80030ec <HAL_MPU_ConfigRegion+0x88>)
 8003082:	691b      	ldr	r3, [r3, #16]
 8003084:	4a19      	ldr	r2, [pc, #100]	@ (80030ec <HAL_MPU_ConfigRegion+0x88>)
 8003086:	f023 0301 	bic.w	r3, r3, #1
 800308a:	6113      	str	r3, [r2, #16]
  MPU->RBAR = pMPU_RegionInit->BaseAddress;
 800308c:	4a17      	ldr	r2, [pc, #92]	@ (80030ec <HAL_MPU_ConfigRegion+0x88>)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)pMPU_RegionInit->DisableExec      << MPU_RASR_XN_Pos)   |
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	7b1b      	ldrb	r3, [r3, #12]
 8003098:	071a      	lsls	r2, r3, #28
              ((uint32_t)pMPU_RegionInit->AccessPermission << MPU_RASR_AP_Pos)   |
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	7adb      	ldrb	r3, [r3, #11]
 800309e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)pMPU_RegionInit->DisableExec      << MPU_RASR_XN_Pos)   |
 80030a0:	431a      	orrs	r2, r3
              ((uint32_t)pMPU_RegionInit->TypeExtField     << MPU_RASR_TEX_Pos)  |
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	7a9b      	ldrb	r3, [r3, #10]
 80030a6:	04db      	lsls	r3, r3, #19
              ((uint32_t)pMPU_RegionInit->AccessPermission << MPU_RASR_AP_Pos)   |
 80030a8:	431a      	orrs	r2, r3
              ((uint32_t)pMPU_RegionInit->IsShareable      << MPU_RASR_S_Pos)    |
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	7b5b      	ldrb	r3, [r3, #13]
 80030ae:	049b      	lsls	r3, r3, #18
              ((uint32_t)pMPU_RegionInit->TypeExtField     << MPU_RASR_TEX_Pos)  |
 80030b0:	431a      	orrs	r2, r3
              ((uint32_t)pMPU_RegionInit->IsCacheable      << MPU_RASR_C_Pos)    |
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	7b9b      	ldrb	r3, [r3, #14]
 80030b6:	045b      	lsls	r3, r3, #17
              ((uint32_t)pMPU_RegionInit->IsShareable      << MPU_RASR_S_Pos)    |
 80030b8:	431a      	orrs	r2, r3
              ((uint32_t)pMPU_RegionInit->IsBufferable     << MPU_RASR_B_Pos)    |
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	7bdb      	ldrb	r3, [r3, #15]
 80030be:	041b      	lsls	r3, r3, #16
              ((uint32_t)pMPU_RegionInit->IsCacheable      << MPU_RASR_C_Pos)    |
 80030c0:	431a      	orrs	r2, r3
              ((uint32_t)pMPU_RegionInit->SubRegionDisable << MPU_RASR_SRD_Pos)  |
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	7a5b      	ldrb	r3, [r3, #9]
 80030c6:	021b      	lsls	r3, r3, #8
              ((uint32_t)pMPU_RegionInit->IsBufferable     << MPU_RASR_B_Pos)    |
 80030c8:	431a      	orrs	r2, r3
              ((uint32_t)pMPU_RegionInit->Size             << MPU_RASR_SIZE_Pos) |
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	7a1b      	ldrb	r3, [r3, #8]
 80030ce:	005b      	lsls	r3, r3, #1
              ((uint32_t)pMPU_RegionInit->SubRegionDisable << MPU_RASR_SRD_Pos)  |
 80030d0:	4313      	orrs	r3, r2
              ((uint32_t)pMPU_RegionInit->Enable           << MPU_RASR_ENABLE_Pos);
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	7812      	ldrb	r2, [r2, #0]
 80030d6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)pMPU_RegionInit->DisableExec      << MPU_RASR_XN_Pos)   |
 80030d8:	4a04      	ldr	r2, [pc, #16]	@ (80030ec <HAL_MPU_ConfigRegion+0x88>)
              ((uint32_t)pMPU_RegionInit->Size             << MPU_RASR_SIZE_Pos) |
 80030da:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)pMPU_RegionInit->DisableExec      << MPU_RASR_XN_Pos)   |
 80030dc:	6113      	str	r3, [r2, #16]
}
 80030de:	bf00      	nop
 80030e0:	370c      	adds	r7, #12
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop
 80030ec:	e000ed90 	.word	0xe000ed90

080030f0 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 80030f8:	f7fe faa8 	bl	800164c <HAL_GetTick>
 80030fc:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d101      	bne.n	8003108 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e0ef      	b.n	80032e8 <HAL_DMA_Init+0x1f8>
  if (hdma->Init.Mode == DMA_PFCTRL)
  {
    assert_param(IS_DMA_PFREQ_INSTANCE(hdma->Instance));
  }
  /* Check DMA channel instance */
  if ((IS_HPDMA_INSTANCE(hdma->Instance) != 0U) || (IS_GPDMA_INSTANCE(hdma->Instance) != 0U))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a78      	ldr	r2, [pc, #480]	@ (80032f0 <HAL_DMA_Init+0x200>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d04a      	beq.n	80031a8 <HAL_DMA_Init+0xb8>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a77      	ldr	r2, [pc, #476]	@ (80032f4 <HAL_DMA_Init+0x204>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d045      	beq.n	80031a8 <HAL_DMA_Init+0xb8>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a75      	ldr	r2, [pc, #468]	@ (80032f8 <HAL_DMA_Init+0x208>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d040      	beq.n	80031a8 <HAL_DMA_Init+0xb8>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a74      	ldr	r2, [pc, #464]	@ (80032fc <HAL_DMA_Init+0x20c>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d03b      	beq.n	80031a8 <HAL_DMA_Init+0xb8>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a72      	ldr	r2, [pc, #456]	@ (8003300 <HAL_DMA_Init+0x210>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d036      	beq.n	80031a8 <HAL_DMA_Init+0xb8>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a71      	ldr	r2, [pc, #452]	@ (8003304 <HAL_DMA_Init+0x214>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d031      	beq.n	80031a8 <HAL_DMA_Init+0xb8>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a6f      	ldr	r2, [pc, #444]	@ (8003308 <HAL_DMA_Init+0x218>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d02c      	beq.n	80031a8 <HAL_DMA_Init+0xb8>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a6e      	ldr	r2, [pc, #440]	@ (800330c <HAL_DMA_Init+0x21c>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d027      	beq.n	80031a8 <HAL_DMA_Init+0xb8>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a6c      	ldr	r2, [pc, #432]	@ (8003310 <HAL_DMA_Init+0x220>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d022      	beq.n	80031a8 <HAL_DMA_Init+0xb8>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a6b      	ldr	r2, [pc, #428]	@ (8003314 <HAL_DMA_Init+0x224>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d01d      	beq.n	80031a8 <HAL_DMA_Init+0xb8>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a69      	ldr	r2, [pc, #420]	@ (8003318 <HAL_DMA_Init+0x228>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d018      	beq.n	80031a8 <HAL_DMA_Init+0xb8>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a68      	ldr	r2, [pc, #416]	@ (800331c <HAL_DMA_Init+0x22c>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d013      	beq.n	80031a8 <HAL_DMA_Init+0xb8>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a66      	ldr	r2, [pc, #408]	@ (8003320 <HAL_DMA_Init+0x230>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d00e      	beq.n	80031a8 <HAL_DMA_Init+0xb8>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a65      	ldr	r2, [pc, #404]	@ (8003324 <HAL_DMA_Init+0x234>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d009      	beq.n	80031a8 <HAL_DMA_Init+0xb8>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a63      	ldr	r2, [pc, #396]	@ (8003328 <HAL_DMA_Init+0x238>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d004      	beq.n	80031a8 <HAL_DMA_Init+0xb8>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a62      	ldr	r2, [pc, #392]	@ (800332c <HAL_DMA_Init+0x23c>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d101      	bne.n	80031ac <HAL_DMA_Init+0xbc>
 80031a8:	2301      	movs	r3, #1
 80031aa:	e000      	b.n	80031ae <HAL_DMA_Init+0xbe>
 80031ac:	2300      	movs	r3, #0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d14e      	bne.n	8003250 <HAL_DMA_Init+0x160>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a5e      	ldr	r2, [pc, #376]	@ (8003330 <HAL_DMA_Init+0x240>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d049      	beq.n	8003250 <HAL_DMA_Init+0x160>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a5c      	ldr	r2, [pc, #368]	@ (8003334 <HAL_DMA_Init+0x244>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d044      	beq.n	8003250 <HAL_DMA_Init+0x160>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a5b      	ldr	r2, [pc, #364]	@ (8003338 <HAL_DMA_Init+0x248>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d03f      	beq.n	8003250 <HAL_DMA_Init+0x160>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a59      	ldr	r2, [pc, #356]	@ (800333c <HAL_DMA_Init+0x24c>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d03a      	beq.n	8003250 <HAL_DMA_Init+0x160>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a58      	ldr	r2, [pc, #352]	@ (8003340 <HAL_DMA_Init+0x250>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d035      	beq.n	8003250 <HAL_DMA_Init+0x160>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a56      	ldr	r2, [pc, #344]	@ (8003344 <HAL_DMA_Init+0x254>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d030      	beq.n	8003250 <HAL_DMA_Init+0x160>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a55      	ldr	r2, [pc, #340]	@ (8003348 <HAL_DMA_Init+0x258>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d02b      	beq.n	8003250 <HAL_DMA_Init+0x160>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a53      	ldr	r2, [pc, #332]	@ (800334c <HAL_DMA_Init+0x25c>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d026      	beq.n	8003250 <HAL_DMA_Init+0x160>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a52      	ldr	r2, [pc, #328]	@ (8003350 <HAL_DMA_Init+0x260>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d021      	beq.n	8003250 <HAL_DMA_Init+0x160>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a50      	ldr	r2, [pc, #320]	@ (8003354 <HAL_DMA_Init+0x264>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d01c      	beq.n	8003250 <HAL_DMA_Init+0x160>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a4f      	ldr	r2, [pc, #316]	@ (8003358 <HAL_DMA_Init+0x268>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d017      	beq.n	8003250 <HAL_DMA_Init+0x160>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a4d      	ldr	r2, [pc, #308]	@ (800335c <HAL_DMA_Init+0x26c>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d012      	beq.n	8003250 <HAL_DMA_Init+0x160>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a4c      	ldr	r2, [pc, #304]	@ (8003360 <HAL_DMA_Init+0x270>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d00d      	beq.n	8003250 <HAL_DMA_Init+0x160>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a4a      	ldr	r2, [pc, #296]	@ (8003364 <HAL_DMA_Init+0x274>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d008      	beq.n	8003250 <HAL_DMA_Init+0x160>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a49      	ldr	r2, [pc, #292]	@ (8003368 <HAL_DMA_Init+0x278>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d003      	beq.n	8003250 <HAL_DMA_Init+0x160>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a47      	ldr	r2, [pc, #284]	@ (800336c <HAL_DMA_Init+0x27c>)
 800324e:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Initialize the callbacks */
  if (hdma->State == HAL_DMA_STATE_RESET)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800325e:	b2db      	uxtb	r3, r3
 8003260:	2b00      	cmp	r3, #0
 8003262:	d10e      	bne.n	8003282 <HAL_DMA_Init+0x192>
  {
    /* Clean all callbacks */
    hdma->XferCpltCallback     = NULL;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->XferHalfCpltCallback = NULL;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->XferErrorCallback    = NULL;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	669a      	str	r2, [r3, #104]	@ 0x68
    hdma->XferAbortCallback    = NULL;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	66da      	str	r2, [r3, #108]	@ 0x6c
    hdma->XferSuspendCallback  = NULL;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	671a      	str	r2, [r3, #112]	@ 0x70
  }

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2202      	movs	r2, #2
 8003286:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	695a      	ldr	r2, [r3, #20]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f042 0206 	orr.w	r2, r2, #6
 8003298:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 800329a:	e00f      	b.n	80032bc <HAL_DMA_Init+0x1cc>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800329c:	f7fe f9d6 	bl	800164c <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b05      	cmp	r3, #5
 80032a8:	d908      	bls.n	80032bc <HAL_DMA_Init+0x1cc>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2210      	movs	r2, #16
 80032ae:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2203      	movs	r2, #3
 80032b4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e015      	b.n	80032e8 <HAL_DMA_Init+0x1f8>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d1e8      	bne.n	800329c <HAL_DMA_Init+0x1ac>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f000 fb1e 	bl	800390c <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2201      	movs	r2, #1
 80032e2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80032e6:	2300      	movs	r3, #0
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3710      	adds	r7, #16
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	52000050 	.word	0x52000050
 80032f4:	520000d0 	.word	0x520000d0
 80032f8:	52000150 	.word	0x52000150
 80032fc:	520001d0 	.word	0x520001d0
 8003300:	52000250 	.word	0x52000250
 8003304:	520002d0 	.word	0x520002d0
 8003308:	52000350 	.word	0x52000350
 800330c:	520003d0 	.word	0x520003d0
 8003310:	52000450 	.word	0x52000450
 8003314:	520004d0 	.word	0x520004d0
 8003318:	52000550 	.word	0x52000550
 800331c:	520005d0 	.word	0x520005d0
 8003320:	52000650 	.word	0x52000650
 8003324:	520006d0 	.word	0x520006d0
 8003328:	52000750 	.word	0x52000750
 800332c:	520007d0 	.word	0x520007d0
 8003330:	40021050 	.word	0x40021050
 8003334:	400210d0 	.word	0x400210d0
 8003338:	40021150 	.word	0x40021150
 800333c:	400211d0 	.word	0x400211d0
 8003340:	40021250 	.word	0x40021250
 8003344:	400212d0 	.word	0x400212d0
 8003348:	40021350 	.word	0x40021350
 800334c:	400213d0 	.word	0x400213d0
 8003350:	40021450 	.word	0x40021450
 8003354:	400214d0 	.word	0x400214d0
 8003358:	40021550 	.word	0x40021550
 800335c:	400215d0 	.word	0x400215d0
 8003360:	40021650 	.word	0x40021650
 8003364:	400216d0 	.word	0x400216d0
 8003368:	40021750 	.word	0x40021750
 800336c:	400217d0 	.word	0x400217d0

08003370 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	607a      	str	r2, [r7, #4]
 800337c:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d101      	bne.n	8003388 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e04f      	b.n	8003428 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800338e:	2b01      	cmp	r3, #1
 8003390:	d101      	bne.n	8003396 <HAL_DMA_Start_IT+0x26>
 8003392:	2302      	movs	r3, #2
 8003394:	e048      	b.n	8003428 <HAL_DMA_Start_IT+0xb8>
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2201      	movs	r2, #1
 800339a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d136      	bne.n	8003418 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2202      	movs	r2, #2
 80033ae:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2200      	movs	r2, #0
 80033b6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	68b9      	ldr	r1, [r7, #8]
 80033be:	68f8      	ldr	r0, [r7, #12]
 80033c0:	f000 fa7c 	bl	80038bc <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	695a      	ldr	r2, [r3, #20]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 80033d2:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d007      	beq.n	80033ec <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	695a      	ldr	r2, [r3, #20]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033ea:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d007      	beq.n	8003404 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	695a      	ldr	r2, [r3, #20]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003402:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	695a      	ldr	r2, [r3, #20]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f042 0201 	orr.w	r2, r2, #1
 8003412:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8003414:	2300      	movs	r3, #0
 8003416:	e007      	b.n	8003428 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2240      	movs	r2, #64	@ 0x40
 800341c:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
}
 8003428:	4618      	mov	r0, r3
 800342a:	3710      	adds	r7, #16
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}

08003430 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8003438:	f7fe f908 	bl	800164c <HAL_GetTick>
 800343c:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d101      	bne.n	8003448 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e06b      	b.n	8003520 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800344e:	b2db      	uxtb	r3, r3
 8003450:	2b02      	cmp	r3, #2
 8003452:	d008      	beq.n	8003466 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2220      	movs	r2, #32
 8003458:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e05c      	b.n	8003520 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	695a      	ldr	r2, [r3, #20]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f042 0204 	orr.w	r2, r2, #4
 8003474:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2205      	movs	r2, #5
 800347a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800347e:	e020      	b.n	80034c2 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8003480:	f7fe f8e4 	bl	800164c <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	2b05      	cmp	r3, #5
 800348c:	d919      	bls.n	80034c2 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003492:	f043 0210 	orr.w	r2, r3, #16
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2203      	movs	r2, #3
 800349e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d003      	beq.n	80034b6 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034b2:	2201      	movs	r2, #1
 80034b4:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e02e      	b.n	8003520 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	691b      	ldr	r3, [r3, #16]
 80034c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d0d7      	beq.n	8003480 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	695a      	ldr	r2, [r3, #20]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f042 0202 	orr.w	r2, r2, #2
 80034de:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2204      	movs	r2, #4
 80034e4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 80034f0:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2201      	movs	r2, #1
 80034f6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003502:	2b00      	cmp	r3, #0
 8003504:	d007      	beq.n	8003516 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800350a:	2201      	movs	r2, #1
 800350c:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	2200      	movs	r2, #0
 8003514:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800351e:	2300      	movs	r3, #0
}
 8003520:	4618      	mov	r0, r3
 8003522:	3710      	adds	r7, #16
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d101      	bne.n	800353a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e018      	b.n	800356c <HAL_DMA_Abort_IT+0x44>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003540:	b2db      	uxtb	r3, r3
 8003542:	2b02      	cmp	r3, #2
 8003544:	d004      	beq.n	8003550 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2220      	movs	r2, #32
 800354a:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e00d      	b.n	800356c <HAL_DMA_Abort_IT+0x44>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2204      	movs	r2, #4
 8003554:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6959      	ldr	r1, [r3, #20]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	f242 0304 	movw	r3, #8196	@ 0x2004
 8003566:	430b      	orrs	r3, r1
 8003568:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 800356a:	2300      	movs	r3, #0
}
 800356c:	4618      	mov	r0, r3
 800356e:	370c      	adds	r7, #12
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	461a      	mov	r2, r3
 8003586:	4b88      	ldr	r3, [pc, #544]	@ (80037a8 <HAL_DMA_IRQHandler+0x230>)
 8003588:	4013      	ands	r3, r2
 800358a:	60fb      	str	r3, [r7, #12]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003594:	3b50      	subs	r3, #80	@ 0x50
 8003596:	09db      	lsrs	r3, r3, #7
 8003598:	f003 031f 	and.w	r3, r3, #31
 800359c:	2201      	movs	r2, #1
 800359e:	fa02 f303 	lsl.w	r3, r2, r3
 80035a2:	60bb      	str	r3, [r7, #8]

  /* Global Interrupt Flag management *********************************************************************************/
  if (IS_DMA_GLOBAL_ACTIVE_FLAG(p_dma_instance, global_it_flag) == 0U)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	68da      	ldr	r2, [r3, #12]
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	4013      	ands	r3, r2
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	f000 813e 	beq.w	800382e <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	691b      	ldr	r3, [r3, #16]
 80035b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d011      	beq.n	80035e4 <HAL_DMA_IRQHandler+0x6c>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	695b      	ldr	r3, [r3, #20]
 80035c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00a      	beq.n	80035e4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80035d6:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035dc:	f043 0201 	orr.w	r2, r3, #1
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d011      	beq.n	8003616 <HAL_DMA_IRQHandler+0x9e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	695b      	ldr	r3, [r3, #20]
 80035f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d00a      	beq.n	8003616 <HAL_DMA_IRQHandler+0x9e>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003608:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800360e:	f043 0202 	orr.w	r2, r3, #2
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	691b      	ldr	r3, [r3, #16]
 800361c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d011      	beq.n	8003648 <HAL_DMA_IRQHandler+0xd0>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	695b      	ldr	r3, [r3, #20]
 800362a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00a      	beq.n	8003648 <HAL_DMA_IRQHandler+0xd0>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800363a:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003640:	f043 0204 	orr.w	r2, r3, #4
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d011      	beq.n	800367a <HAL_DMA_IRQHandler+0x102>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	695b      	ldr	r3, [r3, #20]
 800365c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003660:	2b00      	cmp	r3, #0
 8003662:	d00a      	beq.n	800367a <HAL_DMA_IRQHandler+0x102>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800366c:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003672:	f043 0208 	orr.w	r2, r3, #8
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	691b      	ldr	r3, [r3, #16]
 8003680:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003684:	2b00      	cmp	r3, #0
 8003686:	d013      	beq.n	80036b0 <HAL_DMA_IRQHandler+0x138>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	695b      	ldr	r3, [r3, #20]
 800368e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00c      	beq.n	80036b0 <HAL_DMA_IRQHandler+0x138>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800369e:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d003      	beq.n	80036b0 <HAL_DMA_IRQHandler+0x138>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d04c      	beq.n	8003758 <HAL_DMA_IRQHandler+0x1e0>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	695b      	ldr	r3, [r3, #20]
 80036c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d045      	beq.n	8003758 <HAL_DMA_IRQHandler+0x1e0>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80036d4:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	2b04      	cmp	r3, #4
 80036e0:	d12e      	bne.n	8003740 <HAL_DMA_IRQHandler+0x1c8>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	695a      	ldr	r2, [r3, #20]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80036f0:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	695a      	ldr	r2, [r3, #20]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f042 0202 	orr.w	r2, r2, #2
 8003700:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2201      	movs	r2, #1
 8003706:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800370e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003712:	2b00      	cmp	r3, #0
 8003714:	d007      	beq.n	8003726 <HAL_DMA_IRQHandler+0x1ae>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800371a:	2201      	movs	r2, #1
 800371c:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	2200      	movs	r2, #0
 8003724:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003732:	2b00      	cmp	r3, #0
 8003734:	d07d      	beq.n	8003832 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	4798      	blx	r3
        }

        return;
 800373e:	e078      	b.n	8003832 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2205      	movs	r2, #5
 8003744:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800374c:	2b00      	cmp	r3, #0
 800374e:	d003      	beq.n	8003758 <HAL_DMA_IRQHandler+0x1e0>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	691b      	ldr	r3, [r3, #16]
 800375e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003762:	2b00      	cmp	r3, #0
 8003764:	d03c      	beq.n	80037e0 <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	695b      	ldr	r3, [r3, #20]
 800376c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003770:	2b00      	cmp	r3, #0
 8003772:	d035      	beq.n	80037e0 <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003778:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800377c:	2b00      	cmp	r3, #0
 800377e:	d015      	beq.n	80037ac <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003786:	2b00      	cmp	r3, #0
 8003788:	d119      	bne.n	80037be <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003790:	2b00      	cmp	r3, #0
 8003792:	d114      	bne.n	80037be <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037a0:	2201      	movs	r2, #1
 80037a2:	731a      	strb	r2, [r3, #12]
 80037a4:	e00b      	b.n	80037be <HAL_DMA_IRQHandler+0x246>
 80037a6:	bf00      	nop
 80037a8:	fffff000 	.word	0xfffff000
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d103      	bne.n	80037be <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2201      	movs	r2, #1
 80037ba:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80037c6:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d003      	beq.n	80037e0 <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d025      	beq.n	8003834 <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	695a      	ldr	r2, [r3, #20]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f042 0202 	orr.w	r2, r2, #2
 80037f6:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003804:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003808:	2b00      	cmp	r3, #0
 800380a:	d003      	beq.n	8003814 <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003810:	2201      	movs	r2, #1
 8003812:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003820:	2b00      	cmp	r3, #0
 8003822:	d007      	beq.n	8003834 <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	4798      	blx	r3
 800382c:	e002      	b.n	8003834 <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 800382e:	bf00      	nop
 8003830:	e000      	b.n	8003834 <HAL_DMA_IRQHandler+0x2bc>
        return;
 8003832:	bf00      	nop
    }
  }
}
 8003834:	3710      	adds	r7, #16
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop

0800383c <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel privilege attribute.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 800383c:	b480      	push	{r7}
 800383e:	b085      	sub	sp, #20
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d101      	bne.n	8003850 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e02b      	b.n	80038a8 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	461a      	mov	r2, r3
 8003856:	4b17      	ldr	r3, [pc, #92]	@ (80038b4 <HAL_DMA_ConfigChannelAttributes+0x78>)
 8003858:	4013      	ands	r3, r2
 800385a:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003864:	3b50      	subs	r3, #80	@ 0x50
 8003866:	09db      	lsrs	r3, r3, #7
 8003868:	f003 031f 	and.w	r3, r3, #31
 800386c:	2201      	movs	r2, #1
 800386e:	fa02 f303 	lsl.w	r3, r2, r3
 8003872:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d013      	beq.n	80038a6 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 800387e:	683a      	ldr	r2, [r7, #0]
 8003880:	4b0d      	ldr	r3, [pc, #52]	@ (80038b8 <HAL_DMA_ConfigChannelAttributes+0x7c>)
 8003882:	4013      	ands	r3, r2
 8003884:	4a0c      	ldr	r2, [pc, #48]	@ (80038b8 <HAL_DMA_ConfigChannelAttributes+0x7c>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d106      	bne.n	8003898 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	685a      	ldr	r2, [r3, #4]
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	431a      	orrs	r2, r3
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	605a      	str	r2, [r3, #4]
 8003896:	e006      	b.n	80038a6 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	685a      	ldr	r2, [r3, #4]
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	43db      	mvns	r3, r3
 80038a0:	401a      	ands	r2, r3
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	605a      	str	r2, [r3, #4]
    }
  }

  return HAL_OK;
 80038a6:	2300      	movs	r3, #0
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3714      	adds	r7, #20
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr
 80038b4:	fffff000 	.word	0xfffff000
 80038b8:	01000001 	.word	0x01000001

080038bc <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 80038bc:	b480      	push	{r7}
 80038be:	b085      	sub	sp, #20
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	607a      	str	r2, [r7, #4]
 80038c8:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80038d0:	4b0d      	ldr	r3, [pc, #52]	@ (8003908 <DMA_SetConfig+0x4c>)
 80038d2:	4013      	ands	r3, r2
 80038d4:	683a      	ldr	r2, [r7, #0]
 80038d6:	b291      	uxth	r1, r2
 80038d8:	68fa      	ldr	r2, [r7, #12]
 80038da:	6812      	ldr	r2, [r2, #0]
 80038dc:	430b      	orrs	r3, r1
 80038de:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 80038e8:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	68ba      	ldr	r2, [r7, #8]
 80038f0:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80038fa:	bf00      	nop
 80038fc:	3714      	adds	r7, #20
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
 8003906:	bf00      	nop
 8003908:	ffff0000 	.word	0xffff0000

0800390c <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 800390c:	b480      	push	{r7}
 800390e:	b085      	sub	sp, #20
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a1b      	ldr	r3, [r3, #32]
 8003918:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	695b      	ldr	r3, [r3, #20]
 8003920:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	68fa      	ldr	r2, [r7, #12]
 800392a:	430a      	orrs	r2, r1
 800392c:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	695a      	ldr	r2, [r3, #20]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	69db      	ldr	r3, [r3, #28]
 8003936:	431a      	orrs	r2, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	691b      	ldr	r3, [r3, #16]
 800393c:	431a      	orrs	r2, r3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	699b      	ldr	r3, [r3, #24]
 8003942:	4313      	orrs	r3, r2
 8003944:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to HPDMA and GPDMA */
  if ((IS_HPDMA_INSTANCE(hdma->Instance) != 0U) || (IS_GPDMA_INSTANCE(hdma->Instance) != 0U))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a53      	ldr	r2, [pc, #332]	@ (8003a98 <DMA_Init+0x18c>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d04a      	beq.n	80039e6 <DMA_Init+0xda>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a51      	ldr	r2, [pc, #324]	@ (8003a9c <DMA_Init+0x190>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d045      	beq.n	80039e6 <DMA_Init+0xda>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a50      	ldr	r2, [pc, #320]	@ (8003aa0 <DMA_Init+0x194>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d040      	beq.n	80039e6 <DMA_Init+0xda>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a4e      	ldr	r2, [pc, #312]	@ (8003aa4 <DMA_Init+0x198>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d03b      	beq.n	80039e6 <DMA_Init+0xda>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a4d      	ldr	r2, [pc, #308]	@ (8003aa8 <DMA_Init+0x19c>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d036      	beq.n	80039e6 <DMA_Init+0xda>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a4b      	ldr	r2, [pc, #300]	@ (8003aac <DMA_Init+0x1a0>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d031      	beq.n	80039e6 <DMA_Init+0xda>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a4a      	ldr	r2, [pc, #296]	@ (8003ab0 <DMA_Init+0x1a4>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d02c      	beq.n	80039e6 <DMA_Init+0xda>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a48      	ldr	r2, [pc, #288]	@ (8003ab4 <DMA_Init+0x1a8>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d027      	beq.n	80039e6 <DMA_Init+0xda>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a47      	ldr	r2, [pc, #284]	@ (8003ab8 <DMA_Init+0x1ac>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d022      	beq.n	80039e6 <DMA_Init+0xda>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a45      	ldr	r2, [pc, #276]	@ (8003abc <DMA_Init+0x1b0>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d01d      	beq.n	80039e6 <DMA_Init+0xda>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a44      	ldr	r2, [pc, #272]	@ (8003ac0 <DMA_Init+0x1b4>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d018      	beq.n	80039e6 <DMA_Init+0xda>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a42      	ldr	r2, [pc, #264]	@ (8003ac4 <DMA_Init+0x1b8>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d013      	beq.n	80039e6 <DMA_Init+0xda>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a41      	ldr	r2, [pc, #260]	@ (8003ac8 <DMA_Init+0x1bc>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d00e      	beq.n	80039e6 <DMA_Init+0xda>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a3f      	ldr	r2, [pc, #252]	@ (8003acc <DMA_Init+0x1c0>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d009      	beq.n	80039e6 <DMA_Init+0xda>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a3e      	ldr	r2, [pc, #248]	@ (8003ad0 <DMA_Init+0x1c4>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d004      	beq.n	80039e6 <DMA_Init+0xda>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a3c      	ldr	r2, [pc, #240]	@ (8003ad4 <DMA_Init+0x1c8>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d101      	bne.n	80039ea <DMA_Init+0xde>
 80039e6:	2301      	movs	r3, #1
 80039e8:	e000      	b.n	80039ec <DMA_Init+0xe0>
 80039ea:	2300      	movs	r3, #0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	f040 8096 	bne.w	8003b1e <DMA_Init+0x212>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a38      	ldr	r2, [pc, #224]	@ (8003ad8 <DMA_Init+0x1cc>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d04a      	beq.n	8003a92 <DMA_Init+0x186>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a36      	ldr	r2, [pc, #216]	@ (8003adc <DMA_Init+0x1d0>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d045      	beq.n	8003a92 <DMA_Init+0x186>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a35      	ldr	r2, [pc, #212]	@ (8003ae0 <DMA_Init+0x1d4>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d040      	beq.n	8003a92 <DMA_Init+0x186>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a33      	ldr	r2, [pc, #204]	@ (8003ae4 <DMA_Init+0x1d8>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d03b      	beq.n	8003a92 <DMA_Init+0x186>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a32      	ldr	r2, [pc, #200]	@ (8003ae8 <DMA_Init+0x1dc>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d036      	beq.n	8003a92 <DMA_Init+0x186>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a30      	ldr	r2, [pc, #192]	@ (8003aec <DMA_Init+0x1e0>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d031      	beq.n	8003a92 <DMA_Init+0x186>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a2f      	ldr	r2, [pc, #188]	@ (8003af0 <DMA_Init+0x1e4>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d02c      	beq.n	8003a92 <DMA_Init+0x186>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a2d      	ldr	r2, [pc, #180]	@ (8003af4 <DMA_Init+0x1e8>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d027      	beq.n	8003a92 <DMA_Init+0x186>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a2c      	ldr	r2, [pc, #176]	@ (8003af8 <DMA_Init+0x1ec>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d022      	beq.n	8003a92 <DMA_Init+0x186>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a2a      	ldr	r2, [pc, #168]	@ (8003afc <DMA_Init+0x1f0>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d01d      	beq.n	8003a92 <DMA_Init+0x186>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a29      	ldr	r2, [pc, #164]	@ (8003b00 <DMA_Init+0x1f4>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d018      	beq.n	8003a92 <DMA_Init+0x186>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a27      	ldr	r2, [pc, #156]	@ (8003b04 <DMA_Init+0x1f8>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d013      	beq.n	8003a92 <DMA_Init+0x186>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a26      	ldr	r2, [pc, #152]	@ (8003b08 <DMA_Init+0x1fc>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d00e      	beq.n	8003a92 <DMA_Init+0x186>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a24      	ldr	r2, [pc, #144]	@ (8003b0c <DMA_Init+0x200>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d009      	beq.n	8003a92 <DMA_Init+0x186>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a23      	ldr	r2, [pc, #140]	@ (8003b10 <DMA_Init+0x204>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d004      	beq.n	8003a92 <DMA_Init+0x186>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a21      	ldr	r2, [pc, #132]	@ (8003b14 <DMA_Init+0x208>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d142      	bne.n	8003b18 <DMA_Init+0x20c>
 8003a92:	2301      	movs	r3, #1
 8003a94:	e041      	b.n	8003b1a <DMA_Init+0x20e>
 8003a96:	bf00      	nop
 8003a98:	52000050 	.word	0x52000050
 8003a9c:	520000d0 	.word	0x520000d0
 8003aa0:	52000150 	.word	0x52000150
 8003aa4:	520001d0 	.word	0x520001d0
 8003aa8:	52000250 	.word	0x52000250
 8003aac:	520002d0 	.word	0x520002d0
 8003ab0:	52000350 	.word	0x52000350
 8003ab4:	520003d0 	.word	0x520003d0
 8003ab8:	52000450 	.word	0x52000450
 8003abc:	520004d0 	.word	0x520004d0
 8003ac0:	52000550 	.word	0x52000550
 8003ac4:	520005d0 	.word	0x520005d0
 8003ac8:	52000650 	.word	0x52000650
 8003acc:	520006d0 	.word	0x520006d0
 8003ad0:	52000750 	.word	0x52000750
 8003ad4:	520007d0 	.word	0x520007d0
 8003ad8:	40021050 	.word	0x40021050
 8003adc:	400210d0 	.word	0x400210d0
 8003ae0:	40021150 	.word	0x40021150
 8003ae4:	400211d0 	.word	0x400211d0
 8003ae8:	40021250 	.word	0x40021250
 8003aec:	400212d0 	.word	0x400212d0
 8003af0:	40021350 	.word	0x40021350
 8003af4:	400213d0 	.word	0x400213d0
 8003af8:	40021450 	.word	0x40021450
 8003afc:	400214d0 	.word	0x400214d0
 8003b00:	40021550 	.word	0x40021550
 8003b04:	400215d0 	.word	0x400215d0
 8003b08:	40021650 	.word	0x40021650
 8003b0c:	400216d0 	.word	0x400216d0
 8003b10:	40021750 	.word	0x40021750
 8003b14:	400217d0 	.word	0x400217d0
 8003b18:	2300      	movs	r3, #0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d012      	beq.n	8003b44 <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b26:	3b01      	subs	r3, #1
 8003b28:	051b      	lsls	r3, r3, #20
 8003b2a:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8003b2e:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b34:	3b01      	subs	r3, #1
 8003b36:	011b      	lsls	r3, r3, #4
 8003b38:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8003b3c:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, tmpreg);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	68fa      	ldr	r2, [r7, #12]
 8003b4a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	689a      	ldr	r2, [r3, #8]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b58:	431a      	orrs	r2, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b6a:	f040 80af 	bne.w	8003ccc <DMA_Init+0x3c0>
  {
    if ((IS_HPDMA_INSTANCE(hdma->Instance) != 0U) || (IS_GPDMA_INSTANCE(hdma->Instance) != 0U))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a84      	ldr	r2, [pc, #528]	@ (8003d84 <DMA_Init+0x478>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d04a      	beq.n	8003c0e <DMA_Init+0x302>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a82      	ldr	r2, [pc, #520]	@ (8003d88 <DMA_Init+0x47c>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d045      	beq.n	8003c0e <DMA_Init+0x302>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a81      	ldr	r2, [pc, #516]	@ (8003d8c <DMA_Init+0x480>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d040      	beq.n	8003c0e <DMA_Init+0x302>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a7f      	ldr	r2, [pc, #508]	@ (8003d90 <DMA_Init+0x484>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d03b      	beq.n	8003c0e <DMA_Init+0x302>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a7e      	ldr	r2, [pc, #504]	@ (8003d94 <DMA_Init+0x488>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d036      	beq.n	8003c0e <DMA_Init+0x302>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a7c      	ldr	r2, [pc, #496]	@ (8003d98 <DMA_Init+0x48c>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d031      	beq.n	8003c0e <DMA_Init+0x302>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a7b      	ldr	r2, [pc, #492]	@ (8003d9c <DMA_Init+0x490>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d02c      	beq.n	8003c0e <DMA_Init+0x302>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a79      	ldr	r2, [pc, #484]	@ (8003da0 <DMA_Init+0x494>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d027      	beq.n	8003c0e <DMA_Init+0x302>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a78      	ldr	r2, [pc, #480]	@ (8003da4 <DMA_Init+0x498>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d022      	beq.n	8003c0e <DMA_Init+0x302>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a76      	ldr	r2, [pc, #472]	@ (8003da8 <DMA_Init+0x49c>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d01d      	beq.n	8003c0e <DMA_Init+0x302>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a75      	ldr	r2, [pc, #468]	@ (8003dac <DMA_Init+0x4a0>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d018      	beq.n	8003c0e <DMA_Init+0x302>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a73      	ldr	r2, [pc, #460]	@ (8003db0 <DMA_Init+0x4a4>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d013      	beq.n	8003c0e <DMA_Init+0x302>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a72      	ldr	r2, [pc, #456]	@ (8003db4 <DMA_Init+0x4a8>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d00e      	beq.n	8003c0e <DMA_Init+0x302>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a70      	ldr	r2, [pc, #448]	@ (8003db8 <DMA_Init+0x4ac>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d009      	beq.n	8003c0e <DMA_Init+0x302>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a6f      	ldr	r2, [pc, #444]	@ (8003dbc <DMA_Init+0x4b0>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d004      	beq.n	8003c0e <DMA_Init+0x302>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a6d      	ldr	r2, [pc, #436]	@ (8003dc0 <DMA_Init+0x4b4>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d101      	bne.n	8003c12 <DMA_Init+0x306>
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e000      	b.n	8003c14 <DMA_Init+0x308>
 8003c12:	2300      	movs	r3, #0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d154      	bne.n	8003cc2 <DMA_Init+0x3b6>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a69      	ldr	r2, [pc, #420]	@ (8003dc4 <DMA_Init+0x4b8>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d04a      	beq.n	8003cb8 <DMA_Init+0x3ac>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a68      	ldr	r2, [pc, #416]	@ (8003dc8 <DMA_Init+0x4bc>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d045      	beq.n	8003cb8 <DMA_Init+0x3ac>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a66      	ldr	r2, [pc, #408]	@ (8003dcc <DMA_Init+0x4c0>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d040      	beq.n	8003cb8 <DMA_Init+0x3ac>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a65      	ldr	r2, [pc, #404]	@ (8003dd0 <DMA_Init+0x4c4>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d03b      	beq.n	8003cb8 <DMA_Init+0x3ac>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a63      	ldr	r2, [pc, #396]	@ (8003dd4 <DMA_Init+0x4c8>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d036      	beq.n	8003cb8 <DMA_Init+0x3ac>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a62      	ldr	r2, [pc, #392]	@ (8003dd8 <DMA_Init+0x4cc>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d031      	beq.n	8003cb8 <DMA_Init+0x3ac>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a60      	ldr	r2, [pc, #384]	@ (8003ddc <DMA_Init+0x4d0>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d02c      	beq.n	8003cb8 <DMA_Init+0x3ac>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a5f      	ldr	r2, [pc, #380]	@ (8003de0 <DMA_Init+0x4d4>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d027      	beq.n	8003cb8 <DMA_Init+0x3ac>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a5d      	ldr	r2, [pc, #372]	@ (8003de4 <DMA_Init+0x4d8>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d022      	beq.n	8003cb8 <DMA_Init+0x3ac>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a5c      	ldr	r2, [pc, #368]	@ (8003de8 <DMA_Init+0x4dc>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d01d      	beq.n	8003cb8 <DMA_Init+0x3ac>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a5a      	ldr	r2, [pc, #360]	@ (8003dec <DMA_Init+0x4e0>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d018      	beq.n	8003cb8 <DMA_Init+0x3ac>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a59      	ldr	r2, [pc, #356]	@ (8003df0 <DMA_Init+0x4e4>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d013      	beq.n	8003cb8 <DMA_Init+0x3ac>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a57      	ldr	r2, [pc, #348]	@ (8003df4 <DMA_Init+0x4e8>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d00e      	beq.n	8003cb8 <DMA_Init+0x3ac>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a56      	ldr	r2, [pc, #344]	@ (8003df8 <DMA_Init+0x4ec>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d009      	beq.n	8003cb8 <DMA_Init+0x3ac>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a54      	ldr	r2, [pc, #336]	@ (8003dfc <DMA_Init+0x4f0>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d004      	beq.n	8003cb8 <DMA_Init+0x3ac>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a53      	ldr	r2, [pc, #332]	@ (8003e00 <DMA_Init+0x4f4>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d101      	bne.n	8003cbc <DMA_Init+0x3b0>
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e000      	b.n	8003cbe <DMA_Init+0x3b2>
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d00d      	beq.n	8003cde <DMA_Init+0x3d2>
    {
      tmpreg |= DMA_CTR2_DREQ;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003cc8:	60fb      	str	r3, [r7, #12]
 8003cca:	e008      	b.n	8003cde <DMA_Init+0x3d2>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003cd4:	d103      	bne.n	8003cde <DMA_Init+0x3d2>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003cdc:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Set DMA channel operation mode */
  tmpreg |= hdma->Init.Mode;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ce2:	68fa      	ldr	r2, [r7, #12]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003cee:	4b45      	ldr	r3, [pc, #276]	@ (8003e04 <DMA_Init+0x4f8>)
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	6812      	ldr	r2, [r2, #0]
 8003cf6:	68f9      	ldr	r1, [r7, #12]
 8003cf8:	430b      	orrs	r3, r1
 8003cfa:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_PFREQ | DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   |
                                    DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2200      	movs	r2, #0
 8003d02:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a3a      	ldr	r2, [pc, #232]	@ (8003df4 <DMA_Init+0x4e8>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d022      	beq.n	8003d54 <DMA_Init+0x448>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a39      	ldr	r2, [pc, #228]	@ (8003df8 <DMA_Init+0x4ec>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d01d      	beq.n	8003d54 <DMA_Init+0x448>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a37      	ldr	r2, [pc, #220]	@ (8003dfc <DMA_Init+0x4f0>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d018      	beq.n	8003d54 <DMA_Init+0x448>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a36      	ldr	r2, [pc, #216]	@ (8003e00 <DMA_Init+0x4f4>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d013      	beq.n	8003d54 <DMA_Init+0x448>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a20      	ldr	r2, [pc, #128]	@ (8003db4 <DMA_Init+0x4a8>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d00e      	beq.n	8003d54 <DMA_Init+0x448>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a1f      	ldr	r2, [pc, #124]	@ (8003db8 <DMA_Init+0x4ac>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d009      	beq.n	8003d54 <DMA_Init+0x448>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a1d      	ldr	r2, [pc, #116]	@ (8003dbc <DMA_Init+0x4b0>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d004      	beq.n	8003d54 <DMA_Init+0x448>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a1c      	ldr	r2, [pc, #112]	@ (8003dc0 <DMA_Init+0x4b4>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d101      	bne.n	8003d58 <DMA_Init+0x44c>
 8003d54:	2301      	movs	r3, #1
 8003d56:	e000      	b.n	8003d5a <DMA_Init+0x44e>
 8003d58:	2300      	movs	r3, #0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d007      	beq.n	8003d6e <DMA_Init+0x462>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	2200      	movs	r2, #0
 8003d64:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2200      	movs	r2, #0
 8003d74:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8003d76:	bf00      	nop
 8003d78:	3714      	adds	r7, #20
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr
 8003d82:	bf00      	nop
 8003d84:	52000050 	.word	0x52000050
 8003d88:	520000d0 	.word	0x520000d0
 8003d8c:	52000150 	.word	0x52000150
 8003d90:	520001d0 	.word	0x520001d0
 8003d94:	52000250 	.word	0x52000250
 8003d98:	520002d0 	.word	0x520002d0
 8003d9c:	52000350 	.word	0x52000350
 8003da0:	520003d0 	.word	0x520003d0
 8003da4:	52000450 	.word	0x52000450
 8003da8:	520004d0 	.word	0x520004d0
 8003dac:	52000550 	.word	0x52000550
 8003db0:	520005d0 	.word	0x520005d0
 8003db4:	52000650 	.word	0x52000650
 8003db8:	520006d0 	.word	0x520006d0
 8003dbc:	52000750 	.word	0x52000750
 8003dc0:	520007d0 	.word	0x520007d0
 8003dc4:	40021050 	.word	0x40021050
 8003dc8:	400210d0 	.word	0x400210d0
 8003dcc:	40021150 	.word	0x40021150
 8003dd0:	400211d0 	.word	0x400211d0
 8003dd4:	40021250 	.word	0x40021250
 8003dd8:	400212d0 	.word	0x400212d0
 8003ddc:	40021350 	.word	0x40021350
 8003de0:	400213d0 	.word	0x400213d0
 8003de4:	40021450 	.word	0x40021450
 8003de8:	400214d0 	.word	0x400214d0
 8003dec:	40021550 	.word	0x40021550
 8003df0:	400215d0 	.word	0x400215d0
 8003df4:	40021650 	.word	0x40021650
 8003df8:	400216d0 	.word	0x400216d0
 8003dfc:	40021750 	.word	0x40021750
 8003e00:	400217d0 	.word	0x400217d0
 8003e04:	3cc02180 	.word	0x3cc02180

08003e08 <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8003e10:	f7fd fc1c 	bl	800164c <HAL_GetTick>
 8003e14:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d101      	bne.n	8003e20 <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e0da      	b.n	8003fd6 <HAL_DMAEx_List_Init+0x1ce>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if ((IS_HPDMA_INSTANCE(hdma->Instance) != 0U) || (IS_GPDMA_INSTANCE(hdma->Instance) != 0U))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a6e      	ldr	r2, [pc, #440]	@ (8003fe0 <HAL_DMAEx_List_Init+0x1d8>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d04a      	beq.n	8003ec0 <HAL_DMAEx_List_Init+0xb8>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a6d      	ldr	r2, [pc, #436]	@ (8003fe4 <HAL_DMAEx_List_Init+0x1dc>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d045      	beq.n	8003ec0 <HAL_DMAEx_List_Init+0xb8>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a6b      	ldr	r2, [pc, #428]	@ (8003fe8 <HAL_DMAEx_List_Init+0x1e0>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d040      	beq.n	8003ec0 <HAL_DMAEx_List_Init+0xb8>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a6a      	ldr	r2, [pc, #424]	@ (8003fec <HAL_DMAEx_List_Init+0x1e4>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d03b      	beq.n	8003ec0 <HAL_DMAEx_List_Init+0xb8>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a68      	ldr	r2, [pc, #416]	@ (8003ff0 <HAL_DMAEx_List_Init+0x1e8>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d036      	beq.n	8003ec0 <HAL_DMAEx_List_Init+0xb8>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a67      	ldr	r2, [pc, #412]	@ (8003ff4 <HAL_DMAEx_List_Init+0x1ec>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d031      	beq.n	8003ec0 <HAL_DMAEx_List_Init+0xb8>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a65      	ldr	r2, [pc, #404]	@ (8003ff8 <HAL_DMAEx_List_Init+0x1f0>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d02c      	beq.n	8003ec0 <HAL_DMAEx_List_Init+0xb8>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a64      	ldr	r2, [pc, #400]	@ (8003ffc <HAL_DMAEx_List_Init+0x1f4>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d027      	beq.n	8003ec0 <HAL_DMAEx_List_Init+0xb8>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a62      	ldr	r2, [pc, #392]	@ (8004000 <HAL_DMAEx_List_Init+0x1f8>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d022      	beq.n	8003ec0 <HAL_DMAEx_List_Init+0xb8>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a61      	ldr	r2, [pc, #388]	@ (8004004 <HAL_DMAEx_List_Init+0x1fc>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d01d      	beq.n	8003ec0 <HAL_DMAEx_List_Init+0xb8>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a5f      	ldr	r2, [pc, #380]	@ (8004008 <HAL_DMAEx_List_Init+0x200>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d018      	beq.n	8003ec0 <HAL_DMAEx_List_Init+0xb8>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a5e      	ldr	r2, [pc, #376]	@ (800400c <HAL_DMAEx_List_Init+0x204>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d013      	beq.n	8003ec0 <HAL_DMAEx_List_Init+0xb8>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a5c      	ldr	r2, [pc, #368]	@ (8004010 <HAL_DMAEx_List_Init+0x208>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d00e      	beq.n	8003ec0 <HAL_DMAEx_List_Init+0xb8>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a5b      	ldr	r2, [pc, #364]	@ (8004014 <HAL_DMAEx_List_Init+0x20c>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d009      	beq.n	8003ec0 <HAL_DMAEx_List_Init+0xb8>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a59      	ldr	r2, [pc, #356]	@ (8004018 <HAL_DMAEx_List_Init+0x210>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d004      	beq.n	8003ec0 <HAL_DMAEx_List_Init+0xb8>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a58      	ldr	r2, [pc, #352]	@ (800401c <HAL_DMAEx_List_Init+0x214>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d101      	bne.n	8003ec4 <HAL_DMAEx_List_Init+0xbc>
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e000      	b.n	8003ec6 <HAL_DMAEx_List_Init+0xbe>
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d14e      	bne.n	8003f68 <HAL_DMAEx_List_Init+0x160>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a54      	ldr	r2, [pc, #336]	@ (8004020 <HAL_DMAEx_List_Init+0x218>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d049      	beq.n	8003f68 <HAL_DMAEx_List_Init+0x160>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a52      	ldr	r2, [pc, #328]	@ (8004024 <HAL_DMAEx_List_Init+0x21c>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d044      	beq.n	8003f68 <HAL_DMAEx_List_Init+0x160>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a51      	ldr	r2, [pc, #324]	@ (8004028 <HAL_DMAEx_List_Init+0x220>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d03f      	beq.n	8003f68 <HAL_DMAEx_List_Init+0x160>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a4f      	ldr	r2, [pc, #316]	@ (800402c <HAL_DMAEx_List_Init+0x224>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d03a      	beq.n	8003f68 <HAL_DMAEx_List_Init+0x160>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a4e      	ldr	r2, [pc, #312]	@ (8004030 <HAL_DMAEx_List_Init+0x228>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d035      	beq.n	8003f68 <HAL_DMAEx_List_Init+0x160>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a4c      	ldr	r2, [pc, #304]	@ (8004034 <HAL_DMAEx_List_Init+0x22c>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d030      	beq.n	8003f68 <HAL_DMAEx_List_Init+0x160>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a4b      	ldr	r2, [pc, #300]	@ (8004038 <HAL_DMAEx_List_Init+0x230>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d02b      	beq.n	8003f68 <HAL_DMAEx_List_Init+0x160>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a49      	ldr	r2, [pc, #292]	@ (800403c <HAL_DMAEx_List_Init+0x234>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d026      	beq.n	8003f68 <HAL_DMAEx_List_Init+0x160>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a48      	ldr	r2, [pc, #288]	@ (8004040 <HAL_DMAEx_List_Init+0x238>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d021      	beq.n	8003f68 <HAL_DMAEx_List_Init+0x160>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a46      	ldr	r2, [pc, #280]	@ (8004044 <HAL_DMAEx_List_Init+0x23c>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d01c      	beq.n	8003f68 <HAL_DMAEx_List_Init+0x160>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a45      	ldr	r2, [pc, #276]	@ (8004048 <HAL_DMAEx_List_Init+0x240>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d017      	beq.n	8003f68 <HAL_DMAEx_List_Init+0x160>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a43      	ldr	r2, [pc, #268]	@ (800404c <HAL_DMAEx_List_Init+0x244>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d012      	beq.n	8003f68 <HAL_DMAEx_List_Init+0x160>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a42      	ldr	r2, [pc, #264]	@ (8004050 <HAL_DMAEx_List_Init+0x248>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d00d      	beq.n	8003f68 <HAL_DMAEx_List_Init+0x160>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a40      	ldr	r2, [pc, #256]	@ (8004054 <HAL_DMAEx_List_Init+0x24c>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d008      	beq.n	8003f68 <HAL_DMAEx_List_Init+0x160>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a3f      	ldr	r2, [pc, #252]	@ (8004058 <HAL_DMAEx_List_Init+0x250>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d003      	beq.n	8003f68 <HAL_DMAEx_List_Init+0x160>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a3d      	ldr	r2, [pc, #244]	@ (800405c <HAL_DMAEx_List_Init+0x254>)
 8003f66:	4293      	cmp	r3, r2
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2202      	movs	r2, #2
 8003f74:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	695a      	ldr	r2, [r3, #20]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f042 0206 	orr.w	r2, r2, #6
 8003f86:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8003f88:	e00f      	b.n	8003faa <HAL_DMAEx_List_Init+0x1a2>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8003f8a:	f7fd fb5f 	bl	800164c <HAL_GetTick>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	2b05      	cmp	r3, #5
 8003f96:	d908      	bls.n	8003faa <HAL_DMAEx_List_Init+0x1a2>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2210      	movs	r2, #16
 8003f9c:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2203      	movs	r2, #3
 8003fa2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e015      	b.n	8003fd6 <HAL_DMAEx_List_Init+0x1ce>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	695b      	ldr	r3, [r3, #20]
 8003fb0:	f003 0301 	and.w	r3, r3, #1
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d1e8      	bne.n	8003f8a <HAL_DMAEx_List_Init+0x182>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f000 fad3 	bl	8004564 <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3710      	adds	r7, #16
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	52000050 	.word	0x52000050
 8003fe4:	520000d0 	.word	0x520000d0
 8003fe8:	52000150 	.word	0x52000150
 8003fec:	520001d0 	.word	0x520001d0
 8003ff0:	52000250 	.word	0x52000250
 8003ff4:	520002d0 	.word	0x520002d0
 8003ff8:	52000350 	.word	0x52000350
 8003ffc:	520003d0 	.word	0x520003d0
 8004000:	52000450 	.word	0x52000450
 8004004:	520004d0 	.word	0x520004d0
 8004008:	52000550 	.word	0x52000550
 800400c:	520005d0 	.word	0x520005d0
 8004010:	52000650 	.word	0x52000650
 8004014:	520006d0 	.word	0x520006d0
 8004018:	52000750 	.word	0x52000750
 800401c:	520007d0 	.word	0x520007d0
 8004020:	40021050 	.word	0x40021050
 8004024:	400210d0 	.word	0x400210d0
 8004028:	40021150 	.word	0x40021150
 800402c:	400211d0 	.word	0x400211d0
 8004030:	40021250 	.word	0x40021250
 8004034:	400212d0 	.word	0x400212d0
 8004038:	40021350 	.word	0x40021350
 800403c:	400213d0 	.word	0x400213d0
 8004040:	40021450 	.word	0x40021450
 8004044:	400214d0 	.word	0x400214d0
 8004048:	40021550 	.word	0x40021550
 800404c:	400215d0 	.word	0x400215d0
 8004050:	40021650 	.word	0x40021650
 8004054:	400216d0 	.word	0x400216d0
 8004058:	40021750 	.word	0x40021750
 800405c:	400217d0 	.word	0x400217d0

08004060 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b086      	sub	sp, #24
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d003      	beq.n	8004076 <HAL_DMAEx_List_Start_IT+0x16>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004072:	2b00      	cmp	r3, #0
 8004074:	d101      	bne.n	800407a <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e082      	b.n	8004180 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004080:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	695b      	ldr	r3, [r3, #20]
 8004088:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800408c:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 800408e:	7dfb      	ldrb	r3, [r7, #23]
 8004090:	2b01      	cmp	r3, #1
 8004092:	d005      	beq.n	80040a0 <HAL_DMAEx_List_Start_IT+0x40>
 8004094:	7dfb      	ldrb	r3, [r7, #23]
 8004096:	2b02      	cmp	r3, #2
 8004098:	d16a      	bne.n	8004170 <HAL_DMAEx_List_Start_IT+0x110>
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d067      	beq.n	8004170 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d157      	bne.n	800415c <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d101      	bne.n	80040ba <HAL_DMAEx_List_Start_IT+0x5a>
 80040b6:	2302      	movs	r3, #2
 80040b8:	e062      	b.n	8004180 <HAL_DMAEx_List_Start_IT+0x120>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2201      	movs	r2, #1
 80040be:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2202      	movs	r2, #2
 80040c6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040ce:	2202      	movs	r2, #2
 80040d0:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040dc:	2200      	movs	r2, #0
 80040de:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	695a      	ldr	r2, [r3, #20]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 80040ee:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d007      	beq.n	8004108 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	695a      	ldr	r2, [r3, #20]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004106:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800410c:	2b00      	cmp	r3, #0
 800410e:	d007      	beq.n	8004120 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	695a      	ldr	r2, [r3, #20]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800411e:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f107 010c 	add.w	r1, r7, #12
 800412a:	2200      	movs	r2, #0
 800412c:	4618      	mov	r0, r3
 800412e:	f000 fe49 	bl	8004dc4 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4619      	mov	r1, r3
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	4b12      	ldr	r3, [pc, #72]	@ (8004188 <HAL_DMAEx_List_Start_IT+0x128>)
 8004140:	400b      	ands	r3, r1
 8004142:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	461a      	mov	r2, r3
 800414c:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004150:	4013      	ands	r3, r2
 8004152:	68f9      	ldr	r1, [r7, #12]
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	6812      	ldr	r2, [r2, #0]
 8004158:	430b      	orrs	r3, r1
 800415a:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	695a      	ldr	r2, [r3, #20]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f042 0201 	orr.w	r2, r2, #1
 800416a:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 800416c:	2300      	movs	r3, #0
 800416e:	e007      	b.n	8004180 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2240      	movs	r2, #64	@ 0x40
 8004174:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
}
 8004180:	4618      	mov	r0, r3
 8004182:	3718      	adds	r7, #24
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}
 8004188:	ffff0000 	.word	0xffff0000

0800418c <HAL_DMAEx_List_BuildNode>:
  *         addressable space.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b082      	sub	sp, #8
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d002      	beq.n	80041a2 <HAL_DMAEx_List_BuildNode+0x16>
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d101      	bne.n	80041a6 <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e004      	b.n	80041b0 <HAL_DMAEx_List_BuildNode+0x24>
    assert_param(IS_DMA_BLOCK_ADDR_OFFSET(pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset));
    assert_param(IS_DMA_BLOCK_ADDR_OFFSET(pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset));
  }

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 80041a6:	6839      	ldr	r1, [r7, #0]
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f000 fb33 	bl	8004814 <DMA_List_BuildNode>

  return HAL_OK;
 80041ae:	2300      	movs	r3, #0
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3708      	adds	r7, #8
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <HAL_DMAEx_List_GetNodeConfig>:
  *                       configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                               DMA_NodeTypeDef const *const pNode)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b082      	sub	sp, #8
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d002      	beq.n	80041ce <HAL_DMAEx_List_GetNodeConfig+0x16>
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d101      	bne.n	80041d2 <HAL_DMAEx_List_GetNodeConfig+0x1a>
  {
    return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e004      	b.n	80041dc <HAL_DMAEx_List_GetNodeConfig+0x24>
  }

  /* Get the DMA channel node configuration */
  DMA_List_GetNodeConfig(pNodeConfig, pNode);
 80041d2:	6839      	ldr	r1, [r7, #0]
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f000 fc7d 	bl	8004ad4 <DMA_List_GetNodeConfig>

  return HAL_OK;
 80041da:	2300      	movs	r3, #0
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3708      	adds	r7, #8
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <HAL_DMAEx_List_InsertNode>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode(DMA_QListTypeDef *const pQList,
                                            DMA_NodeTypeDef *const pPrevNode,
                                            DMA_NodeTypeDef *const pNewNode)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b08c      	sub	sp, #48	@ 0x30
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	60b9      	str	r1, [r7, #8]
 80041ee:	607a      	str	r2, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d002      	beq.n	80041fc <HAL_DMAEx_List_InsertNode+0x18>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d101      	bne.n	8004200 <HAL_DMAEx_List_InsertNode+0x1c>
  {
    return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e0b6      	b.n	800436e <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	695b      	ldr	r3, [r3, #20]
 8004204:	2b01      	cmp	r3, #1
 8004206:	d104      	bne.n	8004212 <HAL_DMAEx_List_InsertNode+0x2e>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2204      	movs	r2, #4
 800420c:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e0ad      	b.n	800436e <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pPrevNode, pNewNode) != 0U)
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	68b9      	ldr	r1, [r7, #8]
 800421a:	4618      	mov	r0, r3
 800421c:	f000 fd64 	bl	8004ce8 <DMA_List_CheckNodesBaseAddresses>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d004      	beq.n	8004230 <HAL_DMAEx_List_InsertNode+0x4c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2205      	movs	r2, #5
 800422a:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e09e      	b.n	800436e <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pPrevNode, pNewNode) != 0U)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	68b9      	ldr	r1, [r7, #8]
 8004238:	4618      	mov	r0, r3
 800423a:	f000 fd87 	bl	8004d4c <DMA_List_CheckNodesTypes>
 800423e:	4603      	mov	r3, r0
 8004240:	2b00      	cmp	r3, #0
 8004242:	d004      	beq.n	800424e <HAL_DMAEx_List_InsertNode+0x6a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2204      	movs	r2, #4
 8004248:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e08f      	b.n	800436e <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2202      	movs	r2, #2
 8004252:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2200      	movs	r2, #0
 8004258:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 800425a:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800425e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004262:	4619      	mov	r1, r3
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f000 fdad 	bl	8004dc4 <DMA_List_GetCLLRNodeInfo>

  /* Empty queue */
  if (pQList->Head == NULL)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d11a      	bne.n	80042a8 <HAL_DMAEx_List_InsertNode+0xc4>
  {
    /* Add only new node to queue */
    if (pPrevNode == NULL)
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d106      	bne.n	8004286 <HAL_DMAEx_List_InsertNode+0xa2>
    {
      pQList->Head       = pNewNode;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	601a      	str	r2, [r3, #0]
      pQList->NodeNumber = 1U;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2201      	movs	r2, #1
 8004282:	609a      	str	r2, [r3, #8]
 8004284:	e06c      	b.n	8004360 <HAL_DMAEx_List_InsertNode+0x17c>
    }
    /* Add previous node then new node to queue */
    else
    {
      pQList->Head                          = pPrevNode;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	68ba      	ldr	r2, [r7, #8]
 800428a:	601a      	str	r2, [r3, #0]
      pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004292:	4013      	ands	r3, r2
 8004294:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004296:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004298:	4319      	orrs	r1, r3
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->NodeNumber                    = 2U;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2202      	movs	r2, #2
 80042a4:	609a      	str	r2, [r3, #8]
 80042a6:	e05b      	b.n	8004360 <HAL_DMAEx_List_InsertNode+0x17c>
  }
  /* Not empty queue */
  else
  {
    /* Add new node at the head of queue */
    if (pPrevNode == NULL)
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d10f      	bne.n	80042ce <HAL_DMAEx_List_InsertNode+0xea>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	461a      	mov	r2, r3
 80042b4:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80042b8:	4013      	ands	r3, r2
 80042ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80042bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80042be:	4319      	orrs	r1, r3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->Head                         = pNewNode;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	601a      	str	r2, [r3, #0]
 80042cc:	e043      	b.n	8004356 <HAL_DMAEx_List_InsertNode+0x172>
    }
    /* Add new node according to selected position */
    else
    {
      /* Find node and get its position in selected queue */
      node_info.cllr_offset = cllr_offset;
 80042ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042d0:	617b      	str	r3, [r7, #20]
      if (DMA_List_FindNode(pQList, pPrevNode, &node_info) == 0U)
 80042d2:	f107 0314 	add.w	r3, r7, #20
 80042d6:	461a      	mov	r2, r3
 80042d8:	68b9      	ldr	r1, [r7, #8]
 80042da:	68f8      	ldr	r0, [r7, #12]
 80042dc:	f000 fda2 	bl	8004e24 <DMA_List_FindNode>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d132      	bne.n	800434c <HAL_DMAEx_List_InsertNode+0x168>
      {
        /* Selected node is the last queue node */
        if (node_info.currentnode_pos == pQList->NodeNumber)
 80042e6:	69fa      	ldr	r2, [r7, #28]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d11a      	bne.n	8004326 <HAL_DMAEx_List_InsertNode+0x142>
        {
          /* Check if queue is circular */
          if (pQList->FirstCircularNode != NULL)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d00b      	beq.n	8004310 <HAL_DMAEx_List_InsertNode+0x12c>
          {
            pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	461a      	mov	r2, r3
 80042fe:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004302:	4013      	ands	r3, r2
 8004304:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004306:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004308:	4319      	orrs	r1, r3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          }

          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004316:	4013      	ands	r3, r2
 8004318:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800431a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800431c:	4319      	orrs	r1, r3
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004324:	e017      	b.n	8004356 <HAL_DMAEx_List_InsertNode+0x172>
        }
        /* Selected node is not the last queue node */
        else
        {
          pNewNode->LinkRegisters[cllr_offset] = pPrevNode->LinkRegisters[cllr_offset];
 8004326:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004328:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800433c:	4013      	ands	r3, r2
 800433e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004340:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004342:	4319      	orrs	r1, r3
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800434a:	e004      	b.n	8004356 <HAL_DMAEx_List_InsertNode+0x172>
        }
      }
      else
      {
        /* Update the queue error code */
        pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NOTFOUND;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2206      	movs	r2, #6
 8004350:	611a      	str	r2, [r3, #16]

        return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e00b      	b.n	800436e <HAL_DMAEx_List_InsertNode+0x18a>
      }
    }

    /* Increment queue node number */
    pQList->NodeNumber++;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	1c5a      	adds	r2, r3, #1
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	609a      	str	r2, [r3, #8]
  }

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2200      	movs	r2, #0
 8004364:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2201      	movs	r2, #1
 800436a:	731a      	strb	r2, [r3, #12]

  return HAL_OK;
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	3730      	adds	r7, #48	@ 0x30
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}

08004376 <HAL_DMAEx_List_SetCircularMode>:
  * @brief  Set circular mode for linked-list queue.
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularMode(DMA_QListTypeDef *const pQList)
{
 8004376:	b580      	push	{r7, lr}
 8004378:	b08a      	sub	sp, #40	@ 0x28
 800437a:	af00      	add	r7, sp, #0
 800437c:	6078      	str	r0, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue parameter */
  if (pQList == NULL)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d101      	bne.n	8004388 <HAL_DMAEx_List_SetCircularMode+0x12>
  {
    return HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e052      	b.n	800442e <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d104      	bne.n	800439a <HAL_DMAEx_List_SetCircularMode+0x24>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2202      	movs	r2, #2
 8004394:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e049      	b.n	800442e <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d00c      	beq.n	80043bc <HAL_DMAEx_List_SetCircularMode+0x46>
  {
    if (pQList->FirstCircularNode == pQList->Head)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	685a      	ldr	r2, [r3, #4]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d101      	bne.n	80043b2 <HAL_DMAEx_List_SetCircularMode+0x3c>
    {
      return HAL_OK;
 80043ae:	2300      	movs	r3, #0
 80043b0:	e03d      	b.n	800442e <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2204      	movs	r2, #4
 80043b6:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e038      	b.n	800442e <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	695b      	ldr	r3, [r3, #20]
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d104      	bne.n	80043ce <HAL_DMAEx_List_SetCircularMode+0x58>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2204      	movs	r2, #4
 80043c8:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e02f      	b.n	800442e <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2202      	movs	r2, #2
 80043d2:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pQList->Head, &cllr_mask, &cllr_offset);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f107 0220 	add.w	r2, r7, #32
 80043e2:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80043e6:	4618      	mov	r0, r3
 80043e8:	f000 fcec 	bl	8004dc4 <DMA_List_GetCLLRNodeInfo>

  /* Find the last queue node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 80043ec:	6a3b      	ldr	r3, [r7, #32]
 80043ee:	60fb      	str	r3, [r7, #12]
  (void)DMA_List_FindNode(pQList, NULL, &node_info);
 80043f0:	f107 030c 	add.w	r3, r7, #12
 80043f4:	461a      	mov	r2, r3
 80043f6:	2100      	movs	r1, #0
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f000 fd13 	bl	8004e24 <DMA_List_FindNode>

  /* Set circular mode */
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	461a      	mov	r2, r3
 8004404:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004408:	4013      	ands	r3, r2
 800440a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 800440c:	69ba      	ldr	r2, [r7, #24]
 800440e:	4610      	mov	r0, r2
 8004410:	6a3a      	ldr	r2, [r7, #32]
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8004412:	430b      	orrs	r3, r1
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8004414:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Update linked-list circular state */
  pQList->FirstCircularNode = pQList->Head;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	605a      	str	r2, [r3, #4]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2201      	movs	r2, #1
 800442a:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 800442c:	2300      	movs	r3, #0
}
 800442e:	4618      	mov	r0, r3
 8004430:	3728      	adds	r7, #40	@ 0x28
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
	...

08004438 <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 8004438:	b480      	push	{r7}
 800443a:	b085      	sub	sp, #20
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d002      	beq.n	800444e <HAL_DMAEx_List_LinkQ+0x16>
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d101      	bne.n	8004452 <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e072      	b.n	8004538 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Get DMA state */
  state = hdma->State;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004458:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004460:	b2db      	uxtb	r3, r3
 8004462:	2b02      	cmp	r3, #2
 8004464:	d002      	beq.n	800446c <HAL_DMAEx_List_LinkQ+0x34>
 8004466:	7bfb      	ldrb	r3, [r7, #15]
 8004468:	2b05      	cmp	r3, #5
 800446a:	d108      	bne.n	800447e <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2240      	movs	r2, #64	@ 0x40
 8004470:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e05c      	b.n	8004538 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	7b1b      	ldrb	r3, [r3, #12]
 8004482:	b2db      	uxtb	r3, r3
 8004484:	2b02      	cmp	r3, #2
 8004486:	d104      	bne.n	8004492 <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	2201      	movs	r2, #1
 800448c:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e052      	b.n	8004538 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a2b      	ldr	r2, [pc, #172]	@ (8004544 <HAL_DMAEx_List_LinkQ+0x10c>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d022      	beq.n	80044e2 <HAL_DMAEx_List_LinkQ+0xaa>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a29      	ldr	r2, [pc, #164]	@ (8004548 <HAL_DMAEx_List_LinkQ+0x110>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d01d      	beq.n	80044e2 <HAL_DMAEx_List_LinkQ+0xaa>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a28      	ldr	r2, [pc, #160]	@ (800454c <HAL_DMAEx_List_LinkQ+0x114>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d018      	beq.n	80044e2 <HAL_DMAEx_List_LinkQ+0xaa>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a26      	ldr	r2, [pc, #152]	@ (8004550 <HAL_DMAEx_List_LinkQ+0x118>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d013      	beq.n	80044e2 <HAL_DMAEx_List_LinkQ+0xaa>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a25      	ldr	r2, [pc, #148]	@ (8004554 <HAL_DMAEx_List_LinkQ+0x11c>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d00e      	beq.n	80044e2 <HAL_DMAEx_List_LinkQ+0xaa>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a23      	ldr	r2, [pc, #140]	@ (8004558 <HAL_DMAEx_List_LinkQ+0x120>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d009      	beq.n	80044e2 <HAL_DMAEx_List_LinkQ+0xaa>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a22      	ldr	r2, [pc, #136]	@ (800455c <HAL_DMAEx_List_LinkQ+0x124>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d004      	beq.n	80044e2 <HAL_DMAEx_List_LinkQ+0xaa>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a20      	ldr	r2, [pc, #128]	@ (8004560 <HAL_DMAEx_List_LinkQ+0x128>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d101      	bne.n	80044e6 <HAL_DMAEx_List_LinkQ+0xae>
 80044e2:	2301      	movs	r3, #1
 80044e4:	e000      	b.n	80044e8 <HAL_DMAEx_List_LinkQ+0xb0>
 80044e6:	2300      	movs	r3, #0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d10b      	bne.n	8004504 <HAL_DMAEx_List_LinkQ+0xcc>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	6a1b      	ldr	r3, [r3, #32]
 80044f2:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d004      	beq.n	8004504 <HAL_DMAEx_List_LinkQ+0xcc>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	2203      	movs	r2, #3
 80044fe:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e019      	b.n	8004538 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004508:	2b81      	cmp	r3, #129	@ 0x81
 800450a:	d108      	bne.n	800451e <HAL_DMAEx_List_LinkQ+0xe6>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d10d      	bne.n	8004530 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	2204      	movs	r2, #4
 8004518:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e00c      	b.n	8004538 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d004      	beq.n	8004530 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	2204      	movs	r2, #4
 800452a:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e003      	b.n	8004538 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	683a      	ldr	r2, [r7, #0]
 8004534:	675a      	str	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 8004536:	2300      	movs	r3, #0
}
 8004538:	4618      	mov	r0, r3
 800453a:	3714      	adds	r7, #20
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr
 8004544:	40021650 	.word	0x40021650
 8004548:	400216d0 	.word	0x400216d0
 800454c:	40021750 	.word	0x40021750
 8004550:	400217d0 	.word	0x400217d0
 8004554:	52000650 	.word	0x52000650
 8004558:	520006d0 	.word	0x520006d0
 800455c:	52000750 	.word	0x52000750
 8004560:	520007d0 	.word	0x520007d0

08004564 <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 8004564:	b480      	push	{r7}
 8004566:	b085      	sub	sp, #20
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004574:	4313      	orrs	r3, r2
 8004576:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if ((IS_HPDMA_INSTANCE(hdma->Instance) != 0U) || (IS_GPDMA_INSTANCE(hdma->Instance) != 0U))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a7a      	ldr	r2, [pc, #488]	@ (8004768 <DMA_List_Init+0x204>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d04a      	beq.n	8004618 <DMA_List_Init+0xb4>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a79      	ldr	r2, [pc, #484]	@ (800476c <DMA_List_Init+0x208>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d045      	beq.n	8004618 <DMA_List_Init+0xb4>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a77      	ldr	r2, [pc, #476]	@ (8004770 <DMA_List_Init+0x20c>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d040      	beq.n	8004618 <DMA_List_Init+0xb4>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a76      	ldr	r2, [pc, #472]	@ (8004774 <DMA_List_Init+0x210>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d03b      	beq.n	8004618 <DMA_List_Init+0xb4>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a74      	ldr	r2, [pc, #464]	@ (8004778 <DMA_List_Init+0x214>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d036      	beq.n	8004618 <DMA_List_Init+0xb4>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a73      	ldr	r2, [pc, #460]	@ (800477c <DMA_List_Init+0x218>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d031      	beq.n	8004618 <DMA_List_Init+0xb4>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a71      	ldr	r2, [pc, #452]	@ (8004780 <DMA_List_Init+0x21c>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d02c      	beq.n	8004618 <DMA_List_Init+0xb4>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a70      	ldr	r2, [pc, #448]	@ (8004784 <DMA_List_Init+0x220>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d027      	beq.n	8004618 <DMA_List_Init+0xb4>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a6e      	ldr	r2, [pc, #440]	@ (8004788 <DMA_List_Init+0x224>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d022      	beq.n	8004618 <DMA_List_Init+0xb4>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a6d      	ldr	r2, [pc, #436]	@ (800478c <DMA_List_Init+0x228>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d01d      	beq.n	8004618 <DMA_List_Init+0xb4>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a6b      	ldr	r2, [pc, #428]	@ (8004790 <DMA_List_Init+0x22c>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d018      	beq.n	8004618 <DMA_List_Init+0xb4>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a6a      	ldr	r2, [pc, #424]	@ (8004794 <DMA_List_Init+0x230>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d013      	beq.n	8004618 <DMA_List_Init+0xb4>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a68      	ldr	r2, [pc, #416]	@ (8004798 <DMA_List_Init+0x234>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d00e      	beq.n	8004618 <DMA_List_Init+0xb4>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a67      	ldr	r2, [pc, #412]	@ (800479c <DMA_List_Init+0x238>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d009      	beq.n	8004618 <DMA_List_Init+0xb4>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a65      	ldr	r2, [pc, #404]	@ (80047a0 <DMA_List_Init+0x23c>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d004      	beq.n	8004618 <DMA_List_Init+0xb4>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a64      	ldr	r2, [pc, #400]	@ (80047a4 <DMA_List_Init+0x240>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d101      	bne.n	800461c <DMA_List_Init+0xb8>
 8004618:	2301      	movs	r3, #1
 800461a:	e000      	b.n	800461e <DMA_List_Init+0xba>
 800461c:	2300      	movs	r3, #0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d154      	bne.n	80046cc <DMA_List_Init+0x168>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a60      	ldr	r2, [pc, #384]	@ (80047a8 <DMA_List_Init+0x244>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d04a      	beq.n	80046c2 <DMA_List_Init+0x15e>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a5e      	ldr	r2, [pc, #376]	@ (80047ac <DMA_List_Init+0x248>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d045      	beq.n	80046c2 <DMA_List_Init+0x15e>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a5d      	ldr	r2, [pc, #372]	@ (80047b0 <DMA_List_Init+0x24c>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d040      	beq.n	80046c2 <DMA_List_Init+0x15e>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a5b      	ldr	r2, [pc, #364]	@ (80047b4 <DMA_List_Init+0x250>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d03b      	beq.n	80046c2 <DMA_List_Init+0x15e>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a5a      	ldr	r2, [pc, #360]	@ (80047b8 <DMA_List_Init+0x254>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d036      	beq.n	80046c2 <DMA_List_Init+0x15e>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a58      	ldr	r2, [pc, #352]	@ (80047bc <DMA_List_Init+0x258>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d031      	beq.n	80046c2 <DMA_List_Init+0x15e>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a57      	ldr	r2, [pc, #348]	@ (80047c0 <DMA_List_Init+0x25c>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d02c      	beq.n	80046c2 <DMA_List_Init+0x15e>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a55      	ldr	r2, [pc, #340]	@ (80047c4 <DMA_List_Init+0x260>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d027      	beq.n	80046c2 <DMA_List_Init+0x15e>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a54      	ldr	r2, [pc, #336]	@ (80047c8 <DMA_List_Init+0x264>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d022      	beq.n	80046c2 <DMA_List_Init+0x15e>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a52      	ldr	r2, [pc, #328]	@ (80047cc <DMA_List_Init+0x268>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d01d      	beq.n	80046c2 <DMA_List_Init+0x15e>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a51      	ldr	r2, [pc, #324]	@ (80047d0 <DMA_List_Init+0x26c>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d018      	beq.n	80046c2 <DMA_List_Init+0x15e>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a4f      	ldr	r2, [pc, #316]	@ (80047d4 <DMA_List_Init+0x270>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d013      	beq.n	80046c2 <DMA_List_Init+0x15e>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a4e      	ldr	r2, [pc, #312]	@ (80047d8 <DMA_List_Init+0x274>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d00e      	beq.n	80046c2 <DMA_List_Init+0x15e>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a4c      	ldr	r2, [pc, #304]	@ (80047dc <DMA_List_Init+0x278>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d009      	beq.n	80046c2 <DMA_List_Init+0x15e>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a4b      	ldr	r2, [pc, #300]	@ (80047e0 <DMA_List_Init+0x27c>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d004      	beq.n	80046c2 <DMA_List_Init+0x15e>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a49      	ldr	r2, [pc, #292]	@ (80047e4 <DMA_List_Init+0x280>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d101      	bne.n	80046c6 <DMA_List_Init+0x162>
 80046c2:	2301      	movs	r3, #1
 80046c4:	e000      	b.n	80046c8 <DMA_List_Init+0x164>
 80046c6:	2300      	movs	r3, #0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d004      	beq.n	80046d6 <DMA_List_Init+0x172>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	695b      	ldr	r3, [r3, #20]
 80046dc:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	68fa      	ldr	r2, [r7, #12]
 80046e6:	430a      	orrs	r2, r1
 80046e8:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	2200      	movs	r2, #0
 80046f0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80046fa:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2200      	movs	r2, #0
 8004702:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	2200      	movs	r2, #0
 800470a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2200      	movs	r2, #0
 8004712:	651a      	str	r2, [r3, #80]	@ 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a2f      	ldr	r2, [pc, #188]	@ (80047d8 <DMA_List_Init+0x274>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d022      	beq.n	8004764 <DMA_List_Init+0x200>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a2e      	ldr	r2, [pc, #184]	@ (80047dc <DMA_List_Init+0x278>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d01d      	beq.n	8004764 <DMA_List_Init+0x200>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a2c      	ldr	r2, [pc, #176]	@ (80047e0 <DMA_List_Init+0x27c>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d018      	beq.n	8004764 <DMA_List_Init+0x200>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a2b      	ldr	r2, [pc, #172]	@ (80047e4 <DMA_List_Init+0x280>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d013      	beq.n	8004764 <DMA_List_Init+0x200>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a15      	ldr	r2, [pc, #84]	@ (8004798 <DMA_List_Init+0x234>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d00e      	beq.n	8004764 <DMA_List_Init+0x200>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a14      	ldr	r2, [pc, #80]	@ (800479c <DMA_List_Init+0x238>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d009      	beq.n	8004764 <DMA_List_Init+0x200>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a12      	ldr	r2, [pc, #72]	@ (80047a0 <DMA_List_Init+0x23c>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d004      	beq.n	8004764 <DMA_List_Init+0x200>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a11      	ldr	r2, [pc, #68]	@ (80047a4 <DMA_List_Init+0x240>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d141      	bne.n	80047e8 <DMA_List_Init+0x284>
 8004764:	2301      	movs	r3, #1
 8004766:	e040      	b.n	80047ea <DMA_List_Init+0x286>
 8004768:	52000050 	.word	0x52000050
 800476c:	520000d0 	.word	0x520000d0
 8004770:	52000150 	.word	0x52000150
 8004774:	520001d0 	.word	0x520001d0
 8004778:	52000250 	.word	0x52000250
 800477c:	520002d0 	.word	0x520002d0
 8004780:	52000350 	.word	0x52000350
 8004784:	520003d0 	.word	0x520003d0
 8004788:	52000450 	.word	0x52000450
 800478c:	520004d0 	.word	0x520004d0
 8004790:	52000550 	.word	0x52000550
 8004794:	520005d0 	.word	0x520005d0
 8004798:	52000650 	.word	0x52000650
 800479c:	520006d0 	.word	0x520006d0
 80047a0:	52000750 	.word	0x52000750
 80047a4:	520007d0 	.word	0x520007d0
 80047a8:	40021050 	.word	0x40021050
 80047ac:	400210d0 	.word	0x400210d0
 80047b0:	40021150 	.word	0x40021150
 80047b4:	400211d0 	.word	0x400211d0
 80047b8:	40021250 	.word	0x40021250
 80047bc:	400212d0 	.word	0x400212d0
 80047c0:	40021350 	.word	0x40021350
 80047c4:	400213d0 	.word	0x400213d0
 80047c8:	40021450 	.word	0x40021450
 80047cc:	400214d0 	.word	0x400214d0
 80047d0:	40021550 	.word	0x40021550
 80047d4:	400215d0 	.word	0x400215d0
 80047d8:	40021650 	.word	0x40021650
 80047dc:	400216d0 	.word	0x400216d0
 80047e0:	40021750 	.word	0x40021750
 80047e4:	400217d0 	.word	0x400217d0
 80047e8:	2300      	movs	r3, #0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d007      	beq.n	80047fe <DMA_List_Init+0x29a>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	2200      	movs	r2, #0
 80047f4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2200      	movs	r2, #0
 80047fc:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2200      	movs	r2, #0
 8004804:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8004806:	bf00      	nop
 8004808:	3714      	adds	r7, #20
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr
 8004812:	bf00      	nop

08004814 <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 8004814:	b480      	push	{r7}
 8004816:	b085      	sub	sp, #20
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8004826:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 800482c:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8004832:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 8004838:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	601a      	str	r2, [r3, #0]


  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & (DMA_CHANNEL_TYPE_GPDMA | DMA_CHANNEL_TYPE_HPDMA)) != 0U)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004846:	2b00      	cmp	r3, #0
 8004848:	d017      	beq.n	800487a <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004856:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800485c:	3b01      	subs	r3, #1
 800485e:	051b      	lsls	r3, r3, #20
 8004860:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8004864:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800486a:	3b01      	subs	r3, #1
 800486c:	011b      	lsls	r3, r3, #4
 800486e:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8004872:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8004874:	431a      	orrs	r2, r3
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6859      	ldr	r1, [r3, #4]
 8004882:	f240 237f 	movw	r3, #639	@ 0x27f
 8004886:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8004888:	431a      	orrs	r2, r3
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004896:	d10c      	bne.n	80048b2 <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA OR HPDMA */
    if ((pNodeConfig->NodeType & (DMA_CHANNEL_TYPE_GPDMA | DMA_CHANNEL_TYPE_HPDMA)) != 0U)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d011      	beq.n	80048c8 <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	605a      	str	r2, [r3, #4]
 80048b0:	e00a      	b.n	80048c8 <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048ba:	d105      	bne.n	80048c8 <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Configure HW Peripheral flow control selection */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= pNodeConfig->Init.Mode;
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	685a      	ldr	r2, [r3, #4]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048d0:	431a      	orrs	r2, r3
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	605a      	str	r2, [r3, #4]

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d00f      	beq.n	80048fe <DMA_List_BuildNode+0xea>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048ea:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048f0:	041b      	lsls	r3, r3, #16
 80048f2:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 80048f6:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 80048f8:	431a      	orrs	r2, r3
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004902:	b29a      	uxth	r2, r3
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 0302 	and.w	r3, r3, #2
 8004910:	2b00      	cmp	r3, #0
 8004912:	d04e      	beq.n	80049b2 <DMA_List_BuildNode+0x19e>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800491c:	3b01      	subs	r3, #1
 800491e:	0419      	lsls	r1, r3, #16
 8004920:	4b6a      	ldr	r3, [pc, #424]	@ (8004acc <DMA_List_BuildNode+0x2b8>)
 8004922:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8004924:	431a      	orrs	r2, r3
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800492e:	2b00      	cmp	r3, #0
 8004930:	da06      	bge.n	8004940 <DMA_List_BuildNode+0x12c>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	609a      	str	r2, [r3, #8]
 800493e:	e005      	b.n	800494c <DMA_List_BuildNode+0x138>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004950:	2b00      	cmp	r3, #0
 8004952:	da06      	bge.n	8004962 <DMA_List_BuildNode+0x14e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	609a      	str	r2, [r3, #8]
 8004960:	e005      	b.n	800496e <DMA_List_BuildNode+0x15a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004972:	2b00      	cmp	r3, #0
 8004974:	da06      	bge.n	8004984 <DMA_List_BuildNode+0x170>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	609a      	str	r2, [r3, #8]
 8004982:	e005      	b.n	8004990 <DMA_List_BuildNode+0x17c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004994:	2b00      	cmp	r3, #0
 8004996:	da06      	bge.n	80049a6 <DMA_List_BuildNode+0x192>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	609a      	str	r2, [r3, #8]
 80049a4:	e005      	b.n	80049b2 <DMA_List_BuildNode+0x19e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0302 	and.w	r3, r3, #2
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d05d      	beq.n	8004a8a <DMA_List_BuildNode+0x276>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	da09      	bge.n	80049ea <DMA_List_BuildNode+0x1d6>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049da:	425b      	negs	r3, r3
 80049dc:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f3c3 020c 	ubfx	r2, r3, #0, #13
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	615a      	str	r2, [r3, #20]
 80049e8:	e005      	b.n	80049f6 <DMA_List_BuildNode+0x1e2>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049ee:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	da0d      	bge.n	8004a1a <DMA_List_BuildNode+0x206>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a02:	425b      	negs	r3, r3
 8004a04:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	695a      	ldr	r2, [r3, #20]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	0419      	lsls	r1, r3, #16
 8004a0e:	4b30      	ldr	r3, [pc, #192]	@ (8004ad0 <DMA_List_BuildNode+0x2bc>)
 8004a10:	400b      	ands	r3, r1
 8004a12:	431a      	orrs	r2, r3
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	615a      	str	r2, [r3, #20]
 8004a18:	e009      	b.n	8004a2e <DMA_List_BuildNode+0x21a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a22:	0419      	lsls	r1, r3, #16
 8004a24:	4b2a      	ldr	r3, [pc, #168]	@ (8004ad0 <DMA_List_BuildNode+0x2bc>)
 8004a26:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8004a28:	431a      	orrs	r2, r3
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	da08      	bge.n	8004a48 <DMA_List_BuildNode+0x234>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a3a:	425b      	negs	r3, r3
 8004a3c:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	b29a      	uxth	r2, r3
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	619a      	str	r2, [r3, #24]
 8004a46:	e004      	b.n	8004a52 <DMA_List_BuildNode+0x23e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a4c:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	da0b      	bge.n	8004a72 <DMA_List_BuildNode+0x25e>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a5e:	425b      	negs	r3, r3
 8004a60:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8004a6a:	431a      	orrs	r2, r3
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	619a      	str	r2, [r3, #24]
 8004a70:	e007      	b.n	8004a82 <DMA_List_BuildNode+0x26e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a7a:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8004a7c:	431a      	orrs	r2, r3
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	619a      	str	r2, [r3, #24]
    }
    /********************************************************************************* CBR2 register value is updated */

    /* Update CLLR register value *************************************************************************************/
    /* Reset CLLR Register value : channel linked-list address register offset */
    pNode->LinkRegisters[NODE_CLLR_2D_DEFAULT_OFFSET] = 0U;
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	2200      	movs	r2, #0
 8004a86:	61da      	str	r2, [r3, #28]
 8004a88:	e002      	b.n	8004a90 <DMA_List_BuildNode+0x27c>
  }
  else
  {
    /* Update CLLR register value *************************************************************************************/
    /* Reset CLLR Register value : channel linked-list address register offset */
    pNode->LinkRegisters[NODE_CLLR_LINEAR_DEFAULT_OFFSET] = 0U;
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CLLR register value is cleared */
  }

  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0302 	and.w	r3, r3, #2
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d006      	beq.n	8004ab2 <DMA_List_BuildNode+0x29e>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	6a1b      	ldr	r3, [r3, #32]
 8004aa8:	f443 62e0 	orr.w	r2, r3, #1792	@ 0x700
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 8004ab0:	e005      	b.n	8004abe <DMA_List_BuildNode+0x2aa>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	6a1b      	ldr	r3, [r3, #32]
 8004ab6:	f443 62a0 	orr.w	r2, r3, #1280	@ 0x500
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	621a      	str	r2, [r3, #32]
}
 8004abe:	bf00      	nop
 8004ac0:	3714      	adds	r7, #20
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr
 8004aca:	bf00      	nop
 8004acc:	07ff0000 	.word	0x07ff0000
 8004ad0:	1fff0000 	.word	0x1fff0000

08004ad4 <DMA_List_GetNodeConfig>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                   DMA_NodeTypeDef const *const pNode)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b085      	sub	sp, #20
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	6039      	str	r1, [r7, #0]
  uint16_t offset;

  /* Get node information *********************************************************************************************/
  pNodeConfig->NodeType = (pNode->NodeInfo & NODE_TYPE_MASK);
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	6a1b      	ldr	r3, [r3, #32]
 8004ae2:	b2da      	uxtb	r2, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	601a      	str	r2, [r3, #0]
  /*************************************************************************************** Node type value is updated */


  /* Get CTR1 fields values *******************************************************************************************/
  pNodeConfig->Init.SrcInc                      = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SINC;
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 0208 	and.w	r2, r3, #8
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	611a      	str	r2, [r3, #16]
  pNodeConfig->Init.DestInc                     = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DINC;
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f403 2200 	and.w	r2, r3, #524288	@ 0x80000
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	615a      	str	r2, [r3, #20]
  pNodeConfig->Init.SrcDataWidth                = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SDW_LOG2;
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0203 	and.w	r2, r3, #3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	619a      	str	r2, [r3, #24]
  pNodeConfig->Init.DestDataWidth               = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DDW_LOG2;
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	61da      	str	r2, [r3, #28]
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_SBL_1) >> DMA_CTR1_SBL_1_Pos) + 1U;
 8004b1c:	091b      	lsrs	r3, r3, #4
 8004b1e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b22:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	625a      	str	r2, [r3, #36]	@ 0x24
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_DBL_1) >> DMA_CTR1_DBL_1_Pos) + 1U;
 8004b2c:	0d1b      	lsrs	r3, r3, #20
 8004b2e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b32:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	629a      	str	r2, [r3, #40]	@ 0x28
  pNodeConfig->Init.TransferAllocatedPort       = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 2240 	and.w	r2, r3, #1073758208	@ 0x40004000
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	62da      	str	r2, [r3, #44]	@ 0x2c
                                                  (DMA_CTR1_SAP | DMA_CTR1_DAP);
  pNodeConfig->DataHandlingConfig.DataExchange  = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	4b66      	ldr	r3, [pc, #408]	@ (8004ce4 <DMA_List_GetNodeConfig+0x210>)
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	6393      	str	r3, [r2, #56]	@ 0x38
                                                  (DMA_CTR1_SBX | DMA_CTR1_DBX | DMA_CTR1_DHX | DMA_CTR1_DWX);
  pNodeConfig->DataHandlingConfig.DataAlignment = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_PAM;
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f403 52c0 	and.w	r2, r3, #6144	@ 0x1800
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /*********************************************************************************** CTR1 fields values are updated */


  /* Get CTR2 fields values *******************************************************************************************/
  if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_SWREQ) != 0U)
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d008      	beq.n	8004b7a <DMA_List_GetNodeConfig+0xa6>
  {
    pNodeConfig->Init.Request   = DMA_REQUEST_SW;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b6e:	605a      	str	r2, [r3, #4]
    pNodeConfig->Init.Direction = DMA_MEMORY_TO_MEMORY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b76:	60da      	str	r2, [r3, #12]
 8004b78:	e013      	b.n	8004ba2 <DMA_List_GetNodeConfig+0xce>
  }
  else
  {
    pNodeConfig->Init.Request   = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_REQSEL;
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	605a      	str	r2, [r3, #4]

    if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_DREQ) != 0U)
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d004      	beq.n	8004b9c <DMA_List_GetNodeConfig+0xc8>
    {
      pNodeConfig->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004b98:	60da      	str	r2, [r3, #12]
 8004b9a:	e002      	b.n	8004ba2 <DMA_List_GetNodeConfig+0xce>
    }
    else
    {
      pNodeConfig->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	60da      	str	r2, [r3, #12]
    }
  }

  pNodeConfig->Init.BlkHWRequest              = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_BREQ);
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	609a      	str	r2, [r3, #8]
  pNodeConfig->TriggerConfig.TriggerMode      = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGM;
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	641a      	str	r2, [r3, #64]	@ 0x40
  pNodeConfig->TriggerConfig.TriggerPolarity  = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGPOL;
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	645a      	str	r2, [r3, #68]	@ 0x44
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	685b      	ldr	r3, [r3, #4]
                                                 DMA_CTR2_TRIGSEL) >> DMA_CTR2_TRIGSEL_Pos;
 8004bca:	0c1b      	lsrs	r3, r3, #16
 8004bcc:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	649a      	str	r2, [r3, #72]	@ 0x48
  pNodeConfig->Init.TransferEventMode         = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TCEM;
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	631a      	str	r2, [r3, #48]	@ 0x30
  /*********************************************************************************** CTR2 fields values are updated */


  /* Get CBR1 fields **************************************************************************************************/
  pNodeConfig->DataSize = pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BNDT;
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	b29a      	uxth	r2, r3
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	669a      	str	r2, [r3, #104]	@ 0x68

  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 0302 	and.w	r3, r3, #2
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d008      	beq.n	8004c08 <DMA_List_GetNodeConfig+0x134>
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount =
      ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRC) >> DMA_CBR1_BRC_Pos) + 1U;
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	0c1b      	lsrs	r3, r3, #16
 8004bfc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c00:	1c5a      	adds	r2, r3, #1
    pNodeConfig->RepeatBlockConfig.RepeatCount =
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004c06:	e002      	b.n	8004c0e <DMA_List_GetNodeConfig+0x13a>
  }
  else
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount = 1U;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
  /*********************************************************************************** CBR1 fields values are updated */


  /* Get CSAR field ***************************************************************************************************/
  pNodeConfig->SrcAddress = pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET];
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	68da      	ldr	r2, [r3, #12]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	661a      	str	r2, [r3, #96]	@ 0x60
  /************************************************************************************** CSAR field value is updated */


  /* Get CDAR field ***************************************************************************************************/
  pNodeConfig->DstAddress = pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET];
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	691a      	ldr	r2, [r3, #16]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	665a      	str	r2, [r3, #100]	@ 0x64
  /************************************************************************************** CDAR field value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 0302 	and.w	r3, r3, #2
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d04a      	beq.n	8004cc0 <DMA_List_GetNodeConfig+0x1ec>
  {
    /* Get CTR3 field *************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_SAO);
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	695b      	ldr	r3, [r3, #20]
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004c34:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset  = (int32_t)offset;
 8004c36:	89fa      	ldrh	r2, [r7, #14]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	651a      	str	r2, [r3, #80]	@ 0x50

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_DAO) >> DMA_CTR3_DAO_Pos);
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	695b      	ldr	r3, [r3, #20]
 8004c40:	0c1b      	lsrs	r3, r3, #16
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004c48:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.DestAddrOffset = (int32_t)offset;
 8004c4a:	89fa      	ldrh	r2, [r7, #14]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	655a      	str	r2, [r3, #84]	@ 0x54

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_SDEC) != 0U)
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d004      	beq.n	8004c66 <DMA_List_GetNodeConfig+0x192>
    {
      pNodeConfig->RepeatBlockConfig.SrcAddrOffset *= (-1);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c60:	425a      	negs	r2, r3
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_DDEC) != 0U)
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d004      	beq.n	8004c7c <DMA_List_GetNodeConfig+0x1a8>
    {
      pNodeConfig->RepeatBlockConfig.DestAddrOffset *= (-1);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c76:	425a      	negs	r2, r3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    /************************************************************************************ CTR3 field value is updated */


    /* Get CBR2 fields ************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRSAO);
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	699b      	ldr	r3, [r3, #24]
 8004c80:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset = (int32_t)offset;
 8004c82:	89fa      	ldrh	r2, [r7, #14]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	659a      	str	r2, [r3, #88]	@ 0x58

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRDAO) >> DMA_CBR2_BRDAO_Pos);
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	699b      	ldr	r3, [r3, #24]
 8004c8c:	0c1b      	lsrs	r3, r3, #16
 8004c8e:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = (int32_t)offset;
 8004c90:	89fa      	ldrh	r2, [r7, #14]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	65da      	str	r2, [r3, #92]	@ 0x5c

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRSDEC) != 0U)
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d004      	beq.n	8004cac <DMA_List_GetNodeConfig+0x1d8>
    {
      pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset *= (-1);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ca6:	425a      	negs	r2, r3
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRDDEC) != 0U)
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	da11      	bge.n	8004cd8 <DMA_List_GetNodeConfig+0x204>
    {
      pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset *= (-1);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cb8:	425a      	negs	r2, r3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Get CBR2 fields ************************************************************************************************/
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
    /************************************************************************************ CBR2 field value is updated */
  }
}
 8004cbe:	e00b      	b.n	8004cd8 <DMA_List_GetNodeConfig+0x204>
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset     = 0;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	651a      	str	r2, [r3, #80]	@ 0x50
    pNodeConfig->RepeatBlockConfig.DestAddrOffset    = 0;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	655a      	str	r2, [r3, #84]	@ 0x54
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	659a      	str	r2, [r3, #88]	@ 0x58
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004cd8:	bf00      	nop
 8004cda:	3714      	adds	r7, #20
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr
 8004ce4:	1c002000 	.word	0x1c002000

08004ce8 <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b087      	sub	sp, #28
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	60b9      	str	r1, [r7, #8]
 8004cf2:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 8004cf4:	68fa      	ldr	r2, [r7, #12]
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	431a      	orrs	r2, r3
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	431a      	orrs	r2, r3
 8004cfe:	4b12      	ldr	r3, [pc, #72]	@ (8004d48 <DMA_List_CheckNodesBaseAddresses+0x60>)
 8004d00:	4013      	ands	r3, r2
 8004d02:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 8004d04:	2300      	movs	r3, #0
 8004d06:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d002      	beq.n	8004d14 <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	617b      	str	r3, [r7, #20]
 8004d12:	e00a      	b.n	8004d2a <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d002      	beq.n	8004d20 <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	617b      	str	r3, [r7, #20]
 8004d1e:	e004      	b.n	8004d2a <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d001      	beq.n	8004d2a <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 8004d2a:	697a      	ldr	r2, [r7, #20]
 8004d2c:	4b06      	ldr	r3, [pc, #24]	@ (8004d48 <DMA_List_CheckNodesBaseAddresses+0x60>)
 8004d2e:	4013      	ands	r3, r2
 8004d30:	693a      	ldr	r2, [r7, #16]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d001      	beq.n	8004d3a <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e000      	b.n	8004d3c <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 8004d3a:	2300      	movs	r3, #0
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	371c      	adds	r7, #28
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr
 8004d48:	ffff0000 	.word	0xffff0000

08004d4c <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b087      	sub	sp, #28
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	60b9      	str	r1, [r7, #8]
 8004d56:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d004      	beq.n	8004d6c <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	6a1b      	ldr	r3, [r3, #32]
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	617b      	str	r3, [r7, #20]
 8004d6a:	e00e      	b.n	8004d8a <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d004      	beq.n	8004d7c <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	6a1b      	ldr	r3, [r3, #32]
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	617b      	str	r3, [r7, #20]
 8004d7a:	e006      	b.n	8004d8a <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d003      	beq.n	8004d8a <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a1b      	ldr	r3, [r3, #32]
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d007      	beq.n	8004da0 <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	6a1b      	ldr	r3, [r3, #32]
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	697a      	ldr	r2, [r7, #20]
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d001      	beq.n	8004da0 <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 8004d9c:	2302      	movs	r3, #2
 8004d9e:	e00b      	b.n	8004db8 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d007      	beq.n	8004db6 <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a1b      	ldr	r3, [r3, #32]
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	697a      	ldr	r2, [r7, #20]
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d001      	beq.n	8004db6 <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e000      	b.n	8004db8 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 8004db6:	2300      	movs	r3, #0
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	371c      	adds	r7, #28
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr

08004dc4 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b085      	sub	sp, #20
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	60f8      	str	r0, [r7, #12]
 8004dcc:	60b9      	str	r1, [r7, #8]
 8004dce:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6a1b      	ldr	r3, [r3, #32]
 8004dd4:	f003 0302 	and.w	r3, r3, #2
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d00c      	beq.n	8004df6 <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d002      	beq.n	8004de8 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	4a0d      	ldr	r2, [pc, #52]	@ (8004e1c <DMA_List_GetCLLRNodeInfo+0x58>)
 8004de6:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d00f      	beq.n	8004e0e <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2207      	movs	r2, #7
 8004df2:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8004df4:	e00b      	b.n	8004e0e <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d002      	beq.n	8004e02 <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	4a08      	ldr	r2, [pc, #32]	@ (8004e20 <DMA_List_GetCLLRNodeInfo+0x5c>)
 8004e00:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d002      	beq.n	8004e0e <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2205      	movs	r2, #5
 8004e0c:	601a      	str	r2, [r3, #0]
}
 8004e0e:	bf00      	nop
 8004e10:	3714      	adds	r7, #20
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr
 8004e1a:	bf00      	nop
 8004e1c:	fe010000 	.word	0xfe010000
 8004e20:	f8010000 	.word	0xf8010000

08004e24 <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b089      	sub	sp, #36	@ 0x24
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	60b9      	str	r1, [r7, #8]
 8004e2e:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 8004e30:	2300      	movs	r3, #0
 8004e32:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 8004e34:	2300      	movs	r3, #0
 8004e36:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d144      	bne.n	8004ed2 <DMA_List_FindNode+0xae>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 8004e48:	e01e      	b.n	8004e88 <DMA_List_FindNode+0x64>
    {
      /* Get head node address */
      if (node_idx == 0U)
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d107      	bne.n	8004e60 <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	461a      	mov	r2, r3
 8004e56:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	61bb      	str	r3, [r7, #24]
 8004e5e:	e010      	b.n	8004e82 <DMA_List_FindNode+0x5e>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8004e60:	69bb      	ldr	r3, [r7, #24]
 8004e62:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	461a      	mov	r2, r3
 8004e6a:	4b40      	ldr	r3, [pc, #256]	@ (8004f6c <DMA_List_FindNode+0x148>)
 8004e6c:	4013      	ands	r3, r2
          ((DMA_NodeTypeDef *)(currentnode_address +
 8004e6e:	69ba      	ldr	r2, [r7, #24]
 8004e70:	4413      	add	r3, r2
 8004e72:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8004e7a:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004e7e:	4013      	ands	r3, r2
 8004e80:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	3301      	adds	r3, #1
 8004e86:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	69fa      	ldr	r2, [r7, #28]
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d3db      	bcc.n	8004e4a <DMA_List_FindNode+0x26>
 8004e92:	e02a      	b.n	8004eea <DMA_List_FindNode+0xc6>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d107      	bne.n	8004eaa <DMA_List_FindNode+0x86>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	61bb      	str	r3, [r7, #24]
 8004ea8:	e010      	b.n	8004ecc <DMA_List_FindNode+0xa8>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8004eaa:	69bb      	ldr	r3, [r7, #24]
 8004eac:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	4b2d      	ldr	r3, [pc, #180]	@ (8004f6c <DMA_List_FindNode+0x148>)
 8004eb6:	4013      	ands	r3, r2
          ((DMA_NodeTypeDef *)(currentnode_address +
 8004eb8:	69ba      	ldr	r2, [r7, #24]
 8004eba:	4413      	add	r3, r2
 8004ebc:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8004ec4:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004ec8:	4013      	ands	r3, r2
 8004eca:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	3301      	adds	r3, #1
 8004ed0:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	69fa      	ldr	r2, [r7, #28]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d206      	bcs.n	8004eea <DMA_List_FindNode+0xc6>
 8004edc:	68ba      	ldr	r2, [r7, #8]
 8004ede:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	69ba      	ldr	r2, [r7, #24]
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d1d4      	bne.n	8004e94 <DMA_List_FindNode+0x70>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d008      	beq.n	8004f02 <DMA_List_FindNode+0xde>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 8004ef0:	68ba      	ldr	r2, [r7, #8]
 8004ef2:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004ef6:	4013      	ands	r3, r2
 8004ef8:	69ba      	ldr	r2, [r7, #24]
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d001      	beq.n	8004f02 <DMA_List_FindNode+0xde>
    {
      return 1U;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e02e      	b.n	8004f60 <DMA_List_FindNode+0x13c>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	69fa      	ldr	r2, [r7, #28]
 8004f06:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	4b17      	ldr	r3, [pc, #92]	@ (8004f6c <DMA_List_FindNode+0x148>)
 8004f10:	4013      	ands	r3, r2
 8004f12:	697a      	ldr	r2, [r7, #20]
 8004f14:	431a      	orrs	r2, r3
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	461a      	mov	r2, r3
 8004f20:	4b12      	ldr	r3, [pc, #72]	@ (8004f6c <DMA_List_FindNode+0x148>)
 8004f22:	4013      	ands	r3, r2
 8004f24:	69ba      	ldr	r2, [r7, #24]
 8004f26:	431a      	orrs	r2, r3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	461a      	mov	r2, r3
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d010      	beq.n	8004f5e <DMA_List_FindNode+0x13a>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	461a      	mov	r2, r3
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f48:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8004f4c:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4619      	mov	r1, r3
 8004f54:	4b05      	ldr	r3, [pc, #20]	@ (8004f6c <DMA_List_FindNode+0x148>)
 8004f56:	400b      	ands	r3, r1
 8004f58:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 8004f5e:	2300      	movs	r3, #0
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3724      	adds	r7, #36	@ 0x24
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr
 8004f6c:	ffff0000 	.word	0xffff0000

08004f70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b087      	sub	sp, #28
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004f7e:	e143      	b.n	8005208 <HAL_GPIO_Init+0x298>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	2101      	movs	r1, #1
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	fa01 f303 	lsl.w	r3, r1, r3
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	f000 8135 	beq.w	8005202 <HAL_GPIO_Init+0x292>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	f003 0303 	and.w	r3, r3, #3
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d005      	beq.n	8004fb0 <HAL_GPIO_Init+0x40>
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	f003 0303 	and.w	r3, r3, #3
 8004fac:	2b02      	cmp	r3, #2
 8004fae:	d130      	bne.n	8005012 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	005b      	lsls	r3, r3, #1
 8004fba:	2203      	movs	r2, #3
 8004fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc0:	43db      	mvns	r3, r3
 8004fc2:	693a      	ldr	r2, [r7, #16]
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	68da      	ldr	r2, [r3, #12]
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	005b      	lsls	r3, r3, #1
 8004fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd4:	693a      	ldr	r2, [r7, #16]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	693a      	ldr	r2, [r7, #16]
 8004fde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	fa02 f303 	lsl.w	r3, r2, r3
 8004fee:	43db      	mvns	r3, r3
 8004ff0:	693a      	ldr	r2, [r7, #16]
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	091b      	lsrs	r3, r3, #4
 8004ffc:	f003 0201 	and.w	r2, r3, #1
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	fa02 f303 	lsl.w	r3, r2, r3
 8005006:	693a      	ldr	r2, [r7, #16]
 8005008:	4313      	orrs	r3, r2
 800500a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	693a      	ldr	r2, [r7, #16]
 8005010:	605a      	str	r2, [r3, #4]
      }

      if (((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) ||
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	f003 0303 	and.w	r3, r3, #3
 800501a:	2b03      	cmp	r3, #3
 800501c:	d109      	bne.n	8005032 <HAL_GPIO_Init+0xc2>
          (((GPIO_Init->Mode & GPIO_MODE) == MODE_ANALOG) && (GPIO_Init->Pull != GPIO_PULLUP)))
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) ||
 8005026:	2b03      	cmp	r3, #3
 8005028:	d11b      	bne.n	8005062 <HAL_GPIO_Init+0xf2>
          (((GPIO_Init->Mode & GPIO_MODE) == MODE_ANALOG) && (GPIO_Init->Pull != GPIO_PULLUP)))
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	2b01      	cmp	r3, #1
 8005030:	d017      	beq.n	8005062 <HAL_GPIO_Init+0xf2>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	68db      	ldr	r3, [r3, #12]
 8005036:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	005b      	lsls	r3, r3, #1
 800503c:	2203      	movs	r2, #3
 800503e:	fa02 f303 	lsl.w	r3, r2, r3
 8005042:	43db      	mvns	r3, r3
 8005044:	693a      	ldr	r2, [r7, #16]
 8005046:	4013      	ands	r3, r2
 8005048:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	689a      	ldr	r2, [r3, #8]
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	005b      	lsls	r3, r3, #1
 8005052:	fa02 f303 	lsl.w	r3, r2, r3
 8005056:	693a      	ldr	r2, [r7, #16]
 8005058:	4313      	orrs	r3, r2
 800505a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	693a      	ldr	r2, [r7, #16]
 8005060:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	f003 0303 	and.w	r3, r3, #3
 800506a:	2b02      	cmp	r3, #2
 800506c:	d123      	bne.n	80050b6 <HAL_GPIO_Init+0x146>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	08da      	lsrs	r2, r3, #3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	3208      	adds	r2, #8
 8005076:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800507a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	f003 0307 	and.w	r3, r3, #7
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	220f      	movs	r2, #15
 8005086:	fa02 f303 	lsl.w	r3, r2, r3
 800508a:	43db      	mvns	r3, r3
 800508c:	693a      	ldr	r2, [r7, #16]
 800508e:	4013      	ands	r3, r2
 8005090:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	691a      	ldr	r2, [r3, #16]
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	f003 0307 	and.w	r3, r3, #7
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	fa02 f303 	lsl.w	r3, r2, r3
 80050a2:	693a      	ldr	r2, [r7, #16]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	08da      	lsrs	r2, r3, #3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	3208      	adds	r2, #8
 80050b0:	6939      	ldr	r1, [r7, #16]
 80050b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	005b      	lsls	r3, r3, #1
 80050c0:	2203      	movs	r2, #3
 80050c2:	fa02 f303 	lsl.w	r3, r2, r3
 80050c6:	43db      	mvns	r3, r3
 80050c8:	693a      	ldr	r2, [r7, #16]
 80050ca:	4013      	ands	r3, r2
 80050cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	f003 0203 	and.w	r2, r3, #3
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	005b      	lsls	r3, r3, #1
 80050da:	fa02 f303 	lsl.w	r3, r2, r3
 80050de:	693a      	ldr	r2, [r7, #16]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	693a      	ldr	r2, [r7, #16]
 80050e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	f000 8085 	beq.w	8005202 <HAL_GPIO_Init+0x292>
      {
        temp = SBS->EXTICR[position >> 2u];
 80050f8:	4a4b      	ldr	r2, [pc, #300]	@ (8005228 <HAL_GPIO_Init+0x2b8>)
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	089b      	lsrs	r3, r3, #2
 80050fe:	334c      	adds	r3, #76	@ 0x4c
 8005100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005104:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << ((position & 0x03u) * SBS_EXTICR1_PC_EXTI1_Pos));
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	f003 0303 	and.w	r3, r3, #3
 800510c:	009b      	lsls	r3, r3, #2
 800510e:	220f      	movs	r2, #15
 8005110:	fa02 f303 	lsl.w	r3, r2, r3
 8005114:	43db      	mvns	r3, r3
 8005116:	693a      	ldr	r2, [r7, #16]
 8005118:	4013      	ands	r3, r2
 800511a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03u) * SBS_EXTICR1_PC_EXTI1_Pos));
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	0a9a      	lsrs	r2, r3, #10
 8005120:	4b42      	ldr	r3, [pc, #264]	@ (800522c <HAL_GPIO_Init+0x2bc>)
 8005122:	4013      	ands	r3, r2
 8005124:	697a      	ldr	r2, [r7, #20]
 8005126:	f002 0203 	and.w	r2, r2, #3
 800512a:	0092      	lsls	r2, r2, #2
 800512c:	4093      	lsls	r3, r2
 800512e:	693a      	ldr	r2, [r7, #16]
 8005130:	4313      	orrs	r3, r2
 8005132:	613b      	str	r3, [r7, #16]
        SBS->EXTICR[position >> 2u] = temp;
 8005134:	493c      	ldr	r1, [pc, #240]	@ (8005228 <HAL_GPIO_Init+0x2b8>)
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	089b      	lsrs	r3, r3, #2
 800513a:	334c      	adds	r3, #76	@ 0x4c
 800513c:	693a      	ldr	r2, [r7, #16]
 800513e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005142:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	43db      	mvns	r3, r3
 800514e:	693a      	ldr	r2, [r7, #16]
 8005150:	4013      	ands	r3, r2
 8005152:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800515c:	2b00      	cmp	r3, #0
 800515e:	d003      	beq.n	8005168 <HAL_GPIO_Init+0x1f8>
        {
          temp |= iocurrent;
 8005160:	693a      	ldr	r2, [r7, #16]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	4313      	orrs	r3, r2
 8005166:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005168:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005170:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	43db      	mvns	r3, r3
 800517c:	693a      	ldr	r2, [r7, #16]
 800517e:	4013      	ands	r3, r2
 8005180:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800518a:	2b00      	cmp	r3, #0
 800518c:	d003      	beq.n	8005196 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800518e:	693a      	ldr	r2, [r7, #16]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	4313      	orrs	r3, r2
 8005194:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005196:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800519e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80051a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	43db      	mvns	r3, r3
 80051ac:	693a      	ldr	r2, [r7, #16]
 80051ae:	4013      	ands	r3, r2
 80051b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d003      	beq.n	80051c6 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 80051be:	693a      	ldr	r2, [r7, #16]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80051c6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        temp = EXTI->IMR1;
 80051d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	43db      	mvns	r3, r3
 80051de:	693a      	ldr	r2, [r7, #16]
 80051e0:	4013      	ands	r3, r2
 80051e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d003      	beq.n	80051f8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80051f0:	693a      	ldr	r2, [r7, #16]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	4313      	orrs	r3, r2
 80051f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80051f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	3301      	adds	r3, #1
 8005206:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	fa22 f303 	lsr.w	r3, r2, r3
 8005212:	2b00      	cmp	r3, #0
 8005214:	f47f aeb4 	bne.w	8004f80 <HAL_GPIO_Init+0x10>
  }
}
 8005218:	bf00      	nop
 800521a:	bf00      	nop
 800521c:	371c      	adds	r7, #28
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr
 8005226:	bf00      	nop
 8005228:	58000400 	.word	0x58000400
 800522c:	0029ff7f 	.word	0x0029ff7f

08005230 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	460b      	mov	r3, r1
 800523a:	807b      	strh	r3, [r7, #2]
 800523c:	4613      	mov	r3, r2
 800523e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005240:	787b      	ldrb	r3, [r7, #1]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d003      	beq.n	800524e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005246:	887a      	ldrh	r2, [r7, #2]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800524c:	e002      	b.n	8005254 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800524e:	887a      	ldrh	r2, [r7, #2]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005254:	bf00      	nop
 8005256:	370c      	adds	r7, #12
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr

08005260 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005260:	b480      	push	{r7}
 8005262:	b085      	sub	sp, #20
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	460b      	mov	r3, r1
 800526a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	695b      	ldr	r3, [r3, #20]
 8005270:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005272:	887a      	ldrh	r2, [r7, #2]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	4013      	ands	r3, r2
 8005278:	041a      	lsls	r2, r3, #16
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	43d9      	mvns	r1, r3
 800527e:	887b      	ldrh	r3, [r7, #2]
 8005280:	400b      	ands	r3, r1
 8005282:	431a      	orrs	r2, r3
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	619a      	str	r2, [r3, #24]
}
 8005288:	bf00      	nop
 800528a:	3714      	adds	r7, #20
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr

08005294 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b082      	sub	sp, #8
 8005298:	af00      	add	r7, sp, #0
 800529a:	4603      	mov	r3, r0
 800529c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0U)
 800529e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052a2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80052a6:	88fb      	ldrh	r3, [r7, #6]
 80052a8:	4013      	ands	r3, r2
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d008      	beq.n	80052c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80052ae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80052b2:	88fb      	ldrh	r3, [r7, #6]
 80052b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80052b8:	88fb      	ldrh	r3, [r7, #6]
 80052ba:	4618      	mov	r0, r3
 80052bc:	f7fb fa54 	bl	8000768 <HAL_GPIO_EXTI_Callback>
  }
}
 80052c0:	bf00      	nop
 80052c2:	3708      	adds	r7, #8
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}

080052c8 <HAL_PWREx_ConfigSupply>:
  *        PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO and PWR_SMPS_1V8_SUPPLIES_EXT are used
  *        only for lines that supports SMPS regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b084      	sub	sp, #16
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Check if supply source was configured */
  if ((PWR->CSR2 & (PWR_CSR2_SDEN | PWR_CSR2_LDOEN | PWR_CSR2_BYPASS)) != (PWR_CSR2_SDEN | PWR_CSR2_LDOEN))
 80052d0:	4b25      	ldr	r3, [pc, #148]	@ (8005368 <HAL_PWREx_ConfigSupply+0xa0>)
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	f003 0307 	and.w	r3, r3, #7
 80052d8:	2b06      	cmp	r3, #6
 80052da:	d00a      	beq.n	80052f2 <HAL_PWREx_ConfigSupply+0x2a>
  {
    /* Check supply configuration */
    if ((PWR->CSR2 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80052dc:	4b22      	ldr	r3, [pc, #136]	@ (8005368 <HAL_PWREx_ConfigSupply+0xa0>)
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	f003 031f 	and.w	r3, r3, #31
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d001      	beq.n	80052ee <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e038      	b.n	8005360 <HAL_PWREx_ConfigSupply+0x98>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80052ee:	2300      	movs	r3, #0
 80052f0:	e036      	b.n	8005360 <HAL_PWREx_ConfigSupply+0x98>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG(PWR->CSR2, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80052f2:	4b1d      	ldr	r3, [pc, #116]	@ (8005368 <HAL_PWREx_ConfigSupply+0xa0>)
 80052f4:	68db      	ldr	r3, [r3, #12]
 80052f6:	f023 021f 	bic.w	r2, r3, #31
 80052fa:	491b      	ldr	r1, [pc, #108]	@ (8005368 <HAL_PWREx_ConfigSupply+0xa0>)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4313      	orrs	r3, r2
 8005300:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005302:	f7fc f9a3 	bl	800164c <HAL_GetTick>
 8005306:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while ((PWR->SR1 & PWR_SR1_ACTVOSRDY) == 0U)
 8005308:	e009      	b.n	800531e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick() - tickstart) > PWR_FLAG_SETTING_DELAY)
 800530a:	f7fc f99f 	bl	800164c <HAL_GetTick>
 800530e:	4602      	mov	r2, r0
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	1ad3      	subs	r3, r2, r3
 8005314:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005318:	d901      	bls.n	800531e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	e020      	b.n	8005360 <HAL_PWREx_ConfigSupply+0x98>
  while ((PWR->SR1 & PWR_SR1_ACTVOSRDY) == 0U)
 800531e:	4b12      	ldr	r3, [pc, #72]	@ (8005368 <HAL_PWREx_ConfigSupply+0xa0>)
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	f003 0302 	and.w	r3, r3, #2
 8005326:	2b00      	cmp	r3, #0
 8005328:	d0ef      	beq.n	800530a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2b1e      	cmp	r3, #30
 800532e:	d002      	beq.n	8005336 <HAL_PWREx_ConfigSupply+0x6e>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2b1d      	cmp	r3, #29
 8005334:	d113      	bne.n	800535e <HAL_PWREx_ConfigSupply+0x96>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick();
 8005336:	f7fc f989 	bl	800164c <HAL_GetTick>
 800533a:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while ((PWR->CSR2 & PWR_CSR2_SDEXTRDY) == 0U)
 800533c:	e009      	b.n	8005352 <HAL_PWREx_ConfigSupply+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PWR_FLAG_SETTING_DELAY)
 800533e:	f7fc f985 	bl	800164c <HAL_GetTick>
 8005342:	4602      	mov	r2, r0
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	1ad3      	subs	r3, r2, r3
 8005348:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800534c:	d901      	bls.n	8005352 <HAL_PWREx_ConfigSupply+0x8a>
      {
        return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e006      	b.n	8005360 <HAL_PWREx_ConfigSupply+0x98>
    while ((PWR->CSR2 & PWR_CSR2_SDEXTRDY) == 0U)
 8005352:	4b05      	ldr	r3, [pc, #20]	@ (8005368 <HAL_PWREx_ConfigSupply+0xa0>)
 8005354:	68db      	ldr	r3, [r3, #12]
 8005356:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800535a:	2b00      	cmp	r3, #0
 800535c:	d0ef      	beq.n	800533e <HAL_PWREx_ConfigSupply+0x76>
      }
    }
  }
  return HAL_OK;
 800535e:	2300      	movs	r3, #0
}
 8005360:	4618      	mov	r0, r3
 8005362:	3710      	adds	r7, #16
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}
 8005368:	58024800 	.word	0x58024800

0800536c <HAL_PWREx_ControlVoltageScaling>:
  * @note When exiting from Stop mode or Standby mode, the Run mode voltage
  *       scaling is reset to the default VOS low value.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR_VOLTAGE(VoltageScaling));

  /* Set the voltage range */
  MODIFY_REG(PWR->CSR4, PWR_CSR4_VOS, VoltageScaling);
 8005374:	4b10      	ldr	r3, [pc, #64]	@ (80053b8 <HAL_PWREx_ControlVoltageScaling+0x4c>)
 8005376:	695b      	ldr	r3, [r3, #20]
 8005378:	f023 0201 	bic.w	r2, r3, #1
 800537c:	490e      	ldr	r1, [pc, #56]	@ (80053b8 <HAL_PWREx_ControlVoltageScaling+0x4c>)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4313      	orrs	r3, r2
 8005382:	614b      	str	r3, [r1, #20]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005384:	f7fc f962 	bl	800164c <HAL_GetTick>
 8005388:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while ((PWR->CSR4 & PWR_CSR4_VOSRDY) == 0U)
 800538a:	e009      	b.n	80053a0 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    if ((HAL_GetTick() - tickstart) > PWR_FLAG_SETTING_DELAY)
 800538c:	f7fc f95e 	bl	800164c <HAL_GetTick>
 8005390:	4602      	mov	r2, r0
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	1ad3      	subs	r3, r2, r3
 8005396:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800539a:	d901      	bls.n	80053a0 <HAL_PWREx_ControlVoltageScaling+0x34>
    {
      return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e006      	b.n	80053ae <HAL_PWREx_ControlVoltageScaling+0x42>
  while ((PWR->CSR4 & PWR_CSR4_VOSRDY) == 0U)
 80053a0:	4b05      	ldr	r3, [pc, #20]	@ (80053b8 <HAL_PWREx_ControlVoltageScaling+0x4c>)
 80053a2:	695b      	ldr	r3, [r3, #20]
 80053a4:	f003 0302 	and.w	r3, r3, #2
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d0ef      	beq.n	800538c <HAL_PWREx_ControlVoltageScaling+0x20>
    }
  }

  return HAL_OK;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3710      	adds	r7, #16
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop
 80053b8:	58024800 	.word	0x58024800

080053bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b088      	sub	sp, #32
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  uint32_t pllsrc;
  uint32_t pllrdy;
  uint32_t tmpreg1;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d101      	bne.n	80053ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	e328      	b.n	8005a20 <HAL_RCC_OscConfig+0x664>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053ce:	4b97      	ldr	r3, [pc, #604]	@ (800562c <HAL_RCC_OscConfig+0x270>)
 80053d0:	691b      	ldr	r3, [r3, #16]
 80053d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80053d6:	61fb      	str	r3, [r7, #28]
  pllsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80053d8:	4b94      	ldr	r3, [pc, #592]	@ (800562c <HAL_RCC_OscConfig+0x270>)
 80053da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053dc:	f003 0303 	and.w	r3, r3, #3
 80053e0:	61bb      	str	r3, [r7, #24]
  pllrdy = RCC->CR & (RCC_CR_PLL1RDY | RCC_CR_PLL2RDY | RCC_CR_PLL3RDY);
 80053e2:	4b92      	ldr	r3, [pc, #584]	@ (800562c <HAL_RCC_OscConfig+0x270>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 5328 	and.w	r3, r3, #704643072	@ 0x2a000000
 80053ea:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 0301 	and.w	r3, r3, #1
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	f000 809c 	beq.w	8005532 <HAL_RCC_OscConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80053fa:	69fb      	ldr	r3, [r7, #28]
 80053fc:	2b10      	cmp	r3, #16
 80053fe:	d005      	beq.n	800540c <HAL_RCC_OscConfig+0x50>
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d009      	beq.n	800541a <HAL_RCC_OscConfig+0x5e>
        ((pllrdy != 0U) && (pllsrc == RCC_PLLSOURCE_HSE)))
 8005406:	69bb      	ldr	r3, [r7, #24]
 8005408:	2b02      	cmp	r3, #2
 800540a:	d106      	bne.n	800541a <HAL_RCC_OscConfig+0x5e>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	2b00      	cmp	r3, #0
 8005412:	f040 808e 	bne.w	8005532 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e302      	b.n	8005a20 <HAL_RCC_OscConfig+0x664>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005422:	d106      	bne.n	8005432 <HAL_RCC_OscConfig+0x76>
 8005424:	4b81      	ldr	r3, [pc, #516]	@ (800562c <HAL_RCC_OscConfig+0x270>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a80      	ldr	r2, [pc, #512]	@ (800562c <HAL_RCC_OscConfig+0x270>)
 800542a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800542e:	6013      	str	r3, [r2, #0]
 8005430:	e058      	b.n	80054e4 <HAL_RCC_OscConfig+0x128>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d112      	bne.n	8005460 <HAL_RCC_OscConfig+0xa4>
 800543a:	4b7c      	ldr	r3, [pc, #496]	@ (800562c <HAL_RCC_OscConfig+0x270>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a7b      	ldr	r2, [pc, #492]	@ (800562c <HAL_RCC_OscConfig+0x270>)
 8005440:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005444:	6013      	str	r3, [r2, #0]
 8005446:	4b79      	ldr	r3, [pc, #484]	@ (800562c <HAL_RCC_OscConfig+0x270>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a78      	ldr	r2, [pc, #480]	@ (800562c <HAL_RCC_OscConfig+0x270>)
 800544c:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8005450:	6013      	str	r3, [r2, #0]
 8005452:	4b76      	ldr	r3, [pc, #472]	@ (800562c <HAL_RCC_OscConfig+0x270>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a75      	ldr	r2, [pc, #468]	@ (800562c <HAL_RCC_OscConfig+0x270>)
 8005458:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800545c:	6013      	str	r3, [r2, #0]
 800545e:	e041      	b.n	80054e4 <HAL_RCC_OscConfig+0x128>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005468:	d112      	bne.n	8005490 <HAL_RCC_OscConfig+0xd4>
 800546a:	4b70      	ldr	r3, [pc, #448]	@ (800562c <HAL_RCC_OscConfig+0x270>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a6f      	ldr	r2, [pc, #444]	@ (800562c <HAL_RCC_OscConfig+0x270>)
 8005470:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005474:	6013      	str	r3, [r2, #0]
 8005476:	4b6d      	ldr	r3, [pc, #436]	@ (800562c <HAL_RCC_OscConfig+0x270>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a6c      	ldr	r2, [pc, #432]	@ (800562c <HAL_RCC_OscConfig+0x270>)
 800547c:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8005480:	6013      	str	r3, [r2, #0]
 8005482:	4b6a      	ldr	r3, [pc, #424]	@ (800562c <HAL_RCC_OscConfig+0x270>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a69      	ldr	r2, [pc, #420]	@ (800562c <HAL_RCC_OscConfig+0x270>)
 8005488:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800548c:	6013      	str	r3, [r2, #0]
 800548e:	e029      	b.n	80054e4 <HAL_RCC_OscConfig+0x128>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	f5b3 2f50 	cmp.w	r3, #851968	@ 0xd0000
 8005498:	d112      	bne.n	80054c0 <HAL_RCC_OscConfig+0x104>
 800549a:	4b64      	ldr	r3, [pc, #400]	@ (800562c <HAL_RCC_OscConfig+0x270>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a63      	ldr	r2, [pc, #396]	@ (800562c <HAL_RCC_OscConfig+0x270>)
 80054a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80054a4:	6013      	str	r3, [r2, #0]
 80054a6:	4b61      	ldr	r3, [pc, #388]	@ (800562c <HAL_RCC_OscConfig+0x270>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a60      	ldr	r2, [pc, #384]	@ (800562c <HAL_RCC_OscConfig+0x270>)
 80054ac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80054b0:	6013      	str	r3, [r2, #0]
 80054b2:	4b5e      	ldr	r3, [pc, #376]	@ (800562c <HAL_RCC_OscConfig+0x270>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a5d      	ldr	r2, [pc, #372]	@ (800562c <HAL_RCC_OscConfig+0x270>)
 80054b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054bc:	6013      	str	r3, [r2, #0]
 80054be:	e011      	b.n	80054e4 <HAL_RCC_OscConfig+0x128>
 80054c0:	4b5a      	ldr	r3, [pc, #360]	@ (800562c <HAL_RCC_OscConfig+0x270>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a59      	ldr	r2, [pc, #356]	@ (800562c <HAL_RCC_OscConfig+0x270>)
 80054c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80054ca:	6013      	str	r3, [r2, #0]
 80054cc:	4b57      	ldr	r3, [pc, #348]	@ (800562c <HAL_RCC_OscConfig+0x270>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a56      	ldr	r2, [pc, #344]	@ (800562c <HAL_RCC_OscConfig+0x270>)
 80054d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80054d6:	6013      	str	r3, [r2, #0]
 80054d8:	4b54      	ldr	r3, [pc, #336]	@ (800562c <HAL_RCC_OscConfig+0x270>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a53      	ldr	r2, [pc, #332]	@ (800562c <HAL_RCC_OscConfig+0x270>)
 80054de:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80054e2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054e4:	f7fc f8b2 	bl	800164c <HAL_GetTick>
 80054e8:	6138      	str	r0, [r7, #16]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d019      	beq.n	8005526 <HAL_RCC_OscConfig+0x16a>
      {
        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80054f2:	e008      	b.n	8005506 <HAL_RCC_OscConfig+0x14a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80054f4:	f7fc f8aa 	bl	800164c <HAL_GetTick>
 80054f8:	4602      	mov	r2, r0
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	1ad3      	subs	r3, r2, r3
 80054fe:	2b64      	cmp	r3, #100	@ 0x64
 8005500:	d901      	bls.n	8005506 <HAL_RCC_OscConfig+0x14a>
          {
            return HAL_TIMEOUT;
 8005502:	2303      	movs	r3, #3
 8005504:	e28c      	b.n	8005a20 <HAL_RCC_OscConfig+0x664>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005506:	4b49      	ldr	r3, [pc, #292]	@ (800562c <HAL_RCC_OscConfig+0x270>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800550e:	2b00      	cmp	r3, #0
 8005510:	d0f0      	beq.n	80054f4 <HAL_RCC_OscConfig+0x138>
 8005512:	e00e      	b.n	8005532 <HAL_RCC_OscConfig+0x176>
      else
      {
        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8005514:	f7fc f89a 	bl	800164c <HAL_GetTick>
 8005518:	4602      	mov	r2, r0
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	2b64      	cmp	r3, #100	@ 0x64
 8005520:	d901      	bls.n	8005526 <HAL_RCC_OscConfig+0x16a>
          {
            return HAL_TIMEOUT;
 8005522:	2303      	movs	r3, #3
 8005524:	e27c      	b.n	8005a20 <HAL_RCC_OscConfig+0x664>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005526:	4b41      	ldr	r3, [pc, #260]	@ (800562c <HAL_RCC_OscConfig+0x270>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800552e:	2b00      	cmp	r3, #0
 8005530:	d1f0      	bne.n	8005514 <HAL_RCC_OscConfig+0x158>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 0302 	and.w	r3, r3, #2
 800553a:	2b00      	cmp	r3, #0
 800553c:	f000 809e 	beq.w	800567c <HAL_RCC_OscConfig+0x2c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL1 source when PLL1 is selected as system clock */
    if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005540:	69fb      	ldr	r3, [r7, #28]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d005      	beq.n	8005552 <HAL_RCC_OscConfig+0x196>
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d047      	beq.n	80055dc <HAL_RCC_OscConfig+0x220>
        ((pllrdy != 0U) && (pllsrc == RCC_PLLSOURCE_HSI)))
 800554c:	69bb      	ldr	r3, [r7, #24]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d144      	bne.n	80055dc <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	68db      	ldr	r3, [r3, #12]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d101      	bne.n	800555e <HAL_RCC_OscConfig+0x1a2>
      {
        return HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	e260      	b.n	8005a20 <HAL_RCC_OscConfig+0x664>
      }
      /* Otherwise, calibration is allowed, divider update also unless used for any enabled PLL */
      else
      {
        /* HSI must not be used as reference clock for any enabled PLL clock source */
        tmpreg1 = (RCC->CR & RCC_CR_HSIDIV);
 800555e:	4b33      	ldr	r3, [pc, #204]	@ (800562c <HAL_RCC_OscConfig+0x270>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 0318 	and.w	r3, r3, #24
 8005566:	60fb      	str	r3, [r7, #12]
        if ((pllsrc == RCC_PLLSOURCE_HSI) && (pllrdy != 0U) && \
 8005568:	69bb      	ldr	r3, [r7, #24]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d109      	bne.n	8005582 <HAL_RCC_OscConfig+0x1c6>
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d006      	beq.n	8005582 <HAL_RCC_OscConfig+0x1c6>
            (tmpreg1 != RCC_OscInitStruct->HSIDiv))
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	691b      	ldr	r3, [r3, #16]
        if ((pllsrc == RCC_PLLSOURCE_HSI) && (pllrdy != 0U) && \
 8005578:	68fa      	ldr	r2, [r7, #12]
 800557a:	429a      	cmp	r2, r3
 800557c:	d001      	beq.n	8005582 <HAL_RCC_OscConfig+0x1c6>
        {
          return HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	e24e      	b.n	8005a20 <HAL_RCC_OscConfig+0x664>
        }

        assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

        /* Set the Internal High Speed oscillator new divider */
        __HAL_RCC_HSI_CONFIG(RCC_HSI_ON | RCC_OscInitStruct->HSIDiv);
 8005582:	4b2a      	ldr	r3, [pc, #168]	@ (800562c <HAL_RCC_OscConfig+0x270>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f023 0219 	bic.w	r2, r3, #25
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	4313      	orrs	r3, r2
 8005590:	4a26      	ldr	r2, [pc, #152]	@ (800562c <HAL_RCC_OscConfig+0x270>)
 8005592:	f043 0301 	orr.w	r3, r3, #1
 8005596:	6013      	str	r3, [r2, #0]

        if (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005598:	69fb      	ldr	r3, [r7, #28]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d109      	bne.n	80055b2 <HAL_RCC_OscConfig+0x1f6>
        {
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800559e:	4b23      	ldr	r3, [pc, #140]	@ (800562c <HAL_RCC_OscConfig+0x270>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	08db      	lsrs	r3, r3, #3
 80055a4:	f003 0303 	and.w	r3, r3, #3
 80055a8:	4a21      	ldr	r2, [pc, #132]	@ (8005630 <HAL_RCC_OscConfig+0x274>)
 80055aa:	fa22 f303 	lsr.w	r3, r2, r3
 80055ae:	4a21      	ldr	r2, [pc, #132]	@ (8005634 <HAL_RCC_OscConfig+0x278>)
 80055b0:	6013      	str	r3, [r2, #0]
        }
        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80055b2:	4b21      	ldr	r3, [pc, #132]	@ (8005638 <HAL_RCC_OscConfig+0x27c>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4618      	mov	r0, r3
 80055b8:	f7fb fff8 	bl	80015ac <HAL_InitTick>
 80055bc:	4603      	mov	r3, r0
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d001      	beq.n	80055c6 <HAL_RCC_OscConfig+0x20a>
        {
          return HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	e22c      	b.n	8005a20 <HAL_RCC_OscConfig+0x664>
        }
      }
      /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
      __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055c6:	4b19      	ldr	r3, [pc, #100]	@ (800562c <HAL_RCC_OscConfig+0x270>)
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	695b      	ldr	r3, [r3, #20]
 80055d2:	061b      	lsls	r3, r3, #24
 80055d4:	4915      	ldr	r1, [pc, #84]	@ (800562c <HAL_RCC_OscConfig+0x270>)
 80055d6:	4313      	orrs	r3, r2
 80055d8:	604b      	str	r3, [r1, #4]
 80055da:	e04f      	b.n	800567c <HAL_RCC_OscConfig+0x2c0>
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d032      	beq.n	800564a <HAL_RCC_OscConfig+0x28e>
      {
        /* Enable the Internal High Speed oscillator */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState | RCC_OscInitStruct->HSIDiv);
 80055e4:	4b11      	ldr	r3, [pc, #68]	@ (800562c <HAL_RCC_OscConfig+0x270>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f023 0219 	bic.w	r2, r3, #25
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	68d9      	ldr	r1, [r3, #12]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	691b      	ldr	r3, [r3, #16]
 80055f4:	430b      	orrs	r3, r1
 80055f6:	490d      	ldr	r1, [pc, #52]	@ (800562c <HAL_RCC_OscConfig+0x270>)
 80055f8:	4313      	orrs	r3, r2
 80055fa:	600b      	str	r3, [r1, #0]

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055fc:	4b0b      	ldr	r3, [pc, #44]	@ (800562c <HAL_RCC_OscConfig+0x270>)
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	695b      	ldr	r3, [r3, #20]
 8005608:	061b      	lsls	r3, r3, #24
 800560a:	4908      	ldr	r1, [pc, #32]	@ (800562c <HAL_RCC_OscConfig+0x270>)
 800560c:	4313      	orrs	r3, r2
 800560e:	604b      	str	r3, [r1, #4]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005610:	f7fc f81c 	bl	800164c <HAL_GetTick>
 8005614:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005616:	e011      	b.n	800563c <HAL_RCC_OscConfig+0x280>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8005618:	f7fc f818 	bl	800164c <HAL_GetTick>
 800561c:	4602      	mov	r2, r0
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	1ad3      	subs	r3, r2, r3
 8005622:	2b01      	cmp	r3, #1
 8005624:	d90a      	bls.n	800563c <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8005626:	2303      	movs	r3, #3
 8005628:	e1fa      	b.n	8005a20 <HAL_RCC_OscConfig+0x664>
 800562a:	bf00      	nop
 800562c:	58024400 	.word	0x58024400
 8005630:	03d09000 	.word	0x03d09000
 8005634:	24000000 	.word	0x24000000
 8005638:	24000004 	.word	0x24000004
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800563c:	4b95      	ldr	r3, [pc, #596]	@ (8005894 <HAL_RCC_OscConfig+0x4d8>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 0304 	and.w	r3, r3, #4
 8005644:	2b00      	cmp	r3, #0
 8005646:	d0e7      	beq.n	8005618 <HAL_RCC_OscConfig+0x25c>
 8005648:	e018      	b.n	800567c <HAL_RCC_OscConfig+0x2c0>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800564a:	4b92      	ldr	r3, [pc, #584]	@ (8005894 <HAL_RCC_OscConfig+0x4d8>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a91      	ldr	r2, [pc, #580]	@ (8005894 <HAL_RCC_OscConfig+0x4d8>)
 8005650:	f023 0301 	bic.w	r3, r3, #1
 8005654:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005656:	f7fb fff9 	bl	800164c <HAL_GetTick>
 800565a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800565c:	e008      	b.n	8005670 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800565e:	f7fb fff5 	bl	800164c <HAL_GetTick>
 8005662:	4602      	mov	r2, r0
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	1ad3      	subs	r3, r2, r3
 8005668:	2b01      	cmp	r3, #1
 800566a:	d901      	bls.n	8005670 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800566c:	2303      	movs	r3, #3
 800566e:	e1d7      	b.n	8005a20 <HAL_RCC_OscConfig+0x664>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005670:	4b88      	ldr	r3, [pc, #544]	@ (8005894 <HAL_RCC_OscConfig+0x4d8>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f003 0304 	and.w	r3, r3, #4
 8005678:	2b00      	cmp	r3, #0
 800567a:	d1f0      	bne.n	800565e <HAL_RCC_OscConfig+0x2a2>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f003 0310 	and.w	r3, r3, #16
 8005684:	2b00      	cmp	r3, #0
 8005686:	d045      	beq.n	8005714 <HAL_RCC_OscConfig+0x358>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));

    /* When the CSI is used as system clock it will not disabled */
    if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	2b08      	cmp	r3, #8
 800568c:	d005      	beq.n	800569a <HAL_RCC_OscConfig+0x2de>
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d008      	beq.n	80056a6 <HAL_RCC_OscConfig+0x2ea>
        ((pllrdy != 0U) && (pllsrc == RCC_PLLSOURCE_CSI)))
 8005694:	69bb      	ldr	r3, [r7, #24]
 8005696:	2b01      	cmp	r3, #1
 8005698:	d105      	bne.n	80056a6 <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if (RCC_OscInitStruct->CSIState == RCC_CSI_OFF)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6a1b      	ldr	r3, [r3, #32]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d138      	bne.n	8005714 <HAL_RCC_OscConfig+0x358>
      {
        return HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e1bc      	b.n	8005a20 <HAL_RCC_OscConfig+0x664>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6a1b      	ldr	r3, [r3, #32]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d019      	beq.n	80056e2 <HAL_RCC_OscConfig+0x326>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80056ae:	4b79      	ldr	r3, [pc, #484]	@ (8005894 <HAL_RCC_OscConfig+0x4d8>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a78      	ldr	r2, [pc, #480]	@ (8005894 <HAL_RCC_OscConfig+0x4d8>)
 80056b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056ba:	f7fb ffc7 	bl	800164c <HAL_GetTick>
 80056be:	6138      	str	r0, [r7, #16]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80056c0:	e008      	b.n	80056d4 <HAL_RCC_OscConfig+0x318>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80056c2:	f7fb ffc3 	bl	800164c <HAL_GetTick>
 80056c6:	4602      	mov	r2, r0
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	1ad3      	subs	r3, r2, r3
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d901      	bls.n	80056d4 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 80056d0:	2303      	movs	r3, #3
 80056d2:	e1a5      	b.n	8005a20 <HAL_RCC_OscConfig+0x664>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80056d4:	4b6f      	ldr	r3, [pc, #444]	@ (8005894 <HAL_RCC_OscConfig+0x4d8>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d0f0      	beq.n	80056c2 <HAL_RCC_OscConfig+0x306>
 80056e0:	e018      	b.n	8005714 <HAL_RCC_OscConfig+0x358>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80056e2:	4b6c      	ldr	r3, [pc, #432]	@ (8005894 <HAL_RCC_OscConfig+0x4d8>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a6b      	ldr	r2, [pc, #428]	@ (8005894 <HAL_RCC_OscConfig+0x4d8>)
 80056e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80056ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056ee:	f7fb ffad 	bl	800164c <HAL_GetTick>
 80056f2:	6138      	str	r0, [r7, #16]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80056f4:	e008      	b.n	8005708 <HAL_RCC_OscConfig+0x34c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80056f6:	f7fb ffa9 	bl	800164c <HAL_GetTick>
 80056fa:	4602      	mov	r2, r0
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	1ad3      	subs	r3, r2, r3
 8005700:	2b01      	cmp	r3, #1
 8005702:	d901      	bls.n	8005708 <HAL_RCC_OscConfig+0x34c>
          {
            return HAL_TIMEOUT;
 8005704:	2303      	movs	r3, #3
 8005706:	e18b      	b.n	8005a20 <HAL_RCC_OscConfig+0x664>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8005708:	4b62      	ldr	r3, [pc, #392]	@ (8005894 <HAL_RCC_OscConfig+0x4d8>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005710:	2b00      	cmp	r3, #0
 8005712:	d1f0      	bne.n	80056f6 <HAL_RCC_OscConfig+0x33a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f003 0308 	and.w	r3, r3, #8
 800571c:	2b00      	cmp	r3, #0
 800571e:	d036      	beq.n	800578e <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	699b      	ldr	r3, [r3, #24]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d019      	beq.n	800575c <HAL_RCC_OscConfig+0x3a0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005728:	4b5a      	ldr	r3, [pc, #360]	@ (8005894 <HAL_RCC_OscConfig+0x4d8>)
 800572a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800572c:	4a59      	ldr	r2, [pc, #356]	@ (8005894 <HAL_RCC_OscConfig+0x4d8>)
 800572e:	f043 0301 	orr.w	r3, r3, #1
 8005732:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005734:	f7fb ff8a 	bl	800164c <HAL_GetTick>
 8005738:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800573a:	e008      	b.n	800574e <HAL_RCC_OscConfig+0x392>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800573c:	f7fb ff86 	bl	800164c <HAL_GetTick>
 8005740:	4602      	mov	r2, r0
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	1ad3      	subs	r3, r2, r3
 8005746:	2b01      	cmp	r3, #1
 8005748:	d901      	bls.n	800574e <HAL_RCC_OscConfig+0x392>
        {
          return HAL_TIMEOUT;
 800574a:	2303      	movs	r3, #3
 800574c:	e168      	b.n	8005a20 <HAL_RCC_OscConfig+0x664>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800574e:	4b51      	ldr	r3, [pc, #324]	@ (8005894 <HAL_RCC_OscConfig+0x4d8>)
 8005750:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005752:	f003 0302 	and.w	r3, r3, #2
 8005756:	2b00      	cmp	r3, #0
 8005758:	d0f0      	beq.n	800573c <HAL_RCC_OscConfig+0x380>
 800575a:	e018      	b.n	800578e <HAL_RCC_OscConfig+0x3d2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800575c:	4b4d      	ldr	r3, [pc, #308]	@ (8005894 <HAL_RCC_OscConfig+0x4d8>)
 800575e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005760:	4a4c      	ldr	r2, [pc, #304]	@ (8005894 <HAL_RCC_OscConfig+0x4d8>)
 8005762:	f023 0301 	bic.w	r3, r3, #1
 8005766:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005768:	f7fb ff70 	bl	800164c <HAL_GetTick>
 800576c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800576e:	e008      	b.n	8005782 <HAL_RCC_OscConfig+0x3c6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8005770:	f7fb ff6c 	bl	800164c <HAL_GetTick>
 8005774:	4602      	mov	r2, r0
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	1ad3      	subs	r3, r2, r3
 800577a:	2b01      	cmp	r3, #1
 800577c:	d901      	bls.n	8005782 <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 800577e:	2303      	movs	r3, #3
 8005780:	e14e      	b.n	8005a20 <HAL_RCC_OscConfig+0x664>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005782:	4b44      	ldr	r3, [pc, #272]	@ (8005894 <HAL_RCC_OscConfig+0x4d8>)
 8005784:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005786:	f003 0302 	and.w	r3, r3, #2
 800578a:	2b00      	cmp	r3, #0
 800578c:	d1f0      	bne.n	8005770 <HAL_RCC_OscConfig+0x3b4>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f003 0320 	and.w	r3, r3, #32
 8005796:	2b00      	cmp	r3, #0
 8005798:	d036      	beq.n	8005808 <HAL_RCC_OscConfig+0x44c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	69db      	ldr	r3, [r3, #28]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d019      	beq.n	80057d6 <HAL_RCC_OscConfig+0x41a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80057a2:	4b3c      	ldr	r3, [pc, #240]	@ (8005894 <HAL_RCC_OscConfig+0x4d8>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a3b      	ldr	r2, [pc, #236]	@ (8005894 <HAL_RCC_OscConfig+0x4d8>)
 80057a8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80057ac:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80057ae:	f7fb ff4d 	bl	800164c <HAL_GetTick>
 80057b2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80057b4:	e008      	b.n	80057c8 <HAL_RCC_OscConfig+0x40c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80057b6:	f7fb ff49 	bl	800164c <HAL_GetTick>
 80057ba:	4602      	mov	r2, r0
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	1ad3      	subs	r3, r2, r3
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d901      	bls.n	80057c8 <HAL_RCC_OscConfig+0x40c>
        {
          return HAL_TIMEOUT;
 80057c4:	2303      	movs	r3, #3
 80057c6:	e12b      	b.n	8005a20 <HAL_RCC_OscConfig+0x664>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80057c8:	4b32      	ldr	r3, [pc, #200]	@ (8005894 <HAL_RCC_OscConfig+0x4d8>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d0f0      	beq.n	80057b6 <HAL_RCC_OscConfig+0x3fa>
 80057d4:	e018      	b.n	8005808 <HAL_RCC_OscConfig+0x44c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80057d6:	4b2f      	ldr	r3, [pc, #188]	@ (8005894 <HAL_RCC_OscConfig+0x4d8>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a2e      	ldr	r2, [pc, #184]	@ (8005894 <HAL_RCC_OscConfig+0x4d8>)
 80057dc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80057e0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80057e2:	f7fb ff33 	bl	800164c <HAL_GetTick>
 80057e6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80057e8:	e008      	b.n	80057fc <HAL_RCC_OscConfig+0x440>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80057ea:	f7fb ff2f 	bl	800164c <HAL_GetTick>
 80057ee:	4602      	mov	r2, r0
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	1ad3      	subs	r3, r2, r3
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d901      	bls.n	80057fc <HAL_RCC_OscConfig+0x440>
        {
          return HAL_TIMEOUT;
 80057f8:	2303      	movs	r3, #3
 80057fa:	e111      	b.n	8005a20 <HAL_RCC_OscConfig+0x664>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80057fc:	4b25      	ldr	r3, [pc, #148]	@ (8005894 <HAL_RCC_OscConfig+0x4d8>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005804:	2b00      	cmp	r3, #0
 8005806:	d1f0      	bne.n	80057ea <HAL_RCC_OscConfig+0x42e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f003 0304 	and.w	r3, r3, #4
 8005810:	2b00      	cmp	r3, #0
 8005812:	f000 809b 	beq.w	800594c <HAL_RCC_OscConfig+0x590>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005816:	4b20      	ldr	r3, [pc, #128]	@ (8005898 <HAL_RCC_OscConfig+0x4dc>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a1f      	ldr	r2, [pc, #124]	@ (8005898 <HAL_RCC_OscConfig+0x4dc>)
 800581c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005820:	6013      	str	r3, [r2, #0]

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	2b01      	cmp	r3, #1
 8005828:	d106      	bne.n	8005838 <HAL_RCC_OscConfig+0x47c>
 800582a:	4b1a      	ldr	r3, [pc, #104]	@ (8005894 <HAL_RCC_OscConfig+0x4d8>)
 800582c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800582e:	4a19      	ldr	r2, [pc, #100]	@ (8005894 <HAL_RCC_OscConfig+0x4d8>)
 8005830:	f043 0301 	orr.w	r3, r3, #1
 8005834:	6713      	str	r3, [r2, #112]	@ 0x70
 8005836:	e05a      	b.n	80058ee <HAL_RCC_OscConfig+0x532>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d112      	bne.n	8005866 <HAL_RCC_OscConfig+0x4aa>
 8005840:	4b14      	ldr	r3, [pc, #80]	@ (8005894 <HAL_RCC_OscConfig+0x4d8>)
 8005842:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005844:	4a13      	ldr	r2, [pc, #76]	@ (8005894 <HAL_RCC_OscConfig+0x4d8>)
 8005846:	f023 0301 	bic.w	r3, r3, #1
 800584a:	6713      	str	r3, [r2, #112]	@ 0x70
 800584c:	4b11      	ldr	r3, [pc, #68]	@ (8005894 <HAL_RCC_OscConfig+0x4d8>)
 800584e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005850:	4a10      	ldr	r2, [pc, #64]	@ (8005894 <HAL_RCC_OscConfig+0x4d8>)
 8005852:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005856:	6713      	str	r3, [r2, #112]	@ 0x70
 8005858:	4b0e      	ldr	r3, [pc, #56]	@ (8005894 <HAL_RCC_OscConfig+0x4d8>)
 800585a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800585c:	4a0d      	ldr	r2, [pc, #52]	@ (8005894 <HAL_RCC_OscConfig+0x4d8>)
 800585e:	f023 0304 	bic.w	r3, r3, #4
 8005862:	6713      	str	r3, [r2, #112]	@ 0x70
 8005864:	e043      	b.n	80058ee <HAL_RCC_OscConfig+0x532>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	2b05      	cmp	r3, #5
 800586c:	d116      	bne.n	800589c <HAL_RCC_OscConfig+0x4e0>
 800586e:	4b09      	ldr	r3, [pc, #36]	@ (8005894 <HAL_RCC_OscConfig+0x4d8>)
 8005870:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005872:	4a08      	ldr	r2, [pc, #32]	@ (8005894 <HAL_RCC_OscConfig+0x4d8>)
 8005874:	f043 0304 	orr.w	r3, r3, #4
 8005878:	6713      	str	r3, [r2, #112]	@ 0x70
 800587a:	4b06      	ldr	r3, [pc, #24]	@ (8005894 <HAL_RCC_OscConfig+0x4d8>)
 800587c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800587e:	4a05      	ldr	r2, [pc, #20]	@ (8005894 <HAL_RCC_OscConfig+0x4d8>)
 8005880:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005884:	6713      	str	r3, [r2, #112]	@ 0x70
 8005886:	4b03      	ldr	r3, [pc, #12]	@ (8005894 <HAL_RCC_OscConfig+0x4d8>)
 8005888:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800588a:	4a02      	ldr	r2, [pc, #8]	@ (8005894 <HAL_RCC_OscConfig+0x4d8>)
 800588c:	f043 0301 	orr.w	r3, r3, #1
 8005890:	6713      	str	r3, [r2, #112]	@ 0x70
 8005892:	e02c      	b.n	80058ee <HAL_RCC_OscConfig+0x532>
 8005894:	58024400 	.word	0x58024400
 8005898:	58024800 	.word	0x58024800
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	2b85      	cmp	r3, #133	@ 0x85
 80058a2:	d112      	bne.n	80058ca <HAL_RCC_OscConfig+0x50e>
 80058a4:	4b60      	ldr	r3, [pc, #384]	@ (8005a28 <HAL_RCC_OscConfig+0x66c>)
 80058a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058a8:	4a5f      	ldr	r2, [pc, #380]	@ (8005a28 <HAL_RCC_OscConfig+0x66c>)
 80058aa:	f043 0304 	orr.w	r3, r3, #4
 80058ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80058b0:	4b5d      	ldr	r3, [pc, #372]	@ (8005a28 <HAL_RCC_OscConfig+0x66c>)
 80058b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058b4:	4a5c      	ldr	r2, [pc, #368]	@ (8005a28 <HAL_RCC_OscConfig+0x66c>)
 80058b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80058bc:	4b5a      	ldr	r3, [pc, #360]	@ (8005a28 <HAL_RCC_OscConfig+0x66c>)
 80058be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058c0:	4a59      	ldr	r2, [pc, #356]	@ (8005a28 <HAL_RCC_OscConfig+0x66c>)
 80058c2:	f043 0301 	orr.w	r3, r3, #1
 80058c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80058c8:	e011      	b.n	80058ee <HAL_RCC_OscConfig+0x532>
 80058ca:	4b57      	ldr	r3, [pc, #348]	@ (8005a28 <HAL_RCC_OscConfig+0x66c>)
 80058cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058ce:	4a56      	ldr	r2, [pc, #344]	@ (8005a28 <HAL_RCC_OscConfig+0x66c>)
 80058d0:	f023 0301 	bic.w	r3, r3, #1
 80058d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80058d6:	4b54      	ldr	r3, [pc, #336]	@ (8005a28 <HAL_RCC_OscConfig+0x66c>)
 80058d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058da:	4a53      	ldr	r2, [pc, #332]	@ (8005a28 <HAL_RCC_OscConfig+0x66c>)
 80058dc:	f023 0304 	bic.w	r3, r3, #4
 80058e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80058e2:	4b51      	ldr	r3, [pc, #324]	@ (8005a28 <HAL_RCC_OscConfig+0x66c>)
 80058e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058e6:	4a50      	ldr	r2, [pc, #320]	@ (8005a28 <HAL_RCC_OscConfig+0x66c>)
 80058e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058ec:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d015      	beq.n	8005922 <HAL_RCC_OscConfig+0x566>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058f6:	f7fb fea9 	bl	800164c <HAL_GetTick>
 80058fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058fc:	e00a      	b.n	8005914 <HAL_RCC_OscConfig+0x558>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058fe:	f7fb fea5 	bl	800164c <HAL_GetTick>
 8005902:	4602      	mov	r2, r0
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	1ad3      	subs	r3, r2, r3
 8005908:	f241 3288 	movw	r2, #5000	@ 0x1388
 800590c:	4293      	cmp	r3, r2
 800590e:	d901      	bls.n	8005914 <HAL_RCC_OscConfig+0x558>
        {
          return HAL_TIMEOUT;
 8005910:	2303      	movs	r3, #3
 8005912:	e085      	b.n	8005a20 <HAL_RCC_OscConfig+0x664>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005914:	4b44      	ldr	r3, [pc, #272]	@ (8005a28 <HAL_RCC_OscConfig+0x66c>)
 8005916:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005918:	f003 0302 	and.w	r3, r3, #2
 800591c:	2b00      	cmp	r3, #0
 800591e:	d0ee      	beq.n	80058fe <HAL_RCC_OscConfig+0x542>
 8005920:	e014      	b.n	800594c <HAL_RCC_OscConfig+0x590>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005922:	f7fb fe93 	bl	800164c <HAL_GetTick>
 8005926:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005928:	e00a      	b.n	8005940 <HAL_RCC_OscConfig+0x584>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800592a:	f7fb fe8f 	bl	800164c <HAL_GetTick>
 800592e:	4602      	mov	r2, r0
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	1ad3      	subs	r3, r2, r3
 8005934:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005938:	4293      	cmp	r3, r2
 800593a:	d901      	bls.n	8005940 <HAL_RCC_OscConfig+0x584>
        {
          return HAL_TIMEOUT;
 800593c:	2303      	movs	r3, #3
 800593e:	e06f      	b.n	8005a20 <HAL_RCC_OscConfig+0x664>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005940:	4b39      	ldr	r3, [pc, #228]	@ (8005a28 <HAL_RCC_OscConfig+0x66c>)
 8005942:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005944:	f003 0302 	and.w	r3, r3, #2
 8005948:	2b00      	cmp	r3, #0
 800594a:	d1ee      	bne.n	800592a <HAL_RCC_OscConfig+0x56e>

  /*-------------------------------- PLL1 Configuration ----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL1.PLLState));

  if (RCC_OscInitStruct->PLL1.PLLState != RCC_PLL_NONE)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005950:	2b00      	cmp	r3, #0
 8005952:	d042      	beq.n	80059da <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005954:	69fb      	ldr	r3, [r7, #28]
 8005956:	2b18      	cmp	r3, #24
 8005958:	d131      	bne.n	80059be <HAL_RCC_OscConfig+0x602>
    {
      /* No PLL off possible */
      if (RCC_OscInitStruct->PLL1.PLLState == RCC_PLL_OFF)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800595e:	2b01      	cmp	r3, #1
 8005960:	d101      	bne.n	8005966 <HAL_RCC_OscConfig+0x5aa>
      {
        return HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	e05c      	b.n	8005a20 <HAL_RCC_OscConfig+0x664>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        tmpreg1 = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN) >> RCC_PLL1FRACR_FRACN_Pos);
 8005966:	4b30      	ldr	r3, [pc, #192]	@ (8005a28 <HAL_RCC_OscConfig+0x66c>)
 8005968:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800596a:	08db      	lsrs	r3, r3, #3
 800596c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005970:	60fb      	str	r3, [r7, #12]

        if (RCC_OscInitStruct->PLL1.PLLFractional != tmpreg1)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005976:	68fa      	ldr	r2, [r7, #12]
 8005978:	429a      	cmp	r2, r3
 800597a:	d02e      	beq.n	80059da <HAL_RCC_OscConfig+0x61e>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL1.PLLFractional));

          /* Disable PLL1FRACLE */
          __HAL_RCC_PLL1_FRACN_DISABLE();
 800597c:	4b2a      	ldr	r3, [pc, #168]	@ (8005a28 <HAL_RCC_OscConfig+0x66c>)
 800597e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005980:	4a29      	ldr	r2, [pc, #164]	@ (8005a28 <HAL_RCC_OscConfig+0x66c>)
 8005982:	f023 0301 	bic.w	r3, r3, #1
 8005986:	62d3      	str	r3, [r2, #44]	@ 0x2c

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005988:	f7fb fe60 	bl	800164c <HAL_GetTick>
 800598c:	6138      	str	r0, [r7, #16]

          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 800598e:	bf00      	nop
 8005990:	f7fb fe5c 	bl	800164c <HAL_GetTick>
 8005994:	4602      	mov	r2, r0
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	4293      	cmp	r3, r2
 800599a:	d0f9      	beq.n	8005990 <HAL_RCC_OscConfig+0x5d4>
          {
            /* Do nothing */
          }

          /* Configure PLL1FRACN */
          __HAL_RCC_PLL1_FRACN_CONFIG(RCC_OscInitStruct->PLL1.PLLFractional);
 800599c:	4b22      	ldr	r3, [pc, #136]	@ (8005a28 <HAL_RCC_OscConfig+0x66c>)
 800599e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80059a0:	4b22      	ldr	r3, [pc, #136]	@ (8005a2c <HAL_RCC_OscConfig+0x670>)
 80059a2:	4013      	ands	r3, r2
 80059a4:	687a      	ldr	r2, [r7, #4]
 80059a6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80059a8:	00d2      	lsls	r2, r2, #3
 80059aa:	491f      	ldr	r1, [pc, #124]	@ (8005a28 <HAL_RCC_OscConfig+0x66c>)
 80059ac:	4313      	orrs	r3, r2
 80059ae:	634b      	str	r3, [r1, #52]	@ 0x34

          /* Enable PLL1FRACLE to latch new value . */
          __HAL_RCC_PLL1_FRACN_ENABLE();
 80059b0:	4b1d      	ldr	r3, [pc, #116]	@ (8005a28 <HAL_RCC_OscConfig+0x66c>)
 80059b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059b4:	4a1c      	ldr	r2, [pc, #112]	@ (8005a28 <HAL_RCC_OscConfig+0x66c>)
 80059b6:	f043 0301 	orr.w	r3, r3, #1
 80059ba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80059bc:	e00d      	b.n	80059da <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Initialize PLL1T to 1 to use common PLL initialization function */
      RCC_OscInitStruct->PLL1.PLLT = 1U;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2201      	movs	r2, #1
 80059c2:	645a      	str	r2, [r3, #68]	@ 0x44
      if (RCC_PLL_Config(RCC_PLL1_CONFIG, &(RCC_OscInitStruct->PLL1)) != HAL_OK)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	3324      	adds	r3, #36	@ 0x24
 80059c8:	4619      	mov	r1, r3
 80059ca:	2000      	movs	r0, #0
 80059cc:	f000 fbd6 	bl	800617c <RCC_PLL_Config>
 80059d0:	4603      	mov	r3, r0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d001      	beq.n	80059da <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e022      	b.n	8005a20 <HAL_RCC_OscConfig+0x664>

  /*-------------------------------- PLL2 Configuration ----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL2.PLLState));

  if (RCC_OscInitStruct->PLL2.PLLState != RCC_PLL_NONE)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d00a      	beq.n	80059f8 <HAL_RCC_OscConfig+0x63c>
  {
    if (RCC_PLL_Config(RCC_PLL2_CONFIG, &(RCC_OscInitStruct->PLL2)) != HAL_OK)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	334c      	adds	r3, #76	@ 0x4c
 80059e6:	4619      	mov	r1, r3
 80059e8:	2001      	movs	r0, #1
 80059ea:	f000 fbc7 	bl	800617c <RCC_PLL_Config>
 80059ee:	4603      	mov	r3, r0
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d001      	beq.n	80059f8 <HAL_RCC_OscConfig+0x63c>
    {
      return HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	e013      	b.n	8005a20 <HAL_RCC_OscConfig+0x664>

  /*-------------------------------- PLL3 Configuration ----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL3.PLLState));

  if (RCC_OscInitStruct->PLL3.PLLState != RCC_PLL_NONE)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d00e      	beq.n	8005a1e <HAL_RCC_OscConfig+0x662>
  {
    /* Initialize PLL3T to 1 to use common PLL initialization function */
    RCC_OscInitStruct->PLL3.PLLT = 1U;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2201      	movs	r2, #1
 8005a04:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    if (RCC_PLL_Config(RCC_PLL3_CONFIG, &(RCC_OscInitStruct->PLL3)) != HAL_OK)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	3374      	adds	r3, #116	@ 0x74
 8005a0c:	4619      	mov	r1, r3
 8005a0e:	2002      	movs	r0, #2
 8005a10:	f000 fbb4 	bl	800617c <RCC_PLL_Config>
 8005a14:	4603      	mov	r3, r0
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d001      	beq.n	8005a1e <HAL_RCC_OscConfig+0x662>
    {
      return HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e000      	b.n	8005a20 <HAL_RCC_OscConfig+0x664>
    }
  }

  return HAL_OK;
 8005a1e:	2300      	movs	r3, #0
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3720      	adds	r7, #32
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}
 8005a28:	58024400 	.word	0x58024400
 8005a2c:	ffff0007 	.word	0xffff0007

08005a30 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b084      	sub	sp, #16
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d101      	bne.n	8005a44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	e182      	b.n	8005d4a <HAL_RCC_ClockConfig+0x31a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005a44:	4b8a      	ldr	r3, [pc, #552]	@ (8005c70 <HAL_RCC_ClockConfig+0x240>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005a4c:	683a      	ldr	r2, [r7, #0]
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d910      	bls.n	8005a74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a52:	4b87      	ldr	r3, [pc, #540]	@ (8005c70 <HAL_RCC_ClockConfig+0x240>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8005a5a:	4985      	ldr	r1, [pc, #532]	@ (8005c70 <HAL_RCC_ClockConfig+0x240>)
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a62:	4b83      	ldr	r3, [pc, #524]	@ (8005c70 <HAL_RCC_ClockConfig+0x240>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005a6a:	683a      	ldr	r2, [r7, #0]
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d001      	beq.n	8005a74 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005a70:	2301      	movs	r3, #1
 8005a72:	e16a      	b.n	8005d4a <HAL_RCC_ClockConfig+0x31a>
  }

  /* Increasing the BUS frequency divider ? */

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f003 0304 	and.w	r3, r3, #4
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d010      	beq.n	8005aa2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->APBCFGR & RCC_APBCFGR_PPRE1))
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	691a      	ldr	r2, [r3, #16]
 8005a84:	4b7b      	ldr	r3, [pc, #492]	@ (8005c74 <HAL_RCC_ClockConfig+0x244>)
 8005a86:	6a1b      	ldr	r3, [r3, #32]
 8005a88:	f003 0307 	and.w	r3, r3, #7
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d908      	bls.n	8005aa2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->APBCFGR, RCC_APBCFGR_PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005a90:	4b78      	ldr	r3, [pc, #480]	@ (8005c74 <HAL_RCC_ClockConfig+0x244>)
 8005a92:	6a1b      	ldr	r3, [r3, #32]
 8005a94:	f023 0207 	bic.w	r2, r3, #7
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	691b      	ldr	r3, [r3, #16]
 8005a9c:	4975      	ldr	r1, [pc, #468]	@ (8005c74 <HAL_RCC_ClockConfig+0x244>)
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f003 0308 	and.w	r3, r3, #8
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d010      	beq.n	8005ad0 <HAL_RCC_ClockConfig+0xa0>
  {
    assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->APBCFGR & RCC_APBCFGR_PPRE2))
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	695a      	ldr	r2, [r3, #20]
 8005ab2:	4b70      	ldr	r3, [pc, #448]	@ (8005c74 <HAL_RCC_ClockConfig+0x244>)
 8005ab4:	6a1b      	ldr	r3, [r3, #32]
 8005ab6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d908      	bls.n	8005ad0 <HAL_RCC_ClockConfig+0xa0>
    {
      MODIFY_REG(RCC->APBCFGR, RCC_APBCFGR_PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005abe:	4b6d      	ldr	r3, [pc, #436]	@ (8005c74 <HAL_RCC_ClockConfig+0x244>)
 8005ac0:	6a1b      	ldr	r3, [r3, #32]
 8005ac2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	695b      	ldr	r3, [r3, #20]
 8005aca:	496a      	ldr	r1, [pc, #424]	@ (8005c74 <HAL_RCC_ClockConfig+0x244>)
 8005acc:	4313      	orrs	r3, r2
 8005ace:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK4 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f003 0310 	and.w	r3, r3, #16
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d010      	beq.n	8005afe <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_PCLK4(RCC_ClkInitStruct->APB4CLKDivider));
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->APBCFGR & RCC_APBCFGR_PPRE4))
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	699a      	ldr	r2, [r3, #24]
 8005ae0:	4b64      	ldr	r3, [pc, #400]	@ (8005c74 <HAL_RCC_ClockConfig+0x244>)
 8005ae2:	6a1b      	ldr	r3, [r3, #32]
 8005ae4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d908      	bls.n	8005afe <HAL_RCC_ClockConfig+0xce>
    {
      MODIFY_REG(RCC->APBCFGR, RCC_APBCFGR_PPRE4, (RCC_ClkInitStruct->APB4CLKDivider));
 8005aec:	4b61      	ldr	r3, [pc, #388]	@ (8005c74 <HAL_RCC_ClockConfig+0x244>)
 8005aee:	6a1b      	ldr	r3, [r3, #32]
 8005af0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	699b      	ldr	r3, [r3, #24]
 8005af8:	495e      	ldr	r1, [pc, #376]	@ (8005c74 <HAL_RCC_ClockConfig+0x244>)
 8005afa:	4313      	orrs	r3, r2
 8005afc:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK5 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f003 0320 	and.w	r3, r3, #32
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d010      	beq.n	8005b2c <HAL_RCC_ClockConfig+0xfc>
  {
    assert_param(IS_RCC_PCLK5(RCC_ClkInitStruct->APB5CLKDivider));
    if ((RCC_ClkInitStruct->APB5CLKDivider) > (RCC->APBCFGR & RCC_APBCFGR_PPRE5))
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	69da      	ldr	r2, [r3, #28]
 8005b0e:	4b59      	ldr	r3, [pc, #356]	@ (8005c74 <HAL_RCC_ClockConfig+0x244>)
 8005b10:	6a1b      	ldr	r3, [r3, #32]
 8005b12:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d908      	bls.n	8005b2c <HAL_RCC_ClockConfig+0xfc>
    {
      MODIFY_REG(RCC->APBCFGR, RCC_APBCFGR_PPRE5, (RCC_ClkInitStruct->APB5CLKDivider));
 8005b1a:	4b56      	ldr	r3, [pc, #344]	@ (8005c74 <HAL_RCC_ClockConfig+0x244>)
 8005b1c:	6a1b      	ldr	r3, [r3, #32]
 8005b1e:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	69db      	ldr	r3, [r3, #28]
 8005b26:	4953      	ldr	r1, [pc, #332]	@ (8005c74 <HAL_RCC_ClockConfig+0x244>)
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f003 0302 	and.w	r3, r3, #2
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d010      	beq.n	8005b5a <HAL_RCC_ClockConfig+0x12a>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->BMCFGR & RCC_BMCFGR_BMPRE))
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	68da      	ldr	r2, [r3, #12]
 8005b3c:	4b4d      	ldr	r3, [pc, #308]	@ (8005c74 <HAL_RCC_ClockConfig+0x244>)
 8005b3e:	69db      	ldr	r3, [r3, #28]
 8005b40:	f003 030f 	and.w	r3, r3, #15
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d908      	bls.n	8005b5a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      MODIFY_REG(RCC->BMCFGR, RCC_BMCFGR_BMPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b48:	4b4a      	ldr	r3, [pc, #296]	@ (8005c74 <HAL_RCC_ClockConfig+0x244>)
 8005b4a:	69db      	ldr	r3, [r3, #28]
 8005b4c:	f023 020f 	bic.w	r2, r3, #15
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	4947      	ldr	r1, [pc, #284]	@ (8005c74 <HAL_RCC_ClockConfig+0x244>)
 8005b56:	4313      	orrs	r3, r2
 8005b58:	61cb      	str	r3, [r1, #28]
    }
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f003 0301 	and.w	r3, r3, #1
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d055      	beq.n	8005c12 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    MODIFY_REG(RCC->CDCFGR, RCC_CDCFGR_CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005b66:	4b43      	ldr	r3, [pc, #268]	@ (8005c74 <HAL_RCC_ClockConfig+0x244>)
 8005b68:	699b      	ldr	r3, [r3, #24]
 8005b6a:	f023 020f 	bic.w	r2, r3, #15
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	4940      	ldr	r1, [pc, #256]	@ (8005c74 <HAL_RCC_ClockConfig+0x244>)
 8005b74:	4313      	orrs	r3, r2
 8005b76:	618b      	str	r3, [r1, #24]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	2b02      	cmp	r3, #2
 8005b7e:	d107      	bne.n	8005b90 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b80:	4b3c      	ldr	r3, [pc, #240]	@ (8005c74 <HAL_RCC_ClockConfig+0x244>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d121      	bne.n	8005bd0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	e0dc      	b.n	8005d4a <HAL_RCC_ClockConfig+0x31a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	2b03      	cmp	r3, #3
 8005b96:	d107      	bne.n	8005ba8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005b98:	4b36      	ldr	r3, [pc, #216]	@ (8005c74 <HAL_RCC_ClockConfig+0x244>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d115      	bne.n	8005bd0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	e0d0      	b.n	8005d4a <HAL_RCC_ClockConfig+0x31a>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d107      	bne.n	8005bc0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8005bb0:	4b30      	ldr	r3, [pc, #192]	@ (8005c74 <HAL_RCC_ClockConfig+0x244>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d109      	bne.n	8005bd0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e0c4      	b.n	8005d4a <HAL_RCC_ClockConfig+0x31a>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005bc0:	4b2c      	ldr	r3, [pc, #176]	@ (8005c74 <HAL_RCC_ClockConfig+0x244>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f003 0304 	and.w	r3, r3, #4
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d101      	bne.n	8005bd0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e0bc      	b.n	8005d4a <HAL_RCC_ClockConfig+0x31a>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005bd0:	4b28      	ldr	r3, [pc, #160]	@ (8005c74 <HAL_RCC_ClockConfig+0x244>)
 8005bd2:	691b      	ldr	r3, [r3, #16]
 8005bd4:	f023 0207 	bic.w	r2, r3, #7
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	4925      	ldr	r1, [pc, #148]	@ (8005c74 <HAL_RCC_ClockConfig+0x244>)
 8005bde:	4313      	orrs	r3, r2
 8005be0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005be2:	f7fb fd33 	bl	800164c <HAL_GetTick>
 8005be6:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005be8:	e00a      	b.n	8005c00 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005bea:	f7fb fd2f 	bl	800164c <HAL_GetTick>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	1ad3      	subs	r3, r2, r3
 8005bf4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d901      	bls.n	8005c00 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005bfc:	2303      	movs	r3, #3
 8005bfe:	e0a4      	b.n	8005d4a <HAL_RCC_ClockConfig+0x31a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c00:	4b1c      	ldr	r3, [pc, #112]	@ (8005c74 <HAL_RCC_ClockConfig+0x244>)
 8005c02:	691b      	ldr	r3, [r3, #16]
 8005c04:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	00db      	lsls	r3, r3, #3
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d1eb      	bne.n	8005bea <HAL_RCC_ClockConfig+0x1ba>
  }

  /* Decreasing the BUS frequency divider ? */

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f003 0302 	and.w	r3, r3, #2
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d010      	beq.n	8005c40 <HAL_RCC_ClockConfig+0x210>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->BMCFGR & RCC_BMCFGR_BMPRE))
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	68da      	ldr	r2, [r3, #12]
 8005c22:	4b14      	ldr	r3, [pc, #80]	@ (8005c74 <HAL_RCC_ClockConfig+0x244>)
 8005c24:	69db      	ldr	r3, [r3, #28]
 8005c26:	f003 030f 	and.w	r3, r3, #15
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d208      	bcs.n	8005c40 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      MODIFY_REG(RCC->BMCFGR, RCC_BMCFGR_BMPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c2e:	4b11      	ldr	r3, [pc, #68]	@ (8005c74 <HAL_RCC_ClockConfig+0x244>)
 8005c30:	69db      	ldr	r3, [r3, #28]
 8005c32:	f023 020f 	bic.w	r2, r3, #15
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	68db      	ldr	r3, [r3, #12]
 8005c3a:	490e      	ldr	r1, [pc, #56]	@ (8005c74 <HAL_RCC_ClockConfig+0x244>)
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	61cb      	str	r3, [r1, #28]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005c40:	4b0b      	ldr	r3, [pc, #44]	@ (8005c70 <HAL_RCC_ClockConfig+0x240>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005c48:	683a      	ldr	r2, [r7, #0]
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d214      	bcs.n	8005c78 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c4e:	4b08      	ldr	r3, [pc, #32]	@ (8005c70 <HAL_RCC_ClockConfig+0x240>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8005c56:	4906      	ldr	r1, [pc, #24]	@ (8005c70 <HAL_RCC_ClockConfig+0x240>)
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c5e:	4b04      	ldr	r3, [pc, #16]	@ (8005c70 <HAL_RCC_ClockConfig+0x240>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005c66:	683a      	ldr	r2, [r7, #0]
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d005      	beq.n	8005c78 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	e06c      	b.n	8005d4a <HAL_RCC_ClockConfig+0x31a>
 8005c70:	52002000 	.word	0x52002000
 8005c74:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f003 0304 	and.w	r3, r3, #4
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d010      	beq.n	8005ca6 <HAL_RCC_ClockConfig+0x276>
  {
    assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->APBCFGR & RCC_APBCFGR_PPRE1))
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	691a      	ldr	r2, [r3, #16]
 8005c88:	4b32      	ldr	r3, [pc, #200]	@ (8005d54 <HAL_RCC_ClockConfig+0x324>)
 8005c8a:	6a1b      	ldr	r3, [r3, #32]
 8005c8c:	f003 0307 	and.w	r3, r3, #7
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d208      	bcs.n	8005ca6 <HAL_RCC_ClockConfig+0x276>
    {
      MODIFY_REG(RCC->APBCFGR, RCC_APBCFGR_PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005c94:	4b2f      	ldr	r3, [pc, #188]	@ (8005d54 <HAL_RCC_ClockConfig+0x324>)
 8005c96:	6a1b      	ldr	r3, [r3, #32]
 8005c98:	f023 0207 	bic.w	r2, r3, #7
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	691b      	ldr	r3, [r3, #16]
 8005ca0:	492c      	ldr	r1, [pc, #176]	@ (8005d54 <HAL_RCC_ClockConfig+0x324>)
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f003 0308 	and.w	r3, r3, #8
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d010      	beq.n	8005cd4 <HAL_RCC_ClockConfig+0x2a4>
  {
    assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->APBCFGR & RCC_APBCFGR_PPRE2))
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	695a      	ldr	r2, [r3, #20]
 8005cb6:	4b27      	ldr	r3, [pc, #156]	@ (8005d54 <HAL_RCC_ClockConfig+0x324>)
 8005cb8:	6a1b      	ldr	r3, [r3, #32]
 8005cba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d208      	bcs.n	8005cd4 <HAL_RCC_ClockConfig+0x2a4>
    {
      MODIFY_REG(RCC->APBCFGR, RCC_APBCFGR_PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005cc2:	4b24      	ldr	r3, [pc, #144]	@ (8005d54 <HAL_RCC_ClockConfig+0x324>)
 8005cc4:	6a1b      	ldr	r3, [r3, #32]
 8005cc6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	695b      	ldr	r3, [r3, #20]
 8005cce:	4921      	ldr	r1, [pc, #132]	@ (8005d54 <HAL_RCC_ClockConfig+0x324>)
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK4 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f003 0310 	and.w	r3, r3, #16
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d010      	beq.n	8005d02 <HAL_RCC_ClockConfig+0x2d2>
  {
    assert_param(IS_RCC_PCLK4(RCC_ClkInitStruct->APB4CLKDivider));
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->APBCFGR & RCC_APBCFGR_PPRE4))
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	699a      	ldr	r2, [r3, #24]
 8005ce4:	4b1b      	ldr	r3, [pc, #108]	@ (8005d54 <HAL_RCC_ClockConfig+0x324>)
 8005ce6:	6a1b      	ldr	r3, [r3, #32]
 8005ce8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d208      	bcs.n	8005d02 <HAL_RCC_ClockConfig+0x2d2>
    {
      MODIFY_REG(RCC->APBCFGR, RCC_APBCFGR_PPRE4, (RCC_ClkInitStruct->APB4CLKDivider));
 8005cf0:	4b18      	ldr	r3, [pc, #96]	@ (8005d54 <HAL_RCC_ClockConfig+0x324>)
 8005cf2:	6a1b      	ldr	r3, [r3, #32]
 8005cf4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	699b      	ldr	r3, [r3, #24]
 8005cfc:	4915      	ldr	r1, [pc, #84]	@ (8005d54 <HAL_RCC_ClockConfig+0x324>)
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK5 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f003 0320 	and.w	r3, r3, #32
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d010      	beq.n	8005d30 <HAL_RCC_ClockConfig+0x300>
  {
    assert_param(IS_RCC_PCLK5(RCC_ClkInitStruct->APB5CLKDivider));
    if ((RCC_ClkInitStruct->APB5CLKDivider) < (RCC->APBCFGR & RCC_APBCFGR_PPRE5))
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	69da      	ldr	r2, [r3, #28]
 8005d12:	4b10      	ldr	r3, [pc, #64]	@ (8005d54 <HAL_RCC_ClockConfig+0x324>)
 8005d14:	6a1b      	ldr	r3, [r3, #32]
 8005d16:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d208      	bcs.n	8005d30 <HAL_RCC_ClockConfig+0x300>
    {
      MODIFY_REG(RCC->APBCFGR, RCC_APBCFGR_PPRE5, (RCC_ClkInitStruct->APB5CLKDivider));
 8005d1e:	4b0d      	ldr	r3, [pc, #52]	@ (8005d54 <HAL_RCC_ClockConfig+0x324>)
 8005d20:	6a1b      	ldr	r3, [r3, #32]
 8005d22:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	69db      	ldr	r3, [r3, #28]
 8005d2a:	490a      	ldr	r1, [pc, #40]	@ (8005d54 <HAL_RCC_ClockConfig+0x324>)
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable with the System CPU clock */
  SystemCoreClock = HAL_RCC_GetSysClockFreq();
 8005d30:	f000 f816 	bl	8005d60 <HAL_RCC_GetSysClockFreq>
 8005d34:	4603      	mov	r3, r0
 8005d36:	4a08      	ldr	r2, [pc, #32]	@ (8005d58 <HAL_RCC_ClockConfig+0x328>)
 8005d38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005d3a:	4b08      	ldr	r3, [pc, #32]	@ (8005d5c <HAL_RCC_ClockConfig+0x32c>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f7fb fc34 	bl	80015ac <HAL_InitTick>
 8005d44:	4603      	mov	r3, r0
 8005d46:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8005d48:	7afb      	ldrb	r3, [r7, #11]
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3710      	adds	r7, #16
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
 8005d52:	bf00      	nop
 8005d54:	58024400 	.word	0x58024400
 8005d58:	24000000 	.word	0x24000000
 8005d5c:	24000004 	.word	0x24000004

08005d60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b08b      	sub	sp, #44	@ 0x2c
 8005d64:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t prescaler;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d66:	4baa      	ldr	r3, [pc, #680]	@ (8006010 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8005d68:	691b      	ldr	r3, [r3, #16]
 8005d6a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005d6e:	2b18      	cmp	r3, #24
 8005d70:	f200 8136 	bhi.w	8005fe0 <HAL_RCC_GetSysClockFreq+0x280>
 8005d74:	a201      	add	r2, pc, #4	@ (adr r2, 8005d7c <HAL_RCC_GetSysClockFreq+0x1c>)
 8005d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d7a:	bf00      	nop
 8005d7c:	08005de1 	.word	0x08005de1
 8005d80:	08005fe1 	.word	0x08005fe1
 8005d84:	08005fe1 	.word	0x08005fe1
 8005d88:	08005fe1 	.word	0x08005fe1
 8005d8c:	08005fe1 	.word	0x08005fe1
 8005d90:	08005fe1 	.word	0x08005fe1
 8005d94:	08005fe1 	.word	0x08005fe1
 8005d98:	08005fe1 	.word	0x08005fe1
 8005d9c:	08005e07 	.word	0x08005e07
 8005da0:	08005fe1 	.word	0x08005fe1
 8005da4:	08005fe1 	.word	0x08005fe1
 8005da8:	08005fe1 	.word	0x08005fe1
 8005dac:	08005fe1 	.word	0x08005fe1
 8005db0:	08005fe1 	.word	0x08005fe1
 8005db4:	08005fe1 	.word	0x08005fe1
 8005db8:	08005fe1 	.word	0x08005fe1
 8005dbc:	08005e0d 	.word	0x08005e0d
 8005dc0:	08005fe1 	.word	0x08005fe1
 8005dc4:	08005fe1 	.word	0x08005fe1
 8005dc8:	08005fe1 	.word	0x08005fe1
 8005dcc:	08005fe1 	.word	0x08005fe1
 8005dd0:	08005fe1 	.word	0x08005fe1
 8005dd4:	08005fe1 	.word	0x08005fe1
 8005dd8:	08005fe1 	.word	0x08005fe1
 8005ddc:	08005e13 	.word	0x08005e13
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */

      if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 8005de0:	4b8b      	ldr	r3, [pc, #556]	@ (8006010 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f003 0320 	and.w	r3, r3, #32
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d009      	beq.n	8005e00 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005dec:	4b88      	ldr	r3, [pc, #544]	@ (8006010 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	08db      	lsrs	r3, r3, #3
 8005df2:	f003 0303 	and.w	r3, r3, #3
 8005df6:	4a87      	ldr	r2, [pc, #540]	@ (8006014 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8005df8:	fa22 f303 	lsr.w	r3, r2, r3
 8005dfc:	623b      	str	r3, [r7, #32]
      {
        /* Can't retrieve HSIDIV value */
        sysclockfreq = 0U;
      }

      break;
 8005dfe:	e0f2      	b.n	8005fe6 <HAL_RCC_GetSysClockFreq+0x286>
        sysclockfreq = 0U;
 8005e00:	2300      	movs	r3, #0
 8005e02:	623b      	str	r3, [r7, #32]
      break;
 8005e04:	e0ef      	b.n	8005fe6 <HAL_RCC_GetSysClockFreq+0x286>

    case RCC_SYSCLKSOURCE_STATUS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005e06:	4b84      	ldr	r3, [pc, #528]	@ (8006018 <HAL_RCC_GetSysClockFreq+0x2b8>)
 8005e08:	623b      	str	r3, [r7, #32]
      break;
 8005e0a:	e0ec      	b.n	8005fe6 <HAL_RCC_GetSysClockFreq+0x286>

    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005e0c:	4b83      	ldr	r3, [pc, #524]	@ (800601c <HAL_RCC_GetSysClockFreq+0x2bc>)
 8005e0e:	623b      	str	r3, [r7, #32]
      break;
 8005e10:	e0e9      	b.n	8005fe6 <HAL_RCC_GetSysClockFreq+0x286>
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005e12:	4b7f      	ldr	r3, [pc, #508]	@ (8006010 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8005e14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e16:	f003 0303 	and.w	r3, r3, #3
 8005e1a:	61fb      	str	r3, [r7, #28]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos)  ;
 8005e1c:	4b7c      	ldr	r3, [pc, #496]	@ (8006010 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8005e1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e20:	091b      	lsrs	r3, r3, #4
 8005e22:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005e26:	61bb      	str	r3, [r7, #24]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005e28:	4b79      	ldr	r3, [pc, #484]	@ (8006010 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8005e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e2c:	f003 0301 	and.w	r3, r3, #1
 8005e30:	617b      	str	r3, [r7, #20]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN) >> 3));
 8005e32:	4b77      	ldr	r3, [pc, #476]	@ (8006010 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8005e34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e36:	08db      	lsrs	r3, r3, #3
 8005e38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e3c:	697a      	ldr	r2, [r7, #20]
 8005e3e:	fb02 f303 	mul.w	r3, r2, r3
 8005e42:	ee07 3a90 	vmov	s15, r3
 8005e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e4a:	edc7 7a04 	vstr	s15, [r7, #16]

      if (pllm != 0U)
 8005e4e:	69bb      	ldr	r3, [r7, #24]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	f000 80c2 	beq.w	8005fda <HAL_RCC_GetSysClockFreq+0x27a>
      {
        switch (pllsource)
 8005e56:	69fb      	ldr	r3, [r7, #28]
 8005e58:	2b02      	cmp	r3, #2
 8005e5a:	d064      	beq.n	8005f26 <HAL_RCC_GetSysClockFreq+0x1c6>
 8005e5c:	69fb      	ldr	r3, [r7, #28]
 8005e5e:	2b02      	cmp	r3, #2
 8005e60:	f200 8083 	bhi.w	8005f6a <HAL_RCC_GetSysClockFreq+0x20a>
 8005e64:	69fb      	ldr	r3, [r7, #28]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d003      	beq.n	8005e72 <HAL_RCC_GetSysClockFreq+0x112>
 8005e6a:	69fb      	ldr	r3, [r7, #28]
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d038      	beq.n	8005ee2 <HAL_RCC_GetSysClockFreq+0x182>
 8005e70:	e07b      	b.n	8005f6a <HAL_RCC_GetSysClockFreq+0x20a>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 8005e72:	4b67      	ldr	r3, [pc, #412]	@ (8006010 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f003 0320 	and.w	r3, r3, #32
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d02d      	beq.n	8005eda <HAL_RCC_GetSysClockFreq+0x17a>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005e7e:	4b64      	ldr	r3, [pc, #400]	@ (8006010 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	08db      	lsrs	r3, r3, #3
 8005e84:	f003 0303 	and.w	r3, r3, #3
 8005e88:	4a62      	ldr	r2, [pc, #392]	@ (8006014 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8005e8a:	fa22 f303 	lsr.w	r3, r2, r3
 8005e8e:	60fb      	str	r3, [r7, #12]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVN) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	ee07 3a90 	vmov	s15, r3
 8005e96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e9a:	69bb      	ldr	r3, [r7, #24]
 8005e9c:	ee07 3a90 	vmov	s15, r3
 8005ea0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ea4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ea8:	4b59      	ldr	r3, [pc, #356]	@ (8006010 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8005eaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eb0:	ee07 3a90 	vmov	s15, r3
 8005eb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005eb8:	ed97 6a04 	vldr	s12, [r7, #16]
 8005ebc:	eddf 5a58 	vldr	s11, [pc, #352]	@ 8006020 <HAL_RCC_GetSysClockFreq+0x2c0>
 8005ec0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ec4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ec8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ecc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ed0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ed4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            else
            {
              /* Can't retrieve HSIDIV value */
              pllvco = (float_t)0;
            }
            break;
 8005ed8:	e069      	b.n	8005fae <HAL_RCC_GetSysClockFreq+0x24e>
              pllvco = (float_t)0;
 8005eda:	f04f 0300 	mov.w	r3, #0
 8005ede:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005ee0:	e065      	b.n	8005fae <HAL_RCC_GetSysClockFreq+0x24e>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVN) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ee2:	69bb      	ldr	r3, [r7, #24]
 8005ee4:	ee07 3a90 	vmov	s15, r3
 8005ee8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eec:	eddf 6a4d 	vldr	s13, [pc, #308]	@ 8006024 <HAL_RCC_GetSysClockFreq+0x2c4>
 8005ef0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ef4:	4b46      	ldr	r3, [pc, #280]	@ (8006010 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8005ef6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ef8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005efc:	ee07 3a90 	vmov	s15, r3
 8005f00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f04:	ed97 6a04 	vldr	s12, [r7, #16]
 8005f08:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006020 <HAL_RCC_GetSysClockFreq+0x2c0>
 8005f0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f14:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f20:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            break;
 8005f24:	e043      	b.n	8005fae <HAL_RCC_GetSysClockFreq+0x24e>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVN) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f26:	69bb      	ldr	r3, [r7, #24]
 8005f28:	ee07 3a90 	vmov	s15, r3
 8005f2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f30:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006028 <HAL_RCC_GetSysClockFreq+0x2c8>
 8005f34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f38:	4b35      	ldr	r3, [pc, #212]	@ (8006010 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8005f3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f40:	ee07 3a90 	vmov	s15, r3
 8005f44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f48:	ed97 6a04 	vldr	s12, [r7, #16]
 8005f4c:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006020 <HAL_RCC_GetSysClockFreq+0x2c0>
 8005f50:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f58:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f64:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            break;
 8005f68:	e021      	b.n	8005fae <HAL_RCC_GetSysClockFreq+0x24e>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVN) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f6a:	69bb      	ldr	r3, [r7, #24]
 8005f6c:	ee07 3a90 	vmov	s15, r3
 8005f70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f74:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8006024 <HAL_RCC_GetSysClockFreq+0x2c4>
 8005f78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f7c:	4b24      	ldr	r3, [pc, #144]	@ (8006010 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8005f7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f84:	ee07 3a90 	vmov	s15, r3
 8005f88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f8c:	ed97 6a04 	vldr	s12, [r7, #16]
 8005f90:	eddf 5a23 	vldr	s11, [pc, #140]	@ 8006020 <HAL_RCC_GetSysClockFreq+0x2c0>
 8005f94:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f98:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f9c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005fa0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fa8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            break;
 8005fac:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVP) >> RCC_PLL1DIVR1_DIVP_Pos) + 1U) ;
 8005fae:	4b18      	ldr	r3, [pc, #96]	@ (8006010 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8005fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fb2:	0a5b      	lsrs	r3, r3, #9
 8005fb4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005fb8:	3301      	adds	r3, #1
 8005fba:	60bb      	str	r3, [r7, #8]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	ee07 3a90 	vmov	s15, r3
 8005fc2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005fc6:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005fca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005fce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fd2:	ee17 3a90 	vmov	r3, s15
 8005fd6:	623b      	str	r3, [r7, #32]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005fd8:	e005      	b.n	8005fe6 <HAL_RCC_GetSysClockFreq+0x286>
        sysclockfreq = 0U;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	623b      	str	r3, [r7, #32]
      break;
 8005fde:	e002      	b.n	8005fe6 <HAL_RCC_GetSysClockFreq+0x286>

    default:
      sysclockfreq = CSI_VALUE;
 8005fe0:	4b0d      	ldr	r3, [pc, #52]	@ (8006018 <HAL_RCC_GetSysClockFreq+0x2b8>)
 8005fe2:	623b      	str	r3, [r7, #32]
      break;
 8005fe4:	bf00      	nop
  }

  prescaler = RCC->CDCFGR & RCC_CDCFGR_CPRE;
 8005fe6:	4b0a      	ldr	r3, [pc, #40]	@ (8006010 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8005fe8:	699b      	ldr	r3, [r3, #24]
 8005fea:	f003 030f 	and.w	r3, r3, #15
 8005fee:	607b      	str	r3, [r7, #4]
  if (prescaler >= 8U)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2b07      	cmp	r3, #7
 8005ff4:	d905      	bls.n	8006002 <HAL_RCC_GetSysClockFreq+0x2a2>
  {
    sysclockfreq = sysclockfreq >> (prescaler - RCC_CDCFGR_CPRE_3 + 1U);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	3b07      	subs	r3, #7
 8005ffa:	6a3a      	ldr	r2, [r7, #32]
 8005ffc:	fa22 f303 	lsr.w	r3, r2, r3
 8006000:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8006002:	6a3b      	ldr	r3, [r7, #32]
}
 8006004:	4618      	mov	r0, r3
 8006006:	372c      	adds	r7, #44	@ 0x2c
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr
 8006010:	58024400 	.word	0x58024400
 8006014:	03d09000 	.word	0x03d09000
 8006018:	003d0900 	.word	0x003d0900
 800601c:	016e3600 	.word	0x016e3600
 8006020:	46000000 	.word	0x46000000
 8006024:	4a742400 	.word	0x4a742400
 8006028:	4bb71b00 	.word	0x4bb71b00

0800602c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b084      	sub	sp, #16
 8006030:	af00      	add	r7, sp, #0
  uint32_t clock;
  uint32_t prescaler;
  const uint8_t AHBPrescTable[8] = {1U, 2U, 3U, 4U, 6U, 7U, 8U, 9U};
 8006032:	4a10      	ldr	r2, [pc, #64]	@ (8006074 <HAL_RCC_GetHCLKFreq+0x48>)
 8006034:	463b      	mov	r3, r7
 8006036:	e892 0003 	ldmia.w	r2, {r0, r1}
 800603a:	e883 0003 	stmia.w	r3, {r0, r1}

  /* SysClk */
  clock = HAL_RCC_GetSysClockFreq();
 800603e:	f7ff fe8f 	bl	8005d60 <HAL_RCC_GetSysClockFreq>
 8006042:	60f8      	str	r0, [r7, #12]
  /* Bus matrix divider */
  prescaler = (RCC->BMCFGR & RCC_BMCFGR_BMPRE) >> RCC_BMCFGR_BMPRE_Pos;
 8006044:	4b0c      	ldr	r3, [pc, #48]	@ (8006078 <HAL_RCC_GetHCLKFreq+0x4c>)
 8006046:	69db      	ldr	r3, [r3, #28]
 8006048:	f003 030f 	and.w	r3, r3, #15
 800604c:	60bb      	str	r3, [r7, #8]
  if (prescaler >= 8U)
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	2b07      	cmp	r3, #7
 8006052:	d909      	bls.n	8006068 <HAL_RCC_GetHCLKFreq+0x3c>
  {
    clock = clock >> AHBPrescTable[prescaler - 8U];
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	3b08      	subs	r3, #8
 8006058:	3310      	adds	r3, #16
 800605a:	443b      	add	r3, r7
 800605c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8006060:	461a      	mov	r2, r3
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	40d3      	lsrs	r3, r2
 8006066:	60fb      	str	r3, [r7, #12]
  }
  return (clock);
 8006068:	68fb      	ldr	r3, [r7, #12]
}
 800606a:	4618      	mov	r0, r3
 800606c:	3710      	adds	r7, #16
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}
 8006072:	bf00      	nop
 8006074:	08009524 	.word	0x08009524
 8006078:	58024400 	.word	0x58024400

0800607c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b082      	sub	sp, #8
 8006080:	af00      	add	r7, sp, #0
  uint32_t clock;
  uint32_t prescaler;
  /* Get HCLK source and compute PCLK1 frequency ---------------------------*/
  clock = HAL_RCC_GetHCLKFreq();
 8006082:	f7ff ffd3 	bl	800602c <HAL_RCC_GetHCLKFreq>
 8006086:	6078      	str	r0, [r7, #4]
  /* APB1 prescaler */
  prescaler = (RCC->APBCFGR & RCC_APBCFGR_PPRE1) >> RCC_APBCFGR_PPRE1_Pos;
 8006088:	4b09      	ldr	r3, [pc, #36]	@ (80060b0 <HAL_RCC_GetPCLK1Freq+0x34>)
 800608a:	6a1b      	ldr	r3, [r3, #32]
 800608c:	f003 0307 	and.w	r3, r3, #7
 8006090:	603b      	str	r3, [r7, #0]
  if (prescaler >= 4U)
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	2b03      	cmp	r3, #3
 8006096:	d905      	bls.n	80060a4 <HAL_RCC_GetPCLK1Freq+0x28>
  {
    clock = clock >> (prescaler - 3U);
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	3b03      	subs	r3, #3
 800609c:	687a      	ldr	r2, [r7, #4]
 800609e:	fa22 f303 	lsr.w	r3, r2, r3
 80060a2:	607b      	str	r3, [r7, #4]
  }
  return (clock);
 80060a4:	687b      	ldr	r3, [r7, #4]
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3708      	adds	r7, #8
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}
 80060ae:	bf00      	nop
 80060b0:	58024400 	.word	0x58024400

080060b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b082      	sub	sp, #8
 80060b8:	af00      	add	r7, sp, #0
  uint32_t clock;
  uint32_t prescaler;
  /* Get HCLK source and compute PCLK2 frequency ---------------------------*/
  clock = HAL_RCC_GetHCLKFreq();
 80060ba:	f7ff ffb7 	bl	800602c <HAL_RCC_GetHCLKFreq>
 80060be:	6078      	str	r0, [r7, #4]
  /* APB2 prescaler */
  prescaler = (RCC->APBCFGR & RCC_APBCFGR_PPRE2) >> RCC_APBCFGR_PPRE2_Pos;
 80060c0:	4b09      	ldr	r3, [pc, #36]	@ (80060e8 <HAL_RCC_GetPCLK2Freq+0x34>)
 80060c2:	6a1b      	ldr	r3, [r3, #32]
 80060c4:	091b      	lsrs	r3, r3, #4
 80060c6:	f003 0307 	and.w	r3, r3, #7
 80060ca:	603b      	str	r3, [r7, #0]
  if (prescaler >= 4U)
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	2b03      	cmp	r3, #3
 80060d0:	d905      	bls.n	80060de <HAL_RCC_GetPCLK2Freq+0x2a>
  {
    clock = clock >> (prescaler - 3U);
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	3b03      	subs	r3, #3
 80060d6:	687a      	ldr	r2, [r7, #4]
 80060d8:	fa22 f303 	lsr.w	r3, r2, r3
 80060dc:	607b      	str	r3, [r7, #4]
  }
  return (clock);
 80060de:	687b      	ldr	r3, [r7, #4]
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3708      	adds	r7, #8
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}
 80060e8:	58024400 	.word	0x58024400

080060ec <HAL_RCC_GetPCLK4Freq>:
  * @note   Each time PCLK4 changes, this function must be called to update the
  *         right PCLK4 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK4 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK4Freq(void)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b082      	sub	sp, #8
 80060f0:	af00      	add	r7, sp, #0
  uint32_t clock;
  uint32_t prescaler;
  /* Get HCLK source and compute PCLK4 frequency ---------------------------*/
  clock = HAL_RCC_GetHCLKFreq();
 80060f2:	f7ff ff9b 	bl	800602c <HAL_RCC_GetHCLKFreq>
 80060f6:	6078      	str	r0, [r7, #4]
  /* APB4 prescaler */
  prescaler = (RCC->APBCFGR & RCC_APBCFGR_PPRE4) >> RCC_APBCFGR_PPRE4_Pos;
 80060f8:	4b09      	ldr	r3, [pc, #36]	@ (8006120 <HAL_RCC_GetPCLK4Freq+0x34>)
 80060fa:	6a1b      	ldr	r3, [r3, #32]
 80060fc:	0a1b      	lsrs	r3, r3, #8
 80060fe:	f003 0307 	and.w	r3, r3, #7
 8006102:	603b      	str	r3, [r7, #0]
  if (prescaler >= 4U)
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	2b03      	cmp	r3, #3
 8006108:	d905      	bls.n	8006116 <HAL_RCC_GetPCLK4Freq+0x2a>
  {
    clock = clock >> (prescaler - 3U);
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	3b03      	subs	r3, #3
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	fa22 f303 	lsr.w	r3, r2, r3
 8006114:	607b      	str	r3, [r7, #4]
  }
  return (clock);
 8006116:	687b      	ldr	r3, [r7, #4]
}
 8006118:	4618      	mov	r0, r3
 800611a:	3708      	adds	r7, #8
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}
 8006120:	58024400 	.word	0x58024400

08006124 <HAL_RCC_GetPLL2QFreq>:
/**
  * @brief  Return the PLL2Q frequency.
  * @retval PLL2Q frequency in Hz
  */
uint32_t HAL_RCC_GetPLL2QFreq(void)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b082      	sub	sp, #8
 8006128:	af00      	add	r7, sp, #0
  uint32_t pllq;

  /* PLL2Q divider */
  pllq = ((RCC->PLL2DIVR1 & RCC_PLL2DIVR1_DIVQ) >> RCC_PLL2DIVR1_DIVQ_Pos) + 1U;
 800612a:	4b08      	ldr	r3, [pc, #32]	@ (800614c <HAL_RCC_GetPLL2QFreq+0x28>)
 800612c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800612e:	0c1b      	lsrs	r3, r3, #16
 8006130:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006134:	3301      	adds	r3, #1
 8006136:	607b      	str	r3, [r7, #4]

  /* Compute VCO output frequency and return PLL2Q one */
  return ((uint32_t)RCC_PLL2_GetVCOOutputFreq() / pllq);
 8006138:	f000 f976 	bl	8006428 <RCC_PLL2_GetVCOOutputFreq>
 800613c:	4602      	mov	r2, r0
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8006144:	4618      	mov	r0, r3
 8006146:	3708      	adds	r7, #8
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}
 800614c:	58024400 	.word	0x58024400

08006150 <HAL_RCC_GetPLL3QFreq>:
/**
  * @brief  Return the PLL3Q frequency.
  * @retval PLL3Q frequency in Hz
  */
uint32_t HAL_RCC_GetPLL3QFreq(void)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b082      	sub	sp, #8
 8006154:	af00      	add	r7, sp, #0
  uint32_t pllq;

  /* PLL3Q divider */
  pllq = ((RCC->PLL3DIVR1 & RCC_PLL3DIVR1_DIVQ) >> RCC_PLL3DIVR1_DIVQ_Pos) + 1U;
 8006156:	4b08      	ldr	r3, [pc, #32]	@ (8006178 <HAL_RCC_GetPLL3QFreq+0x28>)
 8006158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800615a:	0c1b      	lsrs	r3, r3, #16
 800615c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006160:	3301      	adds	r3, #1
 8006162:	607b      	str	r3, [r7, #4]

  /* Compute VCO output frequency and return PLL3Q one */
  return ((uint32_t)RCC_PLL3_GetVCOOutputFreq() / pllq);
 8006164:	f000 f9e6 	bl	8006534 <RCC_PLL3_GetVCOOutputFreq>
 8006168:	4602      	mov	r2, r0
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8006170:	4618      	mov	r0, r3
 8006172:	3708      	adds	r7, #8
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}
 8006178:	58024400 	.word	0x58024400

0800617c <RCC_PLL_Config>:
  * @note   PLL is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_PLL_Config(uint32_t PLLnumber, const RCC_PLLInitTypeDef *pPLLInit)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b08a      	sub	sp, #40	@ 0x28
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
 8006184:	6039      	str	r1, [r7, #0]
  __IO uint32_t *p_rcc_pll_divr1_reg;
  __IO uint32_t *p_rcc_pll_divr2_reg;
  __IO uint32_t *p_rcc_pll_fracr_reg;
  HAL_StatusTypeDef ret = HAL_OK;
 8006186:	2300      	movs	r3, #0
 8006188:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tickstart;
  uint32_t pllsrc;
  uint32_t pllvco;

  p_rcc_pll_divr1_reg = &(RCC->PLL1DIVR1) + (((uint32_t)0x02) * PLLnumber);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	00da      	lsls	r2, r3, #3
 8006190:	4b9a      	ldr	r3, [pc, #616]	@ (80063fc <RCC_PLL_Config+0x280>)
 8006192:	4413      	add	r3, r2
 8006194:	61fb      	str	r3, [r7, #28]
  p_rcc_pll_divr2_reg = &(RCC->PLL1DIVR2) + (((uint32_t)0x01) * PLLnumber);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	009a      	lsls	r2, r3, #2
 800619a:	4b99      	ldr	r3, [pc, #612]	@ (8006400 <RCC_PLL_Config+0x284>)
 800619c:	4413      	add	r3, r2
 800619e:	61bb      	str	r3, [r7, #24]

  /* Disable the post-dividers */
  CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLL1PEN | RCC_PLLCFGR_PLL1QEN | RCC_PLLCFGR_PLL1REN | RCC_PLLCFGR_PLL1SEN |
 80061a0:	4b98      	ldr	r3, [pc, #608]	@ (8006404 <RCC_PLL_Config+0x288>)
 80061a2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	4613      	mov	r3, r2
 80061a8:	009b      	lsls	r3, r3, #2
 80061aa:	4413      	add	r3, r2
 80061ac:	005b      	lsls	r3, r3, #1
 80061ae:	4413      	add	r3, r2
 80061b0:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 80061b4:	fa02 f303 	lsl.w	r3, r2, r3
 80061b8:	43db      	mvns	r3, r3
 80061ba:	4a92      	ldr	r2, [pc, #584]	@ (8006404 <RCC_PLL_Config+0x288>)
 80061bc:	400b      	ands	r3, r1
 80061be:	62d3      	str	r3, [r2, #44]	@ 0x2c
                           0x00000200U) /* Hardcoded because no definition in CMSIS */
            << ((RCC_PLLCFGR_PLL2PEN_Pos - RCC_PLLCFGR_PLL1PEN_Pos)*PLLnumber));

  /* Ensure PLLx is disabled */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL1ON << ((RCC_CR_PLL2ON_Pos - RCC_CR_PLL1ON_Pos)*PLLnumber));
 80061c0:	4b90      	ldr	r3, [pc, #576]	@ (8006404 <RCC_PLL_Config+0x288>)
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	005b      	lsls	r3, r3, #1
 80061c8:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 80061cc:	fa01 f303 	lsl.w	r3, r1, r3
 80061d0:	43db      	mvns	r3, r3
 80061d2:	498c      	ldr	r1, [pc, #560]	@ (8006404 <RCC_PLL_Config+0x288>)
 80061d4:	4013      	ands	r3, r2
 80061d6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80061d8:	f7fb fa38 	bl	800164c <HAL_GetTick>
 80061dc:	6178      	str	r0, [r7, #20]

  /* Wait till PLLx is disabled */
  while (READ_BIT(RCC->CR, (RCC_CR_PLL1RDY << ((RCC_CR_PLL2RDY_Pos - RCC_CR_PLL1RDY_Pos)*PLLnumber))) != 0U)
 80061de:	e008      	b.n	80061f2 <RCC_PLL_Config+0x76>
  {
    if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80061e0:	f7fb fa34 	bl	800164c <HAL_GetTick>
 80061e4:	4602      	mov	r2, r0
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	1ad3      	subs	r3, r2, r3
 80061ea:	2b32      	cmp	r3, #50	@ 0x32
 80061ec:	d901      	bls.n	80061f2 <RCC_PLL_Config+0x76>
    {
      return HAL_TIMEOUT;
 80061ee:	2303      	movs	r3, #3
 80061f0:	e0ff      	b.n	80063f2 <RCC_PLL_Config+0x276>
  while (READ_BIT(RCC->CR, (RCC_CR_PLL1RDY << ((RCC_CR_PLL2RDY_Pos - RCC_CR_PLL1RDY_Pos)*PLLnumber))) != 0U)
 80061f2:	4b84      	ldr	r3, [pc, #528]	@ (8006404 <RCC_PLL_Config+0x288>)
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	005b      	lsls	r3, r3, #1
 80061fa:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80061fe:	fa01 f303 	lsl.w	r3, r1, r3
 8006202:	4013      	ands	r3, r2
 8006204:	2b00      	cmp	r3, #0
 8006206:	d1eb      	bne.n	80061e0 <RCC_PLL_Config+0x64>
    }
  }

  if (pPLLInit->PLLState == RCC_PLL_ON)
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	2b02      	cmp	r3, #2
 800620e:	f040 80dd 	bne.w	80063cc <RCC_PLL_Config+0x250>
    assert_param(IS_RCC_PLLQ_VALUE(pPLLInit->PLLQ));
    assert_param(IS_RCC_PLLR_VALUE(pPLLInit->PLLR));
    assert_param(IS_RCC_PLLS_VALUE(pPLLInit->PLLS));
    assert_param(IS_RCC_PLLT_VALUE(pPLLInit->PLLT));

    pllsrc = pPLLInit->PLLSource;
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	613b      	str	r3, [r7, #16]

    /* Compute VCO input frequency and define range accordingly. First check clock source frequency */
    if (pllsrc == RCC_PLLSOURCE_HSI)
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d109      	bne.n	8006232 <RCC_PLL_Config+0xb6>
    {
      /* Clock source is HSI or HSI/HSIDIV */
      pllvco = HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV) >> RCC_CR_HSIDIV_Pos);
 800621e:	4b79      	ldr	r3, [pc, #484]	@ (8006404 <RCC_PLL_Config+0x288>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	08db      	lsrs	r3, r3, #3
 8006224:	f003 0303 	and.w	r3, r3, #3
 8006228:	4a77      	ldr	r2, [pc, #476]	@ (8006408 <RCC_PLL_Config+0x28c>)
 800622a:	fa22 f303 	lsr.w	r3, r2, r3
 800622e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006230:	e007      	b.n	8006242 <RCC_PLL_Config+0xc6>
    }
    else if (pllsrc == RCC_PLLSOURCE_HSE)
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	2b02      	cmp	r3, #2
 8006236:	d102      	bne.n	800623e <RCC_PLL_Config+0xc2>
    {
      /* Clock source is HSE */
      pllvco = HSE_VALUE;
 8006238:	4b74      	ldr	r3, [pc, #464]	@ (800640c <RCC_PLL_Config+0x290>)
 800623a:	627b      	str	r3, [r7, #36]	@ 0x24
 800623c:	e001      	b.n	8006242 <RCC_PLL_Config+0xc6>
    }
    else
    {
      /* Clock source is CSI */
      pllvco = CSI_VALUE;
 800623e:	4b74      	ldr	r3, [pc, #464]	@ (8006410 <RCC_PLL_Config+0x294>)
 8006240:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* Compute VCO input frequency depending on M divider */
    pllvco = (pllvco / pPLLInit->PLLM);
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006248:	fbb2 f3f3 	udiv	r3, r2, r3
 800624c:	627b      	str	r3, [r7, #36]	@ 0x24
    assert_param(IS_RCC_PLL_VCOINPUTFREQ(pllvco));

    if (pllvco >= RCC_PLL_INPUTRANGE2_FREQMAX)
 800624e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006250:	4a70      	ldr	r2, [pc, #448]	@ (8006414 <RCC_PLL_Config+0x298>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d302      	bcc.n	800625c <RCC_PLL_Config+0xe0>
    {
      pllvco = RCC_PLL_VCOINPUT_RANGE3 | RCC_PLL_VCO_HIGH;
 8006256:	2318      	movs	r3, #24
 8006258:	627b      	str	r3, [r7, #36]	@ 0x24
 800625a:	e00f      	b.n	800627c <RCC_PLL_Config+0x100>
    }
    else if (pllvco >= RCC_PLL_INPUTRANGE1_FREQMAX)
 800625c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800625e:	4a6e      	ldr	r2, [pc, #440]	@ (8006418 <RCC_PLL_Config+0x29c>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d902      	bls.n	800626a <RCC_PLL_Config+0xee>
    {
      pllvco = RCC_PLL_VCOINPUT_RANGE2 | RCC_PLL_VCO_HIGH;
 8006264:	2310      	movs	r3, #16
 8006266:	627b      	str	r3, [r7, #36]	@ 0x24
 8006268:	e008      	b.n	800627c <RCC_PLL_Config+0x100>
    }
    else if (pllvco >= RCC_PLL_INPUTRANGE0_FREQMAX)
 800626a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800626c:	4a6b      	ldr	r2, [pc, #428]	@ (800641c <RCC_PLL_Config+0x2a0>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d902      	bls.n	8006278 <RCC_PLL_Config+0xfc>
    {
      pllvco = RCC_PLL_VCOINPUT_RANGE1 | RCC_PLL_VCO_HIGH;
 8006272:	2308      	movs	r3, #8
 8006274:	627b      	str	r3, [r7, #36]	@ 0x24
 8006276:	e001      	b.n	800627c <RCC_PLL_Config+0x100>
    }
    else
    {
      pllvco = RCC_PLL_VCOINPUT_RANGE0 | RCC_PLL_VCO_LOW;
 8006278:	2302      	movs	r3, #2
 800627a:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    pllvco = (pllvco << ((RCC_PLLCFGR_PLL2RGE_Pos - RCC_PLLCFGR_PLL1RGE_Pos) * PLLnumber));
 800627c:	687a      	ldr	r2, [r7, #4]
 800627e:	4613      	mov	r3, r2
 8006280:	009b      	lsls	r3, r3, #2
 8006282:	4413      	add	r3, r2
 8006284:	005b      	lsls	r3, r3, #1
 8006286:	4413      	add	r3, r2
 8006288:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800628a:	fa02 f303 	lsl.w	r3, r2, r3
 800628e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Configure PLL source and PLLM divider */
    MODIFY_REG(RCC->PLLCKSELR, (RCC_PLLCKSELR_PLLSRC | (RCC_PLLCKSELR_DIVM1 << ((RCC_PLLCKSELR_DIVM2_Pos - RCC_PLLCKSELR_DIVM1_Pos)*PLLnumber))), \
 8006290:	4b5c      	ldr	r3, [pc, #368]	@ (8006404 <RCC_PLL_Config+0x288>)
 8006292:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	00db      	lsls	r3, r3, #3
 8006298:	f44f 717c 	mov.w	r1, #1008	@ 0x3f0
 800629c:	fa01 f303 	lsl.w	r3, r1, r3
 80062a0:	f043 0303 	orr.w	r3, r3, #3
 80062a4:	43db      	mvns	r3, r3
 80062a6:	401a      	ands	r2, r3
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	6899      	ldr	r1, [r3, #8]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	00db      	lsls	r3, r3, #3
 80062b0:	3304      	adds	r3, #4
 80062b2:	4099      	lsls	r1, r3
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	430b      	orrs	r3, r1
 80062b8:	4952      	ldr	r1, [pc, #328]	@ (8006404 <RCC_PLL_Config+0x288>)
 80062ba:	4313      	orrs	r3, r2
 80062bc:	628b      	str	r3, [r1, #40]	@ 0x28
               pllsrc | (pPLLInit->PLLM << (RCC_PLLCKSELR_DIVM1_Pos + ((RCC_PLLCKSELR_DIVM2_Pos - RCC_PLLCKSELR_DIVM1_Pos)*PLLnumber))));

    if ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) != pllsrc)
 80062be:	4b51      	ldr	r3, [pc, #324]	@ (8006404 <RCC_PLL_Config+0x288>)
 80062c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062c2:	f003 0303 	and.w	r3, r3, #3
 80062c6:	693a      	ldr	r2, [r7, #16]
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d001      	beq.n	80062d0 <RCC_PLL_Config+0x154>
    {
      /* There is another PLL activated with another source */
      return HAL_ERROR;
 80062cc:	2301      	movs	r3, #1
 80062ce:	e090      	b.n	80063f2 <RCC_PLL_Config+0x276>
    }

    /* Configure VCO input range, VCO selection and clear FRACEN */
    MODIFY_REG(RCC->PLLCFGR, (RCC_PLLCFGR_PLL1RGE | RCC_PLLCFGR_PLL1VCOSEL | RCC_PLLCFGR_PLL1FRACEN) << (((RCC_PLLCFGR_PLL2RGE_Pos - RCC_PLLCFGR_PLL1RGE_Pos)*PLLnumber)), \
 80062d0:	4b4c      	ldr	r3, [pc, #304]	@ (8006404 <RCC_PLL_Config+0x288>)
 80062d2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	4613      	mov	r3, r2
 80062d8:	009b      	lsls	r3, r3, #2
 80062da:	4413      	add	r3, r2
 80062dc:	005b      	lsls	r3, r3, #1
 80062de:	4413      	add	r3, r2
 80062e0:	221b      	movs	r2, #27
 80062e2:	fa02 f303 	lsl.w	r3, r2, r3
 80062e6:	43db      	mvns	r3, r3
 80062e8:	ea01 0203 	and.w	r2, r1, r3
 80062ec:	4945      	ldr	r1, [pc, #276]	@ (8006404 <RCC_PLL_Config+0x288>)
 80062ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062f0:	4313      	orrs	r3, r2
 80062f2:	62cb      	str	r3, [r1, #44]	@ 0x2c
               pllvco);

    /* Configure PLLN, PLLP, PLLQ, PLLR, PLLS and PLLT dividers */
    WRITE_REG(*p_rcc_pll_divr1_reg, ((pPLLInit->PLLN - 1U) |
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	68db      	ldr	r3, [r3, #12]
 80062f8:	1e5a      	subs	r2, r3, #1
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	691b      	ldr	r3, [r3, #16]
 80062fe:	3b01      	subs	r3, #1
 8006300:	025b      	lsls	r3, r3, #9
 8006302:	431a      	orrs	r2, r3
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	695b      	ldr	r3, [r3, #20]
 8006308:	3b01      	subs	r3, #1
 800630a:	041b      	lsls	r3, r3, #16
 800630c:	431a      	orrs	r2, r3
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	699b      	ldr	r3, [r3, #24]
 8006312:	3b01      	subs	r3, #1
 8006314:	061b      	lsls	r3, r3, #24
 8006316:	431a      	orrs	r2, r3
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	601a      	str	r2, [r3, #0]
                                     ((pPLLInit->PLLP - 1U) << RCC_PLL1DIVR1_DIVP_Pos) |
                                     ((pPLLInit->PLLQ - 1U) << RCC_PLL1DIVR1_DIVQ_Pos) |
                                     ((pPLLInit->PLLR - 1U) << RCC_PLL1DIVR1_DIVR_Pos)));
    WRITE_REG(*p_rcc_pll_divr2_reg, ((pPLLInit->PLLS - 1U) |
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	69db      	ldr	r3, [r3, #28]
 8006320:	1e5a      	subs	r2, r3, #1
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	6a1b      	ldr	r3, [r3, #32]
 8006326:	3b01      	subs	r3, #1
 8006328:	021b      	lsls	r3, r3, #8
 800632a:	431a      	orrs	r2, r3
 800632c:	69bb      	ldr	r3, [r7, #24]
 800632e:	601a      	str	r2, [r3, #0]
                                     ((pPLLInit->PLLT - 1U) << RCC_PLL2DIVR2_DIVT_Pos)));

    if (PLLnumber == RCC_PLL1_CONFIG)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d105      	bne.n	8006342 <RCC_PLL_Config+0x1c6>
    {
      SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL1PEN);
 8006336:	4b33      	ldr	r3, [pc, #204]	@ (8006404 <RCC_PLL_Config+0x288>)
 8006338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800633a:	4a32      	ldr	r2, [pc, #200]	@ (8006404 <RCC_PLL_Config+0x288>)
 800633c:	f043 0320 	orr.w	r3, r3, #32
 8006340:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    if (pPLLInit->PLLFractional != 0U)
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006346:	2b00      	cmp	r3, #0
 8006348:	d01c      	beq.n	8006384 <RCC_PLL_Config+0x208>
    {
      assert_param(IS_RCC_PLLFRACN_VALUE(pPLLInit->PLLFractional));

      p_rcc_pll_fracr_reg = &(RCC->PLL1FRACR) + (((uint32_t)0x02) * PLLnumber);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	00da      	lsls	r2, r3, #3
 800634e:	4b34      	ldr	r3, [pc, #208]	@ (8006420 <RCC_PLL_Config+0x2a4>)
 8006350:	4413      	add	r3, r2
 8006352:	60fb      	str	r3, [r7, #12]

      /* Configure PLLFRACN */
      MODIFY_REG(*p_rcc_pll_fracr_reg, RCC_PLL1FRACR_FRACN, pPLLInit->PLLFractional << RCC_PLL1FRACR_FRACN_Pos);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	4b32      	ldr	r3, [pc, #200]	@ (8006424 <RCC_PLL_Config+0x2a8>)
 800635a:	4013      	ands	r3, r2
 800635c:	683a      	ldr	r2, [r7, #0]
 800635e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006360:	00d2      	lsls	r2, r2, #3
 8006362:	431a      	orrs	r2, r3
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	601a      	str	r2, [r3, #0]

      /* Enable PLLFRACLE */
      SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL1FRACEN << ((RCC_PLLCFGR_PLL2FRACEN_Pos - RCC_PLLCFGR_PLL1FRACEN_Pos)*PLLnumber));
 8006368:	4b26      	ldr	r3, [pc, #152]	@ (8006404 <RCC_PLL_Config+0x288>)
 800636a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	4613      	mov	r3, r2
 8006370:	009b      	lsls	r3, r3, #2
 8006372:	4413      	add	r3, r2
 8006374:	005b      	lsls	r3, r3, #1
 8006376:	4413      	add	r3, r2
 8006378:	2201      	movs	r2, #1
 800637a:	fa02 f303 	lsl.w	r3, r2, r3
 800637e:	4a21      	ldr	r2, [pc, #132]	@ (8006404 <RCC_PLL_Config+0x288>)
 8006380:	430b      	orrs	r3, r1
 8006382:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable the PLLx */
    SET_BIT(RCC->CR, RCC_CR_PLL1ON << ((RCC_CR_PLL2ON_Pos - RCC_CR_PLL1ON_Pos)*PLLnumber));
 8006384:	4b1f      	ldr	r3, [pc, #124]	@ (8006404 <RCC_PLL_Config+0x288>)
 8006386:	681a      	ldr	r2, [r3, #0]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	005b      	lsls	r3, r3, #1
 800638c:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8006390:	fa01 f303 	lsl.w	r3, r1, r3
 8006394:	491b      	ldr	r1, [pc, #108]	@ (8006404 <RCC_PLL_Config+0x288>)
 8006396:	4313      	orrs	r3, r2
 8006398:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800639a:	f7fb f957 	bl	800164c <HAL_GetTick>
 800639e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLx is ready */
    while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY << ((RCC_CR_PLL2RDY_Pos - RCC_CR_PLL1RDY_Pos)*PLLnumber)) == 0U)
 80063a0:	e008      	b.n	80063b4 <RCC_PLL_Config+0x238>
    {
      if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80063a2:	f7fb f953 	bl	800164c <HAL_GetTick>
 80063a6:	4602      	mov	r2, r0
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	1ad3      	subs	r3, r2, r3
 80063ac:	2b32      	cmp	r3, #50	@ 0x32
 80063ae:	d901      	bls.n	80063b4 <RCC_PLL_Config+0x238>
      {
        return HAL_TIMEOUT;
 80063b0:	2303      	movs	r3, #3
 80063b2:	e01e      	b.n	80063f2 <RCC_PLL_Config+0x276>
    while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY << ((RCC_CR_PLL2RDY_Pos - RCC_CR_PLL1RDY_Pos)*PLLnumber)) == 0U)
 80063b4:	4b13      	ldr	r3, [pc, #76]	@ (8006404 <RCC_PLL_Config+0x288>)
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	005b      	lsls	r3, r3, #1
 80063bc:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80063c0:	fa01 f303 	lsl.w	r3, r1, r3
 80063c4:	4013      	ands	r3, r2
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d0eb      	beq.n	80063a2 <RCC_PLL_Config+0x226>
 80063ca:	e010      	b.n	80063ee <RCC_PLL_Config+0x272>
    }
  }
  else
  {
    /* Disable outputs to save power when PLLx is off */
    MODIFY_REG(RCC->PLLCKSELR, ((RCC_PLLCKSELR_DIVM1 << (RCC_PLLCKSELR_DIVM1_Pos + ((RCC_PLLCKSELR_DIVM2_Pos - RCC_PLLCKSELR_DIVM1_Pos)*PLLnumber)))
 80063cc:	4b0d      	ldr	r3, [pc, #52]	@ (8006404 <RCC_PLL_Config+0x288>)
 80063ce:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	00db      	lsls	r3, r3, #3
 80063d4:	3304      	adds	r3, #4
 80063d6:	f44f 717c 	mov.w	r1, #1008	@ 0x3f0
 80063da:	fa01 f303 	lsl.w	r3, r1, r3
 80063de:	f043 0303 	orr.w	r3, r3, #3
 80063e2:	43db      	mvns	r3, r3
 80063e4:	4013      	ands	r3, r2
 80063e6:	4a07      	ldr	r2, [pc, #28]	@ (8006404 <RCC_PLL_Config+0x288>)
 80063e8:	f043 0303 	orr.w	r3, r3, #3
 80063ec:	6293      	str	r3, [r2, #40]	@ 0x28
                                | RCC_PLLCKSELR_PLLSRC), RCC_PLLSOURCE_NONE);
  }

  return ret;
 80063ee:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3728      	adds	r7, #40	@ 0x28
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop
 80063fc:	58024430 	.word	0x58024430
 8006400:	580244c0 	.word	0x580244c0
 8006404:	58024400 	.word	0x58024400
 8006408:	03d09000 	.word	0x03d09000
 800640c:	016e3600 	.word	0x016e3600
 8006410:	003d0900 	.word	0x003d0900
 8006414:	007a1200 	.word	0x007a1200
 8006418:	003d08ff 	.word	0x003d08ff
 800641c:	001e847f 	.word	0x001e847f
 8006420:	58024434 	.word	0x58024434
 8006424:	ffff0007 	.word	0xffff0007

08006428 <RCC_PLL2_GetVCOOutputFreq>:
/**
  * @brief  Compute PLL2 VCO output frequency
  * @retval Value of PLL2 VCO output frequency
  */
static uint32_t RCC_PLL2_GetVCOOutputFreq(void)
{
 8006428:	b480      	push	{r7}
 800642a:	b089      	sub	sp, #36	@ 0x24
 800642c:	af00      	add	r7, sp, #0
  uint32_t plln;
  uint32_t pllfracn;
  float_t frequency;

  /* Get PLL2 CKSELR and DIVR register values */
  tmpreg1 = RCC->PLLCKSELR;
 800642e:	4b3c      	ldr	r3, [pc, #240]	@ (8006520 <RCC_PLL2_GetVCOOutputFreq+0xf8>)
 8006430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006432:	617b      	str	r3, [r7, #20]
  tmpreg2 = RCC->PLL2DIVR1;
 8006434:	4b3a      	ldr	r3, [pc, #232]	@ (8006520 <RCC_PLL2_GetVCOOutputFreq+0xf8>)
 8006436:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006438:	613b      	str	r3, [r7, #16]

  /* Retrieve PLL2 multiplication factor and divider */
  pllm = (tmpreg1 & RCC_PLLCKSELR_DIVM2) >> RCC_PLLCKSELR_DIVM2_Pos;
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	0b1b      	lsrs	r3, r3, #12
 800643e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006442:	60fb      	str	r3, [r7, #12]
  plln = (tmpreg2 & RCC_PLL2DIVR1_DIVN) + 1U;
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800644a:	3301      	adds	r3, #1
 800644c:	60bb      	str	r3, [r7, #8]

  if (pllm == 0U)
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d101      	bne.n	8006458 <RCC_PLL2_GetVCOOutputFreq+0x30>
  {
    /* Prescaler disabled */
    return 0U;
 8006454:	2300      	movs	r3, #0
 8006456:	e05c      	b.n	8006512 <RCC_PLL2_GetVCOOutputFreq+0xea>
  }

  /* Check if fractional part is enable */
  if ((RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) != 0U)
 8006458:	4b31      	ldr	r3, [pc, #196]	@ (8006520 <RCC_PLL2_GetVCOOutputFreq+0xf8>)
 800645a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800645c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006460:	2b00      	cmp	r3, #0
 8006462:	d006      	beq.n	8006472 <RCC_PLL2_GetVCOOutputFreq+0x4a>
  {
    pllfracn = (RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN) >> RCC_PLL2FRACR_FRACN_Pos;
 8006464:	4b2e      	ldr	r3, [pc, #184]	@ (8006520 <RCC_PLL2_GetVCOOutputFreq+0xf8>)
 8006466:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006468:	08db      	lsrs	r3, r3, #3
 800646a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800646e:	61bb      	str	r3, [r7, #24]
 8006470:	e001      	b.n	8006476 <RCC_PLL2_GetVCOOutputFreq+0x4e>
  }
  else
  {
    pllfracn = 0U;
 8006472:	2300      	movs	r3, #0
 8006474:	61bb      	str	r3, [r7, #24]
  }

  /* determine PLL source */
  switch (tmpreg1 & RCC_PLLCKSELR_PLLSRC)
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	f003 0303 	and.w	r3, r3, #3
 800647c:	2b02      	cmp	r3, #2
 800647e:	d019      	beq.n	80064b4 <RCC_PLL2_GetVCOOutputFreq+0x8c>
 8006480:	2b02      	cmp	r3, #2
 8006482:	d81d      	bhi.n	80064c0 <RCC_PLL2_GetVCOOutputFreq+0x98>
 8006484:	2b00      	cmp	r3, #0
 8006486:	d002      	beq.n	800648e <RCC_PLL2_GetVCOOutputFreq+0x66>
 8006488:	2b01      	cmp	r3, #1
 800648a:	d016      	beq.n	80064ba <RCC_PLL2_GetVCOOutputFreq+0x92>
 800648c:	e018      	b.n	80064c0 <RCC_PLL2_GetVCOOutputFreq+0x98>
  {
    /* HSI used as PLL2 clock source */
    case RCC_PLLSOURCE_HSI:
      if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 800648e:	4b24      	ldr	r3, [pc, #144]	@ (8006520 <RCC_PLL2_GetVCOOutputFreq+0xf8>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f003 0320 	and.w	r3, r3, #32
 8006496:	2b00      	cmp	r3, #0
 8006498:	d009      	beq.n	80064ae <RCC_PLL2_GetVCOOutputFreq+0x86>
      {
        pllsrc = HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV) >> RCC_CR_HSIDIV_Pos);
 800649a:	4b21      	ldr	r3, [pc, #132]	@ (8006520 <RCC_PLL2_GetVCOOutputFreq+0xf8>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	08db      	lsrs	r3, r3, #3
 80064a0:	f003 0303 	and.w	r3, r3, #3
 80064a4:	4a1f      	ldr	r2, [pc, #124]	@ (8006524 <RCC_PLL2_GetVCOOutputFreq+0xfc>)
 80064a6:	fa22 f303 	lsr.w	r3, r2, r3
 80064aa:	61fb      	str	r3, [r7, #28]
      else
      {
        /* Can't retrieve HSIDIV value */
        pllsrc = 0U;
      }
      break;
 80064ac:	e00b      	b.n	80064c6 <RCC_PLL2_GetVCOOutputFreq+0x9e>
        pllsrc = 0U;
 80064ae:	2300      	movs	r3, #0
 80064b0:	61fb      	str	r3, [r7, #28]
      break;
 80064b2:	e008      	b.n	80064c6 <RCC_PLL2_GetVCOOutputFreq+0x9e>

    /* HSE used as PLL2 clock source */
    case RCC_PLLSOURCE_HSE:
      pllsrc = HSE_VALUE;
 80064b4:	4b1c      	ldr	r3, [pc, #112]	@ (8006528 <RCC_PLL2_GetVCOOutputFreq+0x100>)
 80064b6:	61fb      	str	r3, [r7, #28]
      break;
 80064b8:	e005      	b.n	80064c6 <RCC_PLL2_GetVCOOutputFreq+0x9e>

    /* CSI used as PLL2 clock source */
    case RCC_PLLSOURCE_CSI:
      pllsrc = CSI_VALUE;
 80064ba:	4b1c      	ldr	r3, [pc, #112]	@ (800652c <RCC_PLL2_GetVCOOutputFreq+0x104>)
 80064bc:	61fb      	str	r3, [r7, #28]
      break;
 80064be:	e002      	b.n	80064c6 <RCC_PLL2_GetVCOOutputFreq+0x9e>

    default:
      pllsrc = 0U;
 80064c0:	2300      	movs	r3, #0
 80064c2:	61fb      	str	r3, [r7, #28]
      break;
 80064c4:	bf00      	nop
  }

  /* Compute VCO output frequency */
  frequency = ((float_t)pllsrc / (float_t)pllm) * ((float_t)plln + ((float_t)pllfracn / (float_t)0x2000U));
 80064c6:	69fb      	ldr	r3, [r7, #28]
 80064c8:	ee07 3a90 	vmov	s15, r3
 80064cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	ee07 3a90 	vmov	s15, r3
 80064d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	ee07 3a90 	vmov	s15, r3
 80064e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064e8:	69bb      	ldr	r3, [r7, #24]
 80064ea:	ee07 3a90 	vmov	s15, r3
 80064ee:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 80064f2:	eddf 5a0f 	vldr	s11, [pc, #60]	@ 8006530 <RCC_PLL2_GetVCOOutputFreq+0x108>
 80064f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006502:	edc7 7a01 	vstr	s15, [r7, #4]
  
  return (uint32_t)frequency;
 8006506:	edd7 7a01 	vldr	s15, [r7, #4]
 800650a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800650e:	ee17 3a90 	vmov	r3, s15
}
 8006512:	4618      	mov	r0, r3
 8006514:	3724      	adds	r7, #36	@ 0x24
 8006516:	46bd      	mov	sp, r7
 8006518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651c:	4770      	bx	lr
 800651e:	bf00      	nop
 8006520:	58024400 	.word	0x58024400
 8006524:	03d09000 	.word	0x03d09000
 8006528:	016e3600 	.word	0x016e3600
 800652c:	003d0900 	.word	0x003d0900
 8006530:	46000000 	.word	0x46000000

08006534 <RCC_PLL3_GetVCOOutputFreq>:
/**
  * @brief  Compute PLL3 VCO output frequency
  * @retval Value of PLL3 VCO output frequency
  */
static uint32_t RCC_PLL3_GetVCOOutputFreq(void)
{
 8006534:	b480      	push	{r7}
 8006536:	b089      	sub	sp, #36	@ 0x24
 8006538:	af00      	add	r7, sp, #0
  uint32_t plln;
  uint32_t pllfracn;
  float_t frequency;

  /* Get PLL3 CKSELR and DIVR register values */
  tmpreg1 = RCC->PLLCKSELR;
 800653a:	4b3c      	ldr	r3, [pc, #240]	@ (800662c <RCC_PLL3_GetVCOOutputFreq+0xf8>)
 800653c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800653e:	617b      	str	r3, [r7, #20]
  tmpreg2 = RCC->PLL3DIVR1;
 8006540:	4b3a      	ldr	r3, [pc, #232]	@ (800662c <RCC_PLL3_GetVCOOutputFreq+0xf8>)
 8006542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006544:	613b      	str	r3, [r7, #16]

  /* Retrieve PLL3 multiplication factor and divider */
  pllm = (tmpreg1 & RCC_PLLCKSELR_DIVM3) >> RCC_PLLCKSELR_DIVM3_Pos;
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	0d1b      	lsrs	r3, r3, #20
 800654a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800654e:	60fb      	str	r3, [r7, #12]
  plln = (tmpreg2 & RCC_PLL3DIVR1_DIVN) + 1U;
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006556:	3301      	adds	r3, #1
 8006558:	60bb      	str	r3, [r7, #8]

  if (pllm == 0U)
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d101      	bne.n	8006564 <RCC_PLL3_GetVCOOutputFreq+0x30>
  {
    /* Prescaler disabled */
    return 0U;
 8006560:	2300      	movs	r3, #0
 8006562:	e05c      	b.n	800661e <RCC_PLL3_GetVCOOutputFreq+0xea>
  }

  /* Check if fractional part is enable */
  if ((RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) != 0U)
 8006564:	4b31      	ldr	r3, [pc, #196]	@ (800662c <RCC_PLL3_GetVCOOutputFreq+0xf8>)
 8006566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006568:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800656c:	2b00      	cmp	r3, #0
 800656e:	d006      	beq.n	800657e <RCC_PLL3_GetVCOOutputFreq+0x4a>
  {
    pllfracn = (RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN) >> RCC_PLL3FRACR_FRACN_Pos;
 8006570:	4b2e      	ldr	r3, [pc, #184]	@ (800662c <RCC_PLL3_GetVCOOutputFreq+0xf8>)
 8006572:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006574:	08db      	lsrs	r3, r3, #3
 8006576:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800657a:	61bb      	str	r3, [r7, #24]
 800657c:	e001      	b.n	8006582 <RCC_PLL3_GetVCOOutputFreq+0x4e>
  }
  else
  {
    pllfracn = 0U;
 800657e:	2300      	movs	r3, #0
 8006580:	61bb      	str	r3, [r7, #24]
  }

  /* determine PLL source */
  switch (tmpreg1 & RCC_PLLCKSELR_PLLSRC)
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	f003 0303 	and.w	r3, r3, #3
 8006588:	2b02      	cmp	r3, #2
 800658a:	d019      	beq.n	80065c0 <RCC_PLL3_GetVCOOutputFreq+0x8c>
 800658c:	2b02      	cmp	r3, #2
 800658e:	d81d      	bhi.n	80065cc <RCC_PLL3_GetVCOOutputFreq+0x98>
 8006590:	2b00      	cmp	r3, #0
 8006592:	d002      	beq.n	800659a <RCC_PLL3_GetVCOOutputFreq+0x66>
 8006594:	2b01      	cmp	r3, #1
 8006596:	d016      	beq.n	80065c6 <RCC_PLL3_GetVCOOutputFreq+0x92>
 8006598:	e018      	b.n	80065cc <RCC_PLL3_GetVCOOutputFreq+0x98>
  {
    /* HSI used as PLL3 clock source */
    case RCC_PLLSOURCE_HSI:
      if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 800659a:	4b24      	ldr	r3, [pc, #144]	@ (800662c <RCC_PLL3_GetVCOOutputFreq+0xf8>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f003 0320 	and.w	r3, r3, #32
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d009      	beq.n	80065ba <RCC_PLL3_GetVCOOutputFreq+0x86>
      {
        pllsrc = HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV) >> RCC_CR_HSIDIV_Pos);
 80065a6:	4b21      	ldr	r3, [pc, #132]	@ (800662c <RCC_PLL3_GetVCOOutputFreq+0xf8>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	08db      	lsrs	r3, r3, #3
 80065ac:	f003 0303 	and.w	r3, r3, #3
 80065b0:	4a1f      	ldr	r2, [pc, #124]	@ (8006630 <RCC_PLL3_GetVCOOutputFreq+0xfc>)
 80065b2:	fa22 f303 	lsr.w	r3, r2, r3
 80065b6:	61fb      	str	r3, [r7, #28]
      else
      {
        /* Can't retrieve HSIDIV value */
        pllsrc = 0U;
      }
      break;
 80065b8:	e00b      	b.n	80065d2 <RCC_PLL3_GetVCOOutputFreq+0x9e>
        pllsrc = 0U;
 80065ba:	2300      	movs	r3, #0
 80065bc:	61fb      	str	r3, [r7, #28]
      break;
 80065be:	e008      	b.n	80065d2 <RCC_PLL3_GetVCOOutputFreq+0x9e>

    /* HSE used as PLL3 clock source */
    case RCC_PLLSOURCE_HSE:
      pllsrc = HSE_VALUE;
 80065c0:	4b1c      	ldr	r3, [pc, #112]	@ (8006634 <RCC_PLL3_GetVCOOutputFreq+0x100>)
 80065c2:	61fb      	str	r3, [r7, #28]
      break;
 80065c4:	e005      	b.n	80065d2 <RCC_PLL3_GetVCOOutputFreq+0x9e>

    /* CSI used as PLL3 clock source */
    case RCC_PLLSOURCE_CSI:
      pllsrc = CSI_VALUE;
 80065c6:	4b1c      	ldr	r3, [pc, #112]	@ (8006638 <RCC_PLL3_GetVCOOutputFreq+0x104>)
 80065c8:	61fb      	str	r3, [r7, #28]
      break;
 80065ca:	e002      	b.n	80065d2 <RCC_PLL3_GetVCOOutputFreq+0x9e>

    default:
      pllsrc = 0U;
 80065cc:	2300      	movs	r3, #0
 80065ce:	61fb      	str	r3, [r7, #28]
      break;
 80065d0:	bf00      	nop
  }

  /* Compute VCO output frequency */
  frequency = ((float_t)pllsrc / (float_t)pllm) * ((float_t)plln + ((float_t)pllfracn / (float_t)0x2000U));
 80065d2:	69fb      	ldr	r3, [r7, #28]
 80065d4:	ee07 3a90 	vmov	s15, r3
 80065d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	ee07 3a90 	vmov	s15, r3
 80065e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	ee07 3a90 	vmov	s15, r3
 80065f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065f4:	69bb      	ldr	r3, [r7, #24]
 80065f6:	ee07 3a90 	vmov	s15, r3
 80065fa:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 80065fe:	eddf 5a0f 	vldr	s11, [pc, #60]	@ 800663c <RCC_PLL3_GetVCOOutputFreq+0x108>
 8006602:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006606:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800660a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800660e:	edc7 7a01 	vstr	s15, [r7, #4]
  
  return (uint32_t)frequency;
 8006612:	edd7 7a01 	vldr	s15, [r7, #4]
 8006616:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800661a:	ee17 3a90 	vmov	r3, s15
}
 800661e:	4618      	mov	r0, r3
 8006620:	3724      	adds	r7, #36	@ 0x24
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr
 800662a:	bf00      	nop
 800662c:	58024400 	.word	0x58024400
 8006630:	03d09000 	.word	0x03d09000
 8006634:	016e3600 	.word	0x016e3600
 8006638:	003d0900 	.word	0x003d0900
 800663c:	46000000 	.word	0x46000000

08006640 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b086      	sub	sp, #24
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006648:	2300      	movs	r3, #0
 800664a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800664c:	2300      	movs	r3, #0
 800664e:	75bb      	strb	r3, [r7, #22]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- RTC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006658:	2b00      	cmp	r3, #0
 800665a:	f000 8081 	beq.w	8006760 <HAL_RCCEx_PeriphCLKConfig+0x120>
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As the RTC clock source selection can be changed only if the Backup Domain is reset */
    /* reset the Backup domain only if the RTC Clock source selection is modified from default reset value */
    tmpreg = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800665e:	4b8c      	ldr	r3, [pc, #560]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8006660:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006662:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006666:	613b      	str	r3, [r7, #16]

    if ((tmpreg != RCC_RTCCLKSOURCE_DISABLE) && (tmpreg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d029      	beq.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0x82>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006672:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006676:	693a      	ldr	r2, [r7, #16]
 8006678:	429a      	cmp	r2, r3
 800667a:	d022      	beq.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800667c:	4b85      	ldr	r3, [pc, #532]	@ (8006894 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a84      	ldr	r2, [pc, #528]	@ (8006894 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006682:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006686:	6013      	str	r3, [r2, #0]

      /* Read back to check Backup domain enabled */
      if (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006688:	4b82      	ldr	r3, [pc, #520]	@ (8006894 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006690:	2b00      	cmp	r3, #0
 8006692:	d102      	bne.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x5a>
      {
        ret = HAL_ERROR;
 8006694:	2301      	movs	r3, #1
 8006696:	75fb      	strb	r3, [r7, #23]
 8006698:	e013      	b.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0x82>
      }
      else
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        /* excepted the RTC clock source selection that will be changed */
        tmpreg = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800669a:	4b7d      	ldr	r3, [pc, #500]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800669c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800669e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80066a2:	613b      	str	r3, [r7, #16]
        __HAL_RCC_BACKUPRESET_FORCE();
 80066a4:	4b7a      	ldr	r3, [pc, #488]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80066a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066a8:	4a79      	ldr	r2, [pc, #484]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80066aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066ae:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80066b0:	4b77      	ldr	r3, [pc, #476]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80066b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066b4:	4a76      	ldr	r2, [pc, #472]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80066b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066ba:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the content of BDCR register */
        WRITE_REG(RCC->BDCR, tmpreg);
 80066bc:	4a74      	ldr	r2, [pc, #464]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	6713      	str	r3, [r2, #112]	@ 0x70
      }
    }

    if (ret == HAL_OK)
 80066c2:	7dfb      	ldrb	r3, [r7, #23]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d149      	bne.n	800675c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80066cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066d0:	d115      	bne.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0xbe>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066d2:	f7fa ffbb 	bl	800164c <HAL_GetTick>
 80066d6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80066d8:	e00b      	b.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066da:	f7fa ffb7 	bl	800164c <HAL_GetTick>
 80066de:	4602      	mov	r2, r0
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	1ad3      	subs	r3, r2, r3
 80066e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d902      	bls.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0xb2>
          {
            ret = HAL_TIMEOUT;
 80066ec:	2303      	movs	r3, #3
 80066ee:	75fb      	strb	r3, [r7, #23]
            break;
 80066f0:	e005      	b.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0xbe>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80066f2:	4b67      	ldr	r3, [pc, #412]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80066f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066f6:	f003 0302 	and.w	r3, r3, #2
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d0ed      	beq.n	80066da <HAL_RCCEx_PeriphCLKConfig+0x9a>
          }
        }
      }

      if (ret == HAL_OK)
 80066fe:	7dfb      	ldrb	r3, [r7, #23]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d128      	bne.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006708:	f403 337c 	and.w	r3, r3, #258048	@ 0x3f000
 800670c:	2b00      	cmp	r3, #0
 800670e:	d00c      	beq.n	800672a <HAL_RCCEx_PeriphCLKConfig+0xea>
 8006710:	4b5f      	ldr	r3, [pc, #380]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8006712:	691b      	ldr	r3, [r3, #16]
 8006714:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800671c:	0919      	lsrs	r1, r3, #4
 800671e:	4b5e      	ldr	r3, [pc, #376]	@ (8006898 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006720:	400b      	ands	r3, r1
 8006722:	495b      	ldr	r1, [pc, #364]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8006724:	4313      	orrs	r3, r2
 8006726:	610b      	str	r3, [r1, #16]
 8006728:	e005      	b.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0xf6>
 800672a:	4b59      	ldr	r3, [pc, #356]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800672c:	691b      	ldr	r3, [r3, #16]
 800672e:	4a58      	ldr	r2, [pc, #352]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8006730:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006734:	6113      	str	r3, [r2, #16]
 8006736:	4b56      	ldr	r3, [pc, #344]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8006738:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800673e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006742:	4953      	ldr	r1, [pc, #332]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8006744:	4313      	orrs	r3, r2
 8006746:	670b      	str	r3, [r1, #112]	@ 0x70
        __HAL_RCC_RTC_ENABLE();
 8006748:	4b51      	ldr	r3, [pc, #324]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800674a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800674c:	4a50      	ldr	r2, [pc, #320]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800674e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006752:	6713      	str	r3, [r2, #112]	@ 0x70
 8006754:	e004      	b.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x120>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006756:	7dfb      	ldrb	r3, [r7, #23]
 8006758:	75bb      	strb	r3, [r7, #22]
 800675a:	e001      	b.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x120>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800675c:	7dfb      	ldrb	r3, [r7, #23]
 800675e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- FMC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f003 0301 	and.w	r3, r3, #1
 8006768:	2b00      	cmp	r3, #0
 800676a:	d030      	beq.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMCCLKSOURCE(PeriphClkInit->FmcClockSelection));

    switch (PeriphClkInit->FmcClockSelection)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	2b03      	cmp	r3, #3
 8006772:	d819      	bhi.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8006774:	a201      	add	r2, pc, #4	@ (adr r2, 800677c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800677a:	bf00      	nop
 800677c:	080067af 	.word	0x080067af
 8006780:	0800678d 	.word	0x0800678d
 8006784:	0800679b 	.word	0x0800679b
 8006788:	080067af 	.word	0x080067af
      case RCC_FMCCLKSOURCE_HCLK:   /* HCLK  clock selected as FMC kernel peripheral clock */
        break;

      case RCC_FMCCLKSOURCE_PLL1Q:  /* PLL1_Q is used as clock source for FMC kernel */
        /* Enable FMC kernel clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
 800678c:	4b40      	ldr	r3, [pc, #256]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800678e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006790:	4a3f      	ldr	r2, [pc, #252]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8006792:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006796:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* FMC kernel clock source configuration done later after clock selection check */
        break;
 8006798:	e00a      	b.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x170>

      case RCC_FMCCLKSOURCE_PLL2R:  /* PLL2_R is used as clock source for FMC kernel */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_RCLK);
 800679a:	4b3d      	ldr	r3, [pc, #244]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800679c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800679e:	4a3c      	ldr	r2, [pc, #240]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80067a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80067a4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* FMC kernel clock source configuration done later after clock selection check */
        break;
 80067a6:	e003      	b.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x170>
      case RCC_FMCCLKSOURCE_HSI:   /* HSI oscillator is used as clock source for FMC kernel */
        /* FMC kernel clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067a8:	2301      	movs	r3, #1
 80067aa:	75fb      	strb	r3, [r7, #23]
        break;
 80067ac:	e000      	b.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x170>
        break;
 80067ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067b0:	7dfb      	ldrb	r3, [r7, #23]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d109      	bne.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x18a>
    {
      /* Set the source of FMC kernel clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80067b6:	4b36      	ldr	r3, [pc, #216]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80067b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067ba:	f023 0203 	bic.w	r2, r3, #3
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	4933      	ldr	r1, [pc, #204]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80067c4:	4313      	orrs	r3, r2
 80067c6:	64cb      	str	r3, [r1, #76]	@ 0x4c
 80067c8:	e001      	b.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x18e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067ca:	7dfb      	ldrb	r3, [r7, #23]
 80067cc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- XSPI1 clock source configuration ----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI1) == RCC_PERIPHCLK_XSPI1)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f003 0302 	and.w	r3, r3, #2
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d02a      	beq.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_XSPI1CLKSOURCE(PeriphClkInit->Xspi1ClockSelection));

    switch (PeriphClkInit->Xspi1ClockSelection)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	2b20      	cmp	r3, #32
 80067e0:	d00c      	beq.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x1bc>
 80067e2:	2b20      	cmp	r3, #32
 80067e4:	d811      	bhi.n	800680a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d012      	beq.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 80067ea:	2b10      	cmp	r3, #16
 80067ec:	d10d      	bne.n	800680a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
      case RCC_XSPI1CLKSOURCE_HCLK:   /* HCLK is used as clock source for Xspi1 */
        /* Nothing to do */
        break;

      case RCC_XSPI1CLKSOURCE_PLL2S:  /* PLL2_S is used as clock source for Xspi1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_SCLK);
 80067ee:	4b28      	ldr	r3, [pc, #160]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80067f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067f2:	4a27      	ldr	r2, [pc, #156]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80067f4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80067f8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* XSPI1 clock source configuration done later after clock selection check */
        break;
 80067fa:	e00a      	b.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x1d2>

      case RCC_XSPI1CLKSOURCE_PLL2T:  /* PLL2_T is used as clock source for Xspi1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_TCLK);
 80067fc:	4b24      	ldr	r3, [pc, #144]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80067fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006800:	4a23      	ldr	r2, [pc, #140]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8006802:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006806:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* XSPI1 clock source configuration done later after clock selection check */
        break;
 8006808:	e003      	b.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x1d2>

      default:
        ret = HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	75fb      	strb	r3, [r7, #23]
        break;
 800680e:	e000      	b.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
        break;
 8006810:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006812:	7dfb      	ldrb	r3, [r7, #23]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d109      	bne.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    {
      /* Configure the XSPI1 clock source */
      __HAL_RCC_XSPI1_CONFIG(PeriphClkInit->Xspi1ClockSelection);
 8006818:	4b1d      	ldr	r3, [pc, #116]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800681a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800681c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	491a      	ldr	r1, [pc, #104]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8006826:	4313      	orrs	r3, r2
 8006828:	64cb      	str	r3, [r1, #76]	@ 0x4c
 800682a:	e001      	b.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800682c:	7dfb      	ldrb	r3, [r7, #23]
 800682e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- XSPI2 clock source configuration ----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI2) == RCC_PERIPHCLK_XSPI2)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f003 0304 	and.w	r3, r3, #4
 8006838:	2b00      	cmp	r3, #0
 800683a:	d031      	beq.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_XSPI2CLKSOURCE(PeriphClkInit->Xspi2ClockSelection));

    switch (PeriphClkInit->Xspi2ClockSelection)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	68db      	ldr	r3, [r3, #12]
 8006840:	2b80      	cmp	r3, #128	@ 0x80
 8006842:	d00c      	beq.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006844:	2b80      	cmp	r3, #128	@ 0x80
 8006846:	d811      	bhi.n	800686c <HAL_RCCEx_PeriphCLKConfig+0x22c>
 8006848:	2b00      	cmp	r3, #0
 800684a:	d012      	beq.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0x232>
 800684c:	2b40      	cmp	r3, #64	@ 0x40
 800684e:	d10d      	bne.n	800686c <HAL_RCCEx_PeriphCLKConfig+0x22c>
      case RCC_XSPI2CLKSOURCE_HCLK:   /* HCLK is used as clock source for Xspi2 */
        /* Nothing to do */
        break;

      case RCC_XSPI2CLKSOURCE_PLL2S:  /* PLL2_S is used as clock source for Xspi2 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_SCLK);
 8006850:	4b0f      	ldr	r3, [pc, #60]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8006852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006854:	4a0e      	ldr	r2, [pc, #56]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8006856:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800685a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* XSPI2 clock source configuration done later after clock selection check */
        break;
 800685c:	e00a      	b.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x234>

      case RCC_XSPI2CLKSOURCE_PLL2T:  /* PLL2_T is used as clock source for Xspi2 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_TCLK);
 800685e:	4b0c      	ldr	r3, [pc, #48]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8006860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006862:	4a0b      	ldr	r2, [pc, #44]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8006864:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006868:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* XSPI2 clock source configuration done later after clock selection check */
        break;
 800686a:	e003      	b.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x234>

      default:
        ret = HAL_ERROR;
 800686c:	2301      	movs	r3, #1
 800686e:	75fb      	strb	r3, [r7, #23]
        break;
 8006870:	e000      	b.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x234>
        break;
 8006872:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006874:	7dfb      	ldrb	r3, [r7, #23]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d110      	bne.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x25c>
    {
      /* Configure the XSPI2 clock source */
      __HAL_RCC_XSPI2_CONFIG(PeriphClkInit->Xspi2ClockSelection);
 800687a:	4b05      	ldr	r3, [pc, #20]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800687c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800687e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	68db      	ldr	r3, [r3, #12]
 8006886:	4902      	ldr	r1, [pc, #8]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8006888:	4313      	orrs	r3, r2
 800688a:	64cb      	str	r3, [r1, #76]	@ 0x4c
 800688c:	e008      	b.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x260>
 800688e:	bf00      	nop
 8006890:	58024400 	.word	0x58024400
 8006894:	58024800 	.word	0x58024800
 8006898:	0fffffcf 	.word	0x0fffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800689c:	7dfb      	ldrb	r3, [r7, #23]
 800689e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f003 0308 	and.w	r3, r3, #8
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d008      	beq.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CKPERCLKSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80068ac:	4b93      	ldr	r3, [pc, #588]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80068ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068b0:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	691b      	ldr	r3, [r3, #16]
 80068b8:	4990      	ldr	r1, [pc, #576]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80068ba:	4313      	orrs	r3, r2
 80068bc:	64cb      	str	r3, [r1, #76]	@ 0x4c
  }

  /*------------------------------------- SDMMC12 Configuration ------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SDMMC12) == RCC_PERIPHCLK_SDMMC12)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d026      	beq.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC12CLKSOURCE(PeriphClkInit->Sdmmc12ClockSelection));

    switch (PeriphClkInit->Sdmmc12ClockSelection)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d002      	beq.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80068d2:	2b04      	cmp	r3, #4
 80068d4:	d007      	beq.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80068d6:	e00d      	b.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      case RCC_SDMMC12CLKSOURCE_PLL2S:  /* PLL2_S is used as clock source for SDMMC12 kernel */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_SCLK);
 80068d8:	4b88      	ldr	r3, [pc, #544]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80068da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068dc:	4a87      	ldr	r2, [pc, #540]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80068de:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80068e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SDMMC12 kernel clock source configuration done later after clock selection check */
        break;
 80068e4:	e009      	b.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x2ba>

      case RCC_SDMMC12CLKSOURCE_PLL2T:  /* PLL2_T is used as clock source for SDMMC12 kernel */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_TCLK);
 80068e6:	4b85      	ldr	r3, [pc, #532]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80068e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068ea:	4a84      	ldr	r2, [pc, #528]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80068ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80068f0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SDMMC12 kernel clock source configuration done later after clock selection check */
        break;
 80068f2:	e002      	b.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x2ba>

      default:
        ret = HAL_ERROR;
 80068f4:	2301      	movs	r3, #1
 80068f6:	75fb      	strb	r3, [r7, #23]
        break;
 80068f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068fa:	7dfb      	ldrb	r3, [r7, #23]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d109      	bne.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
    {
      /* Set the source of SDMMC12 clock*/
      __HAL_RCC_SDMMC12_CONFIG(PeriphClkInit->Sdmmc12ClockSelection);
 8006900:	4b7e      	ldr	r3, [pc, #504]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8006902:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006904:	f023 0204 	bic.w	r2, r3, #4
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800690c:	497b      	ldr	r1, [pc, #492]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800690e:	4313      	orrs	r3, r2
 8006910:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8006912:	e001      	b.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006914:	7dfb      	ldrb	r3, [r7, #23]
 8006916:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- ADC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f003 0310 	and.w	r3, r3, #16
 8006920:	2b00      	cmp	r3, #0
 8006922:	d02e      	beq.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    switch (PeriphClkInit->AdcClockSelection)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	695b      	ldr	r3, [r3, #20]
 8006928:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800692c:	d019      	beq.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0x322>
 800692e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006932:	d813      	bhi.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8006934:	2b00      	cmp	r3, #0
 8006936:	d003      	beq.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8006938:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800693c:	d007      	beq.n	800694e <HAL_RCCEx_PeriphCLKConfig+0x30e>
 800693e:	e00d      	b.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x31c>
    {

      case RCC_ADCCLKSOURCE_PLL2P: /* PLL2_P is used as clock source for ADC */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 8006940:	4b6e      	ldr	r3, [pc, #440]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8006942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006944:	4a6d      	ldr	r2, [pc, #436]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8006946:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800694a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* ADC clock source configuration done later after clock selection check */
        break;
 800694c:	e00a      	b.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x324>

      case RCC_ADCCLKSOURCE_PLL3R: /* PLL3_R is used as clock source for ADC */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 800694e:	4b6b      	ldr	r3, [pc, #428]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8006950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006952:	4a6a      	ldr	r2, [pc, #424]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8006954:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006958:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* ADC clock source configuration done later after clock selection check */
        break;
 800695a:	e003      	b.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x324>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800695c:	2301      	movs	r3, #1
 800695e:	75fb      	strb	r3, [r7, #23]
        break;
 8006960:	e000      	b.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x324>
        break;
 8006962:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006964:	7dfb      	ldrb	r3, [r7, #23]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d109      	bne.n	800697e <HAL_RCCEx_PeriphCLKConfig+0x33e>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800696a:	4b64      	ldr	r3, [pc, #400]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800696c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800696e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	695b      	ldr	r3, [r3, #20]
 8006976:	4961      	ldr	r1, [pc, #388]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8006978:	4313      	orrs	r3, r2
 800697a:	64cb      	str	r3, [r1, #76]	@ 0x4c
 800697c:	e001      	b.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x342>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800697e:	7dfb      	ldrb	r3, [r7, #23]
 8006980:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- ADF1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f003 0320 	and.w	r3, r3, #32
 800698a:	2b00      	cmp	r3, #0
 800698c:	d03f      	beq.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(PeriphClkInit->Adf1ClockSelection));

    switch (PeriphClkInit->Adf1ClockSelection)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	699b      	ldr	r3, [r3, #24]
 8006992:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8006996:	d02a      	beq.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8006998:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800699c:	d824      	bhi.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 800699e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80069a2:	d024      	beq.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80069a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80069a8:	d81e      	bhi.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 80069aa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80069ae:	d01e      	beq.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80069b0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80069b4:	d818      	bhi.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 80069b6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80069ba:	d00e      	beq.n	80069da <HAL_RCCEx_PeriphCLKConfig+0x39a>
 80069bc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80069c0:	d812      	bhi.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d013      	beq.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80069c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80069ca:	d10d      	bne.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
    {
      case RCC_ADF1CLKSOURCE_PLL2P:  /* PLL2_P is used as clock source for ADF1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 80069cc:	4b4b      	ldr	r3, [pc, #300]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80069ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069d0:	4a4a      	ldr	r2, [pc, #296]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80069d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80069d6:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* ADF1 clock source configuration done later after clock selection check */
        break;
 80069d8:	e00a      	b.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>

      case RCC_ADF1CLKSOURCE_PLL3P:  /* PLL3_P is used as clock source for ADF1 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_PCLK);
 80069da:	4b48      	ldr	r3, [pc, #288]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80069dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069de:	4a47      	ldr	r2, [pc, #284]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80069e0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80069e4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* ADF1 clock source configuration done later after clock selection check */
        break;
 80069e6:	e003      	b.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
      case RCC_ADF1CLKSOURCE_HSI:    /* HSI is used as clock source for ADF1 */
        /* ADF1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069e8:	2301      	movs	r3, #1
 80069ea:	75fb      	strb	r3, [r7, #23]
        break;
 80069ec:	e000      	b.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        break;
 80069ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069f0:	7dfb      	ldrb	r3, [r7, #23]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d109      	bne.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
    {
      /* Set the source of ADF1 clock*/
      __HAL_RCC_ADF1_CONFIG(PeriphClkInit->Adf1ClockSelection);
 80069f6:	4b41      	ldr	r3, [pc, #260]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80069f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069fa:	f423 02e0 	bic.w	r2, r3, #7340032	@ 0x700000
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	699b      	ldr	r3, [r3, #24]
 8006a02:	493e      	ldr	r1, [pc, #248]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8006a04:	4313      	orrs	r3, r2
 8006a06:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8006a08:	e001      	b.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a0a:	7dfb      	ldrb	r3, [r7, #23]
 8006a0c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------- CEC configuration ---------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d008      	beq.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006a1a:	4b38      	ldr	r3, [pc, #224]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8006a1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a1e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	69db      	ldr	r3, [r3, #28]
 8006a26:	4935      	ldr	r1, [pc, #212]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	650b      	str	r3, [r1, #80]	@ 0x50
  }

  /*---------------------- ETH1 REF configuration --------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1REF) == RCC_PERIPHCLK_ETH1REF)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d008      	beq.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1REFCLKSOURCE(PeriphClkInit->Eth1RefClockSelection));

    /* Configure the ETH1 REF clock source */
    __HAL_RCC_ETH1REF_CONFIG(PeriphClkInit->Eth1RefClockSelection);
 8006a38:	4b30      	ldr	r3, [pc, #192]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8006a3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a3c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6a1b      	ldr	r3, [r3, #32]
 8006a44:	492d      	ldr	r1, [pc, #180]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8006a46:	4313      	orrs	r3, r2
 8006a48:	64cb      	str	r3, [r1, #76]	@ 0x4c
  }

  /*---------------------- ETH1PHY configuration --------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1PHY) == RCC_PERIPHCLK_ETH1PHY)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d020      	beq.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1PHYCLKSOURCE(PeriphClkInit->Eth1PhyClockSelection));

    switch (PeriphClkInit->Eth1PhyClockSelection)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d00c      	beq.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x438>
 8006a5e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006a62:	d106      	bne.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_ETH1PHYCLKSOURCE_HSE:    /* HSE is used as clock source for ETH PHY */
        /* ETH PHY clock source configuration done later after clock selection check */
        break;

      case RCC_ETH1PHYCLKSOURCE_PLL3S:  /* PLL3_S is used as clock source for ETH PHY */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_SCLK);
 8006a64:	4b25      	ldr	r3, [pc, #148]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8006a66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a68:	4a24      	ldr	r2, [pc, #144]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8006a6a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006a6e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* ETH PHY clock source configuration done later after clock selection check */
        break;
 8006a70:	e003      	b.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0x43a>

      default:
        ret = HAL_ERROR;
 8006a72:	2301      	movs	r3, #1
 8006a74:	75fb      	strb	r3, [r7, #23]
        break;
 8006a76:	e000      	b.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0x43a>
        break;
 8006a78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a7a:	7dfb      	ldrb	r3, [r7, #23]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d109      	bne.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of ETH PHY clock*/
      __HAL_RCC_ETH1PHY_CONFIG(PeriphClkInit->Eth1PhyClockSelection);
 8006a80:	4b1e      	ldr	r3, [pc, #120]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8006a82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a84:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a8c:	491b      	ldr	r1, [pc, #108]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8006a92:	e001      	b.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0x458>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a94:	7dfb      	ldrb	r3, [r7, #23]
 8006a96:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------- FDCAN configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d02f      	beq.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    switch (PeriphClkInit->FdcanClockSelection)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aa8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006aac:	d00e      	beq.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8006aae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006ab2:	d812      	bhi.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x49a>
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d013      	beq.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8006ab8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006abc:	d10d      	bne.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x49a>
    {
      case RCC_FDCANCLKSOURCE_PLL1Q: /* PLL1_Q is used as clock source for FDCAN kernel */
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
 8006abe:	4b0f      	ldr	r3, [pc, #60]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8006ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ac2:	4a0e      	ldr	r2, [pc, #56]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8006ac4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ac8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006aca:	e00a      	b.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0x4a2>

      case RCC_FDCANCLKSOURCE_PLL2P: /* PLL2_P is used as clock source for FDCAN kernel */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 8006acc:	4b0b      	ldr	r3, [pc, #44]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8006ace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ad0:	4a0a      	ldr	r2, [pc, #40]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8006ad2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ad6:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006ad8:	e003      	b.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0x4a2>
      case RCC_FDCANCLKSOURCE_HSE:   /* HSE is used as clock source for FDCAN kernel */
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	75fb      	strb	r3, [r7, #23]
        break;
 8006ade:	e000      	b.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0x4a2>
        break;
 8006ae0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ae2:	7dfb      	ldrb	r3, [r7, #23]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d10b      	bne.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006ae8:	4b04      	ldr	r3, [pc, #16]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8006aea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006aec:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006af4:	4901      	ldr	r1, [pc, #4]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8006af6:	4313      	orrs	r3, r2
 8006af8:	650b      	str	r3, [r1, #80]	@ 0x50
 8006afa:	e003      	b.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
 8006afc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b00:	7dfb      	ldrb	r3, [r7, #23]
 8006b02:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/I3C1 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C1_I3C1) == RCC_PERIPHCLK_I2C1_I3C1)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d02c      	beq.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0x52a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1_I3C1CLKSOURCE(PeriphClkInit->I2c1_I3c1ClockSelection));

    switch (PeriphClkInit->I2c1_I3c1ClockSelection)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b14:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006b18:	d017      	beq.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8006b1a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006b1e:	d811      	bhi.n	8006b44 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8006b20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b24:	d011      	beq.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8006b26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b2a:	d80b      	bhi.n	8006b44 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d00c      	beq.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8006b30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b34:	d106      	bne.n	8006b44 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      case RCC_I2C1_I3C1CLKSOURCE_PLL3R:   /* PLL3_R is used as clock source for I2C1/I3C1*/
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 8006b36:	4b97      	ldr	r3, [pc, #604]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8006b38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b3a:	4a96      	ldr	r2, [pc, #600]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8006b3c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006b40:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* I2C1/I3C1 clock source configuration done later after clock selection check */
        break;
 8006b42:	e003      	b.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_I2C1_I3C1CLKSOURCE_CSI:     /* CSI is used as clock source for I2C1/I3C1*/
        /* I2C1/I3C1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b44:	2301      	movs	r3, #1
 8006b46:	75fb      	strb	r3, [r7, #23]
        break;
 8006b48:	e000      	b.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006b4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b4c:	7dfb      	ldrb	r3, [r7, #23]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d109      	bne.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x526>
    {
      /* Set the source of I2C1/I3C1 clock*/
      __HAL_RCC_I2C1_I3C1_CONFIG(PeriphClkInit->I2c1_I3c1ClockSelection);
 8006b52:	4b90      	ldr	r3, [pc, #576]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8006b54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b56:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b5e:	498d      	ldr	r1, [pc, #564]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8006b60:	4313      	orrs	r3, r2
 8006b62:	650b      	str	r3, [r1, #80]	@ 0x50
 8006b64:	e001      	b.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b66:	7dfb      	ldrb	r3, [r7, #23]
 8006b68:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C2/I2C3 Configuration -------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C23) == RCC_PERIPHCLK_I2C23)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d02c      	beq.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x590>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C23CLKSOURCE(PeriphClkInit->I2c23ClockSelection));

    switch (PeriphClkInit->I2c23ClockSelection)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b7a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b7e:	d017      	beq.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8006b80:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b84:	d811      	bhi.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0x56a>
 8006b86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b8a:	d011      	beq.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8006b8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b90:	d80b      	bhi.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0x56a>
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d00c      	beq.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8006b96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b9a:	d106      	bne.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0x56a>
    {
      case RCC_I2C23CLKSOURCE_PLL3R:   /* PLL3_R is used as clock source for I2C2/I2C3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 8006b9c:	4b7d      	ldr	r3, [pc, #500]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8006b9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ba0:	4a7c      	ldr	r2, [pc, #496]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8006ba2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006ba6:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* I2C2/I2C3 clock source configuration done later after clock selection check */
        break;
 8006ba8:	e003      	b.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0x572>
      case RCC_I2C23CLKSOURCE_CSI:     /* CSI is used as clock source for I2C2/I2C3 */
        /* I2C2/I2C3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006baa:	2301      	movs	r3, #1
 8006bac:	75fb      	strb	r3, [r7, #23]
        break;
 8006bae:	e000      	b.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0x572>
        break;
 8006bb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bb2:	7dfb      	ldrb	r3, [r7, #23]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d109      	bne.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Set the source of I2C2/I2C3 clock*/
      __HAL_RCC_I2C23_CONFIG(PeriphClkInit->I2c23ClockSelection);
 8006bb8:	4b76      	ldr	r3, [pc, #472]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8006bba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bbc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bc4:	4973      	ldr	r1, [pc, #460]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	650b      	str	r3, [r1, #80]	@ 0x50
 8006bca:	e001      	b.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x590>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bcc:	7dfb      	ldrb	r3, [r7, #23]
 8006bce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d045      	beq.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    switch (PeriphClkInit->Lptim1ClockSelection)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006be0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006be4:	d02a      	beq.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
 8006be6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006bea:	d824      	bhi.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 8006bec:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006bf0:	d026      	beq.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x600>
 8006bf2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006bf6:	d81e      	bhi.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 8006bf8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006bfc:	d022      	beq.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8006bfe:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006c02:	d818      	bhi.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 8006c04:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c08:	d00e      	beq.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
 8006c0a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c0e:	d812      	bhi.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d019      	beq.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006c14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c18:	d10d      	bne.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
      case RCC_LPTIM1CLKSOURCE_PCLK1: /* PCLK1 as clock source for LPTIM1 */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P: /* PLL2_P is used as clock source for LPTIM1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 8006c1a:	4b5e      	ldr	r3, [pc, #376]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8006c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c1e:	4a5d      	ldr	r2, [pc, #372]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8006c20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c24:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006c26:	e010      	b.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0x60a>

      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3_R is used as clock source for LPTIM1 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 8006c28:	4b5a      	ldr	r3, [pc, #360]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8006c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c2c:	4a59      	ldr	r2, [pc, #356]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8006c2e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006c32:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006c34:	e009      	b.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0x60a>
        /* HSI, HSE, or CSI oscillator is used as clock source for LPTIM1 */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c36:	2301      	movs	r3, #1
 8006c38:	75fb      	strb	r3, [r7, #23]
        break;
 8006c3a:	e006      	b.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0x60a>
        break;
 8006c3c:	bf00      	nop
 8006c3e:	e004      	b.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0x60a>
        break;
 8006c40:	bf00      	nop
 8006c42:	e002      	b.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0x60a>
        break;
 8006c44:	bf00      	nop
 8006c46:	e000      	b.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0x60a>
        break;
 8006c48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c4a:	7dfb      	ldrb	r3, [r7, #23]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d109      	bne.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x624>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006c50:	4b50      	ldr	r3, [pc, #320]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8006c52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c54:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c5c:	494d      	ldr	r1, [pc, #308]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	650b      	str	r3, [r1, #80]	@ 0x50
 8006c62:	e001      	b.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x628>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c64:	7dfb      	ldrb	r3, [r7, #23]
 8006c66:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2/LPTIM3 configuration -----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM23) == RCC_PERIPHCLK_LPTIM23)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d045      	beq.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
  {
    switch (PeriphClkInit->Lptim23ClockSelection)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c78:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8006c7c:	d02a      	beq.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x694>
 8006c7e:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8006c82:	d824      	bhi.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8006c84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c88:	d026      	beq.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x698>
 8006c8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c8e:	d81e      	bhi.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8006c90:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006c94:	d022      	beq.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0x69c>
 8006c96:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006c9a:	d818      	bhi.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8006c9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ca0:	d00e      	beq.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x680>
 8006ca2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ca6:	d812      	bhi.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d019      	beq.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
 8006cac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006cb0:	d10d      	bne.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_LPTIM23CLKSOURCE_PCLK4: /* PCLK4 as clock source for LPTIM2/LPTIM3 */
        /* LPTIM2/LPTIM3 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM23CLKSOURCE_PLL2P: /* PLL2_P is used as clock source for LPTIM2/LPTIM3 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 8006cb2:	4b38      	ldr	r3, [pc, #224]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8006cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cb6:	4a37      	ldr	r2, [pc, #220]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8006cb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006cbc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPTIM2/LPTIM3 clock source configuration done later after clock selection check */
        break;
 8006cbe:	e010      	b.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0x6a2>

      case RCC_LPTIM23CLKSOURCE_PLL3R: /* PLL3_R is used as clock source for LPTIM2/LPTIM3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 8006cc0:	4b34      	ldr	r3, [pc, #208]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8006cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cc4:	4a33      	ldr	r2, [pc, #204]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8006cc6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006cca:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPTIM2/LPTIM3 clock source configuration done later after clock selection check */
        break;
 8006ccc:	e009      	b.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0x6a2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2/LPTIM3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	75fb      	strb	r3, [r7, #23]
        break;
 8006cd2:	e006      	b.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0x6a2>
        break;
 8006cd4:	bf00      	nop
 8006cd6:	e004      	b.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0x6a2>
        break;
 8006cd8:	bf00      	nop
 8006cda:	e002      	b.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0x6a2>
        break;
 8006cdc:	bf00      	nop
 8006cde:	e000      	b.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0x6a2>
        break;
 8006ce0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ce2:	7dfb      	ldrb	r3, [r7, #23]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d109      	bne.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0x6bc>
    {
      /* Set the source of LPTIM2/LPTIM3 clock*/
      __HAL_RCC_LPTIM23_CONFIG(PeriphClkInit->Lptim23ClockSelection);
 8006ce8:	4b2a      	ldr	r3, [pc, #168]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8006cea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cf4:	4927      	ldr	r1, [pc, #156]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	658b      	str	r3, [r1, #88]	@ 0x58
 8006cfa:	e001      	b.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cfc:	7dfb      	ldrb	r3, [r7, #23]
 8006cfe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM4/LPTIM5 configuration -----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM45) == RCC_PERIPHCLK_LPTIM45)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d047      	beq.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0x75c>
  {
    switch (PeriphClkInit->Lptim45ClockSelection)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d10:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006d14:	d02a      	beq.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8006d16:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006d1a:	d824      	bhi.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0x726>
 8006d1c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006d20:	d026      	beq.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x730>
 8006d22:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006d26:	d81e      	bhi.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0x726>
 8006d28:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006d2c:	d022      	beq.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0x734>
 8006d2e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006d32:	d818      	bhi.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0x726>
 8006d34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d38:	d00e      	beq.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0x718>
 8006d3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d3e:	d812      	bhi.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0x726>
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d019      	beq.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x738>
 8006d44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d48:	d10d      	bne.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0x726>
      case RCC_LPTIM45CLKSOURCE_PCLK4:  /* PCLK4 as clock source for LPTIM4/LPTIM5 */
        /* LPTIM4/LPTIM5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM45CLKSOURCE_PLL2P: /* PLL2 is used as clock source for LPTIM4/LPTIM5 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 8006d4a:	4b12      	ldr	r3, [pc, #72]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8006d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d4e:	4a11      	ldr	r2, [pc, #68]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8006d50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d54:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPTIM4/LPTIM5 clock source configuration done later after clock selection check */
        break;
 8006d56:	e010      	b.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0x73a>

      case RCC_LPTIM45CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4/LPTIM5 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 8006d58:	4b0e      	ldr	r3, [pc, #56]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8006d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d5c:	4a0d      	ldr	r2, [pc, #52]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8006d5e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006d62:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPTIM4/LPTIM5 clock source configuration done later after clock selection check */
        break;
 8006d64:	e009      	b.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0x73a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM4/LPTIM5 clock */
        /* LPTIM4/LPTIM5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d66:	2301      	movs	r3, #1
 8006d68:	75fb      	strb	r3, [r7, #23]
        break;
 8006d6a:	e006      	b.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0x73a>
        break;
 8006d6c:	bf00      	nop
 8006d6e:	e004      	b.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0x73a>
        break;
 8006d70:	bf00      	nop
 8006d72:	e002      	b.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0x73a>
        break;
 8006d74:	bf00      	nop
 8006d76:	e000      	b.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0x73a>
        break;
 8006d78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d7a:	7dfb      	ldrb	r3, [r7, #23]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d10b      	bne.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x758>
    {
      /* Set the source of LPTIM4/LPTIM5 clock */
      __HAL_RCC_LPTIM45_CONFIG(PeriphClkInit->Lptim45ClockSelection);
 8006d80:	4b04      	ldr	r3, [pc, #16]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8006d82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d84:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d8c:	4901      	ldr	r1, [pc, #4]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	658b      	str	r3, [r1, #88]	@ 0x58
 8006d92:	e003      	b.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0x75c>
 8006d94:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d98:	7dfb      	ldrb	r3, [r7, #23]
 8006d9a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d034      	beq.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dac:	2b05      	cmp	r3, #5
 8006dae:	d81d      	bhi.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x7ac>
 8006db0:	a201      	add	r2, pc, #4	@ (adr r2, 8006db8 <HAL_RCCEx_PeriphCLKConfig+0x778>)
 8006db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006db6:	bf00      	nop
 8006db8:	08006df3 	.word	0x08006df3
 8006dbc:	08006dd1 	.word	0x08006dd1
 8006dc0:	08006ddf 	.word	0x08006ddf
 8006dc4:	08006df3 	.word	0x08006df3
 8006dc8:	08006df3 	.word	0x08006df3
 8006dcc:	08006df3 	.word	0x08006df3
      case RCC_LPUART1CLKSOURCE_PCLK4: /* PCLK4 selected as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q: /* PLL2_Q is used as clock source for LPUART1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_QCLK);
 8006dd0:	4b91      	ldr	r3, [pc, #580]	@ (8007018 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8006dd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dd4:	4a90      	ldr	r2, [pc, #576]	@ (8007018 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8006dd6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006dda:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006ddc:	e00a      	b.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x7b4>

      case RCC_LPUART1CLKSOURCE_PLL3Q: /* PLL3_Q is used as clock source for LPUART1 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
 8006dde:	4b8e      	ldr	r3, [pc, #568]	@ (8007018 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8006de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006de2:	4a8d      	ldr	r2, [pc, #564]	@ (8007018 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8006de4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006de8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006dea:	e003      	b.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006dec:	2301      	movs	r3, #1
 8006dee:	75fb      	strb	r3, [r7, #23]
        break;
 8006df0:	e000      	b.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
        break;
 8006df2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006df4:	7dfb      	ldrb	r3, [r7, #23]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d109      	bne.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006dfa:	4b87      	ldr	r3, [pc, #540]	@ (8007018 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8006dfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dfe:	f023 0207 	bic.w	r2, r3, #7
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e06:	4984      	ldr	r1, [pc, #528]	@ (8007018 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	658b      	str	r3, [r1, #88]	@ 0x58
 8006e0c:	e001      	b.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e0e:	7dfb      	ldrb	r3, [r7, #23]
 8006e10:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LTDC Configuration ----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d005      	beq.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x7ea>
  {
    /* LTDC internally connected to PLL3_R output clock */
    __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 8006e1e:	4b7e      	ldr	r3, [pc, #504]	@ (8007018 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8006e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e22:	4a7d      	ldr	r2, [pc, #500]	@ (8007018 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8006e24:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006e28:	62d3      	str	r3, [r2, #44]	@ 0x2c
  }

  /*---------------------------- PSSI configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PSSI) == RCC_PERIPHCLK_PSSI)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d021      	beq.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0x83a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_PSSICLKSOURCE(PeriphClkInit->PssiClockSelection));

    switch (PeriphClkInit->PssiClockSelection)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d003      	beq.n	8006e46 <HAL_RCCEx_PeriphCLKConfig+0x806>
 8006e3e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e42:	d00a      	beq.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8006e44:	e006      	b.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      case RCC_PSSICLKSOURCE_PLL3R:  /* PLL3_R is used as clock source for PSSI */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 8006e46:	4b74      	ldr	r3, [pc, #464]	@ (8007018 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8006e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e4a:	4a73      	ldr	r2, [pc, #460]	@ (8007018 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8006e4c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006e50:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* PSSI clock source configuration done later after clock selection check */
        break;
 8006e52:	e003      	b.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x81c>
        /* HSI, HSE, or CSI oscillator is used as source of PSSI clock */
        /* PSSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e54:	2301      	movs	r3, #1
 8006e56:	75fb      	strb	r3, [r7, #23]
        break;
 8006e58:	e000      	b.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 8006e5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e5c:	7dfb      	ldrb	r3, [r7, #23]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d109      	bne.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0x836>
    {
      /* Set the source of PSSI clock*/
      __HAL_RCC_PSSI_CONFIG(PeriphClkInit->PssiClockSelection);
 8006e62:	4b6d      	ldr	r3, [pc, #436]	@ (8007018 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8006e64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e66:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e6e:	496a      	ldr	r1, [pc, #424]	@ (8007018 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8006e70:	4313      	orrs	r3, r2
 8006e72:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8006e74:	e001      	b.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0x83a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e76:	7dfb      	ldrb	r3, [r7, #23]
 8006e78:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d043      	beq.n	8006f0e <HAL_RCCEx_PeriphCLKConfig+0x8ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e8a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006e8e:	d02c      	beq.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0x8aa>
 8006e90:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006e94:	d826      	bhi.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
 8006e96:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006e9a:	d028      	beq.n	8006eee <HAL_RCCEx_PeriphCLKConfig+0x8ae>
 8006e9c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006ea0:	d820      	bhi.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
 8006ea2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ea6:	d016      	beq.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0x896>
 8006ea8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006eac:	d81a      	bhi.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d003      	beq.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0x87a>
 8006eb2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006eb6:	d007      	beq.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x888>
 8006eb8:	e014      	b.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:  /* PLL1_Q is used as clock source for SAI1 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
 8006eba:	4b57      	ldr	r3, [pc, #348]	@ (8007018 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8006ebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ebe:	4a56      	ldr	r2, [pc, #344]	@ (8007018 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8006ec0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ec4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006ec6:	e013      	b.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2_P is used as clock source for SAI1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 8006ec8:	4b53      	ldr	r3, [pc, #332]	@ (8007018 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8006eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ecc:	4a52      	ldr	r2, [pc, #328]	@ (8007018 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8006ece:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ed2:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006ed4:	e00c      	b.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3_P is used as clock source for SAI1 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_PCLK);
 8006ed6:	4b50      	ldr	r3, [pc, #320]	@ (8007018 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8006ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eda:	4a4f      	ldr	r2, [pc, #316]	@ (8007018 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8006edc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006ee0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006ee2:	e005      	b.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	75fb      	strb	r3, [r7, #23]
        break;
 8006ee8:	e002      	b.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
        break;
 8006eea:	bf00      	nop
 8006eec:	e000      	b.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
        break;
 8006eee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ef0:	7dfb      	ldrb	r3, [r7, #23]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d109      	bne.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x8ca>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006ef6:	4b48      	ldr	r3, [pc, #288]	@ (8007018 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8006ef8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006efa:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f02:	4945      	ldr	r1, [pc, #276]	@ (8007018 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8006f04:	4313      	orrs	r3, r2
 8006f06:	654b      	str	r3, [r1, #84]	@ 0x54
 8006f08:	e001      	b.n	8006f0e <HAL_RCCEx_PeriphCLKConfig+0x8ce>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f0a:	7dfb      	ldrb	r3, [r7, #23]
 8006f0c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI2 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d04b      	beq.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0x972>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f1e:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8006f22:	d032      	beq.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8006f24:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8006f28:	d82c      	bhi.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x944>
 8006f2a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006f2e:	d02e      	beq.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8006f30:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006f34:	d826      	bhi.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x944>
 8006f36:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006f3a:	d02a      	beq.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8006f3c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006f40:	d820      	bhi.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x944>
 8006f42:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006f46:	d016      	beq.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0x936>
 8006f48:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006f4c:	d81a      	bhi.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x944>
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d003      	beq.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x91a>
 8006f52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f56:	d007      	beq.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0x928>
 8006f58:	e014      	b.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x944>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:  /* PLL1_Q is used as clock source for SAI2 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
 8006f5a:	4b2f      	ldr	r3, [pc, #188]	@ (8007018 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8006f5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f5e:	4a2e      	ldr	r2, [pc, #184]	@ (8007018 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8006f60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f64:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006f66:	e015      	b.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0x954>

      case RCC_SAI2CLKSOURCE_PLL2P:  /* PLL2_P is used as clock source for SAI2 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 8006f68:	4b2b      	ldr	r3, [pc, #172]	@ (8007018 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8006f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f6c:	4a2a      	ldr	r2, [pc, #168]	@ (8007018 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8006f6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f72:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006f74:	e00e      	b.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0x954>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3_P is used as clock source for SAI2 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_PCLK);
 8006f76:	4b28      	ldr	r3, [pc, #160]	@ (8007018 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8006f78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f7a:	4a27      	ldr	r2, [pc, #156]	@ (8007018 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8006f7c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006f80:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006f82:	e007      	b.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0x954>
      case RCC_SAI2CLKSOURCE_SPDIF: /* SPDIF clock is used as source of SAI2 clock */
        /* SAI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f84:	2301      	movs	r3, #1
 8006f86:	75fb      	strb	r3, [r7, #23]
        break;
 8006f88:	e004      	b.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0x954>
        break;
 8006f8a:	bf00      	nop
 8006f8c:	e002      	b.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0x954>
        break;
 8006f8e:	bf00      	nop
 8006f90:	e000      	b.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0x954>
        break;
 8006f92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f94:	7dfb      	ldrb	r3, [r7, #23]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d109      	bne.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x96e>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006f9a:	4b1f      	ldr	r3, [pc, #124]	@ (8007018 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8006f9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f9e:	f423 02e0 	bic.w	r2, r3, #7340032	@ 0x700000
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006fa6:	491c      	ldr	r1, [pc, #112]	@ (8007018 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	654b      	str	r3, [r1, #84]	@ 0x54
 8006fac:	e001      	b.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0x972>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fae:	7dfb      	ldrb	r3, [r7, #23]
 8006fb0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPDIFRX configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d03e      	beq.n	800703c <HAL_RCCEx_PeriphCLKConfig+0x9fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifrxClockSelection));

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006fc2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006fc6:	d029      	beq.n	800701c <HAL_RCCEx_PeriphCLKConfig+0x9dc>
 8006fc8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006fcc:	d820      	bhi.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8006fce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006fd2:	d016      	beq.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 8006fd4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006fd8:	d81a      	bhi.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d003      	beq.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
 8006fde:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006fe2:	d007      	beq.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
 8006fe4:	e014      	b.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL1Q: /* PLL1_Q is used as clock source for SPDIFRX */
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
 8006fe6:	4b0c      	ldr	r3, [pc, #48]	@ (8007018 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8006fe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fea:	4a0b      	ldr	r2, [pc, #44]	@ (8007018 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8006fec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ff0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006ff2:	e014      	b.n	800701e <HAL_RCCEx_PeriphCLKConfig+0x9de>

      case RCC_SPDIFRXCLKSOURCE_PLL2R: /* PLL2_R is used as clock source for SPDIFRX */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_RCLK);
 8006ff4:	4b08      	ldr	r3, [pc, #32]	@ (8007018 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8006ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ff8:	4a07      	ldr	r2, [pc, #28]	@ (8007018 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8006ffa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006ffe:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007000:	e00d      	b.n	800701e <HAL_RCCEx_PeriphCLKConfig+0x9de>

      case RCC_SPDIFRXCLKSOURCE_PLL3R:  /* PLL3_R is used as clock source for SPDIFRX */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 8007002:	4b05      	ldr	r3, [pc, #20]	@ (8007018 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8007004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007006:	4a04      	ldr	r2, [pc, #16]	@ (8007018 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8007008:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800700c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800700e:	e006      	b.n	800701e <HAL_RCCEx_PeriphCLKConfig+0x9de>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007010:	2301      	movs	r3, #1
 8007012:	75fb      	strb	r3, [r7, #23]
        break;
 8007014:	e003      	b.n	800701e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8007016:	bf00      	nop
 8007018:	58024400 	.word	0x58024400
        break;
 800701c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800701e:	7dfb      	ldrb	r3, [r7, #23]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d109      	bne.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x9f8>
    {
      /* Set the source of SPDIFRX clock */
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007024:	4b8e      	ldr	r3, [pc, #568]	@ (8007260 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007026:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007028:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007030:	498b      	ldr	r1, [pc, #556]	@ (8007260 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007032:	4313      	orrs	r3, r2
 8007034:	650b      	str	r3, [r1, #80]	@ 0x50
 8007036:	e001      	b.n	800703c <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007038:	7dfb      	ldrb	r3, [r7, #23]
 800703a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007044:	2b00      	cmp	r3, #0
 8007046:	d043      	beq.n	80070d0 <HAL_RCCEx_PeriphCLKConfig+0xa90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(PeriphClkInit->Spi1ClockSelection));

    switch (PeriphClkInit->Spi1ClockSelection)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800704c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007050:	d02c      	beq.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0xa6c>
 8007052:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007056:	d826      	bhi.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0xa66>
 8007058:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800705c:	d028      	beq.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800705e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007062:	d820      	bhi.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0xa66>
 8007064:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007068:	d016      	beq.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0xa58>
 800706a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800706e:	d81a      	bhi.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0xa66>
 8007070:	2b00      	cmp	r3, #0
 8007072:	d003      	beq.n	800707c <HAL_RCCEx_PeriphCLKConfig+0xa3c>
 8007074:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007078:	d007      	beq.n	800708a <HAL_RCCEx_PeriphCLKConfig+0xa4a>
 800707a:	e014      	b.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:  /* PLL1_Q is used as clock source for SPI1 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
 800707c:	4b78      	ldr	r3, [pc, #480]	@ (8007260 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800707e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007080:	4a77      	ldr	r2, [pc, #476]	@ (8007260 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007082:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007086:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8007088:	e013      	b.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0xa72>

      case RCC_SPI1CLKSOURCE_PLL2P:  /* PLL2_P is used as clock source for SPI1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 800708a:	4b75      	ldr	r3, [pc, #468]	@ (8007260 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800708c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800708e:	4a74      	ldr	r2, [pc, #464]	@ (8007260 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007090:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007094:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8007096:	e00c      	b.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0xa72>

      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3_P is used as clock source for SPI1 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_PCLK);
 8007098:	4b71      	ldr	r3, [pc, #452]	@ (8007260 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800709a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800709c:	4a70      	ldr	r2, [pc, #448]	@ (8007260 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800709e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80070a2:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80070a4:	e005      	b.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0xa72>
      case RCC_SPI1CLKSOURCE_CLKP:  /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070a6:	2301      	movs	r3, #1
 80070a8:	75fb      	strb	r3, [r7, #23]
        break;
 80070aa:	e002      	b.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0xa72>
        break;
 80070ac:	bf00      	nop
 80070ae:	e000      	b.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0xa72>
        break;
 80070b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070b2:	7dfb      	ldrb	r3, [r7, #23]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d109      	bne.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0xa8c>
    {
      /* Set the source of SPI1 clock*/
      __HAL_RCC_SPI1_CONFIG(PeriphClkInit->Spi1ClockSelection);
 80070b8:	4b69      	ldr	r3, [pc, #420]	@ (8007260 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80070ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070bc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070c4:	4966      	ldr	r1, [pc, #408]	@ (8007260 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80070c6:	4313      	orrs	r3, r2
 80070c8:	654b      	str	r3, [r1, #84]	@ 0x54
 80070ca:	e001      	b.n	80070d0 <HAL_RCCEx_PeriphCLKConfig+0xa90>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070cc:	7dfb      	ldrb	r3, [r7, #23]
 80070ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI2/SPI3 configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI23) == RCC_PERIPHCLK_SPI23)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d03c      	beq.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0xb16>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI23CLKSOURCE(PeriphClkInit->Spi23ClockSelection));

    switch (PeriphClkInit->Spi23ClockSelection)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070e0:	2b40      	cmp	r3, #64	@ 0x40
 80070e2:	d026      	beq.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 80070e4:	2b40      	cmp	r3, #64	@ 0x40
 80070e6:	d821      	bhi.n	800712c <HAL_RCCEx_PeriphCLKConfig+0xaec>
 80070e8:	2b30      	cmp	r3, #48	@ 0x30
 80070ea:	d024      	beq.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
 80070ec:	2b30      	cmp	r3, #48	@ 0x30
 80070ee:	d81d      	bhi.n	800712c <HAL_RCCEx_PeriphCLKConfig+0xaec>
 80070f0:	2b20      	cmp	r3, #32
 80070f2:	d014      	beq.n	800711e <HAL_RCCEx_PeriphCLKConfig+0xade>
 80070f4:	2b20      	cmp	r3, #32
 80070f6:	d819      	bhi.n	800712c <HAL_RCCEx_PeriphCLKConfig+0xaec>
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d002      	beq.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0xac2>
 80070fc:	2b10      	cmp	r3, #16
 80070fe:	d007      	beq.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0xad0>
 8007100:	e014      	b.n	800712c <HAL_RCCEx_PeriphCLKConfig+0xaec>
    {
      case RCC_SPI23CLKSOURCE_PLL1Q:  /* PLL1_Q is used as clock source for SPI2/SPI3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
 8007102:	4b57      	ldr	r3, [pc, #348]	@ (8007260 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007106:	4a56      	ldr	r2, [pc, #344]	@ (8007260 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007108:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800710c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI2/SPI3 clock source configuration done later after clock selection check */
        break;
 800710e:	e013      	b.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0xaf8>

      case RCC_SPI23CLKSOURCE_PLL2P:  /* PLL2_P is used as clock source for SPI2/SPI3 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 8007110:	4b53      	ldr	r3, [pc, #332]	@ (8007260 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007114:	4a52      	ldr	r2, [pc, #328]	@ (8007260 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007116:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800711a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI2/SPI3 clock source configuration done later after clock selection check */
        break;
 800711c:	e00c      	b.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0xaf8>

      case RCC_SPI23CLKSOURCE_PLL3P:  /* PLL3_P is used as clock source for SPI2/SPI3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_PCLK);
 800711e:	4b50      	ldr	r3, [pc, #320]	@ (8007260 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007122:	4a4f      	ldr	r2, [pc, #316]	@ (8007260 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007124:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007128:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI2/SPI3 clock source configuration done later after clock selection check */
        break;
 800712a:	e005      	b.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
      case RCC_SPI23CLKSOURCE_CLKP:  /* HSI, HSE, or CSI oscillator is used as source of SPI2/SPI3 clock */
        /* SPI2/SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800712c:	2301      	movs	r3, #1
 800712e:	75fb      	strb	r3, [r7, #23]
        break;
 8007130:	e002      	b.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 8007132:	bf00      	nop
 8007134:	e000      	b.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 8007136:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007138:	7dfb      	ldrb	r3, [r7, #23]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d109      	bne.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0xb12>
    {
      /* Set the source of SPI2/SPI3 clock*/
      __HAL_RCC_SPI23_CONFIG(PeriphClkInit->Spi23ClockSelection);
 800713e:	4b48      	ldr	r3, [pc, #288]	@ (8007260 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007140:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007142:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800714a:	4945      	ldr	r1, [pc, #276]	@ (8007260 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800714c:	4313      	orrs	r3, r2
 800714e:	650b      	str	r3, [r1, #80]	@ 0x50
 8007150:	e001      	b.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007152:	7dfb      	ldrb	r3, [r7, #23]
 8007154:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800715e:	2b00      	cmp	r3, #0
 8007160:	d03c      	beq.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI45CLKSOURCE(PeriphClkInit->Spi45ClockSelection));

    switch (PeriphClkInit->Spi45ClockSelection)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007166:	2b50      	cmp	r3, #80	@ 0x50
 8007168:	d022      	beq.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0xb70>
 800716a:	2b50      	cmp	r3, #80	@ 0x50
 800716c:	d81d      	bhi.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0xb6a>
 800716e:	2b40      	cmp	r3, #64	@ 0x40
 8007170:	d020      	beq.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007172:	2b40      	cmp	r3, #64	@ 0x40
 8007174:	d819      	bhi.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0xb6a>
 8007176:	2b30      	cmp	r3, #48	@ 0x30
 8007178:	d01e      	beq.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0xb78>
 800717a:	2b30      	cmp	r3, #48	@ 0x30
 800717c:	d815      	bhi.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0xb6a>
 800717e:	2b20      	cmp	r3, #32
 8007180:	d00c      	beq.n	800719c <HAL_RCCEx_PeriphCLKConfig+0xb5c>
 8007182:	2b20      	cmp	r3, #32
 8007184:	d811      	bhi.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0xb6a>
 8007186:	2b00      	cmp	r3, #0
 8007188:	d018      	beq.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 800718a:	2b10      	cmp	r3, #16
 800718c:	d10d      	bne.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0xb6a>
      case RCC_SPI45CLKSOURCE_PCLK2:  /* PCLK2 as clock source for SPI4/SPI5 */
        /* SPI4/SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2Q:  /* PLL2_Q is used as clock source for SPI4/SPI5 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_QCLK);
 800718e:	4b34      	ldr	r3, [pc, #208]	@ (8007260 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007192:	4a33      	ldr	r2, [pc, #204]	@ (8007260 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007194:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007198:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI4/SPI5 clock source configuration done later after clock selection check */
        break;
 800719a:	e010      	b.n	80071be <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_SPI45CLKSOURCE_PLL3Q:  /* PLL3_Q is used as clock source for SPI4/SPI5 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
 800719c:	4b30      	ldr	r3, [pc, #192]	@ (8007260 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800719e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071a0:	4a2f      	ldr	r2, [pc, #188]	@ (8007260 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80071a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80071a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI4/SPI5 clock source configuration done later after clock selection check */
        break;
 80071a8:	e009      	b.n	80071be <HAL_RCCEx_PeriphCLKConfig+0xb7e>
      case RCC_SPI45CLKSOURCE_HSE: /* HSE oscillator clock is used as source of SPI4/SPI5 */
        /* SPI4/SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071aa:	2301      	movs	r3, #1
 80071ac:	75fb      	strb	r3, [r7, #23]
        break;
 80071ae:	e006      	b.n	80071be <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80071b0:	bf00      	nop
 80071b2:	e004      	b.n	80071be <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80071b4:	bf00      	nop
 80071b6:	e002      	b.n	80071be <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80071b8:	bf00      	nop
 80071ba:	e000      	b.n	80071be <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80071bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071be:	7dfb      	ldrb	r3, [r7, #23]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d109      	bne.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
    {
      /* Set the source of SPI4/SPI5 clock */
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80071c4:	4b26      	ldr	r3, [pc, #152]	@ (8007260 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80071c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071c8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071d0:	4923      	ldr	r1, [pc, #140]	@ (8007260 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80071d2:	4313      	orrs	r3, r2
 80071d4:	654b      	str	r3, [r1, #84]	@ 0x54
 80071d6:	e001      	b.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071d8:	7dfb      	ldrb	r3, [r7, #23]
 80071da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d03f      	beq.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0xc28>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(PeriphClkInit->Spi6ClockSelection));

    switch (PeriphClkInit->Spi6ClockSelection)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80071ec:	2b50      	cmp	r3, #80	@ 0x50
 80071ee:	d022      	beq.n	8007236 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80071f0:	2b50      	cmp	r3, #80	@ 0x50
 80071f2:	d81d      	bhi.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0xbf0>
 80071f4:	2b40      	cmp	r3, #64	@ 0x40
 80071f6:	d020      	beq.n	800723a <HAL_RCCEx_PeriphCLKConfig+0xbfa>
 80071f8:	2b40      	cmp	r3, #64	@ 0x40
 80071fa:	d819      	bhi.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0xbf0>
 80071fc:	2b30      	cmp	r3, #48	@ 0x30
 80071fe:	d01e      	beq.n	800723e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8007200:	2b30      	cmp	r3, #48	@ 0x30
 8007202:	d815      	bhi.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0xbf0>
 8007204:	2b20      	cmp	r3, #32
 8007206:	d00c      	beq.n	8007222 <HAL_RCCEx_PeriphCLKConfig+0xbe2>
 8007208:	2b20      	cmp	r3, #32
 800720a:	d811      	bhi.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0xbf0>
 800720c:	2b00      	cmp	r3, #0
 800720e:	d018      	beq.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8007210:	2b10      	cmp	r3, #16
 8007212:	d10d      	bne.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0xbf0>
      case RCC_SPI6CLKSOURCE_PCLK4: /* PCLK4 as clock source for SPI6 */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q:  /* PLL2_Q is used as clock source for SPI6 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_QCLK);
 8007214:	4b12      	ldr	r3, [pc, #72]	@ (8007260 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007218:	4a11      	ldr	r2, [pc, #68]	@ (8007260 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800721a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800721e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007220:	e010      	b.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0xc04>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3_Q is used as clock source for SPI6 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
 8007222:	4b0f      	ldr	r3, [pc, #60]	@ (8007260 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007226:	4a0e      	ldr	r2, [pc, #56]	@ (8007260 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007228:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800722c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800722e:	e009      	b.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0xc04>
      case RCC_SPI6CLKSOURCE_HSE: /* HSE oscillator is used as source for SPI6 */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007230:	2301      	movs	r3, #1
 8007232:	75fb      	strb	r3, [r7, #23]
        break;
 8007234:	e006      	b.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0xc04>
        break;
 8007236:	bf00      	nop
 8007238:	e004      	b.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0xc04>
        break;
 800723a:	bf00      	nop
 800723c:	e002      	b.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0xc04>
        break;
 800723e:	bf00      	nop
 8007240:	e000      	b.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0xc04>
        break;
 8007242:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007244:	7dfb      	ldrb	r3, [r7, #23]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d10c      	bne.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0xc24>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800724a:	4b05      	ldr	r3, [pc, #20]	@ (8007260 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800724c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800724e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007256:	4902      	ldr	r1, [pc, #8]	@ (8007260 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007258:	4313      	orrs	r3, r2
 800725a:	658b      	str	r3, [r1, #88]	@ 0x58
 800725c:	e004      	b.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800725e:	bf00      	nop
 8007260:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007264:	7dfb      	ldrb	r3, [r7, #23]
 8007266:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007270:	2b00      	cmp	r3, #0
 8007272:	d034      	beq.n	80072de <HAL_RCCEx_PeriphCLKConfig+0xc9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    switch (PeriphClkInit->Usart1ClockSelection)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007278:	2b05      	cmp	r3, #5
 800727a:	d81d      	bhi.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800727c:	a201      	add	r2, pc, #4	@ (adr r2, 8007284 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800727e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007282:	bf00      	nop
 8007284:	080072bf 	.word	0x080072bf
 8007288:	0800729d 	.word	0x0800729d
 800728c:	080072ab 	.word	0x080072ab
 8007290:	080072bf 	.word	0x080072bf
 8007294:	080072bf 	.word	0x080072bf
 8007298:	080072bf 	.word	0x080072bf
      case RCC_USART1CLKSOURCE_PCLK2: /* PCLK2 as clock source for USART1 */
        /* USART1 clock source configuration done later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q: /* PLL2_Q is used as clock source for USART1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_QCLK);
 800729c:	4b69      	ldr	r3, [pc, #420]	@ (8007444 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 800729e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072a0:	4a68      	ldr	r2, [pc, #416]	@ (8007444 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 80072a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80072a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* USART1 clock source configuration done later after clock selection check */
        break;
 80072a8:	e00a      	b.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0xc80>

      case RCC_USART1CLKSOURCE_PLL3Q: /* PLL3_Q is used as clock source for USART1 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
 80072aa:	4b66      	ldr	r3, [pc, #408]	@ (8007444 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 80072ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072ae:	4a65      	ldr	r2, [pc, #404]	@ (8007444 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 80072b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80072b4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* USART1 clock source configuration done later after clock selection check */
        break;
 80072b6:	e003      	b.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0xc80>
      case RCC_USART1CLKSOURCE_LSE: /* LSE oscillator is used as source for USART1 */
        /* USART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80072b8:	2301      	movs	r3, #1
 80072ba:	75fb      	strb	r3, [r7, #23]
        break;
 80072bc:	e000      	b.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0xc80>
        break;
 80072be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072c0:	7dfb      	ldrb	r3, [r7, #23]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d109      	bne.n	80072da <HAL_RCCEx_PeriphCLKConfig+0xc9a>
    {
      /* Set the source of USART1 clock */
      __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80072c6:	4b5f      	ldr	r3, [pc, #380]	@ (8007444 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 80072c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072ca:	f023 0207 	bic.w	r2, r3, #7
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80072d2:	495c      	ldr	r1, [pc, #368]	@ (8007444 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 80072d4:	4313      	orrs	r3, r2
 80072d6:	654b      	str	r3, [r1, #84]	@ 0x54
 80072d8:	e001      	b.n	80072de <HAL_RCCEx_PeriphCLKConfig+0xc9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072da:	7dfb      	ldrb	r3, [r7, #23]
 80072dc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------- USART2/USART3/UART4/UART5/UART7/UART8 Configuration --------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d033      	beq.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0xd12>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART234578CLKSOURCE(PeriphClkInit->Usart234578ClockSelection));

    switch (PeriphClkInit->Usart234578ClockSelection)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072ee:	2b05      	cmp	r3, #5
 80072f0:	d81c      	bhi.n	800732c <HAL_RCCEx_PeriphCLKConfig+0xcec>
 80072f2:	a201      	add	r2, pc, #4	@ (adr r2, 80072f8 <HAL_RCCEx_PeriphCLKConfig+0xcb8>)
 80072f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072f8:	08007333 	.word	0x08007333
 80072fc:	08007311 	.word	0x08007311
 8007300:	0800731f 	.word	0x0800731f
 8007304:	08007333 	.word	0x08007333
 8007308:	08007333 	.word	0x08007333
 800730c:	08007333 	.word	0x08007333
      case RCC_USART234578CLKSOURCE_PCLK1: /* PCLK1 as clock source for USART2/USART3/UART4/UART5/UART7/UART8 */
        /* USART2/USART3/UART4/UART5/UART7/UART8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2Q: /* PLL2_Q is used as clock source for USART2/USART3/UART4/UART5/UART7/UART8 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_QCLK);
 8007310:	4b4c      	ldr	r3, [pc, #304]	@ (8007444 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8007312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007314:	4a4b      	ldr	r2, [pc, #300]	@ (8007444 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8007316:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800731a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* USART2/USART3/UART4/UART5/UART7/UART8 clock source configuration done later after clock selection check */
        break;
 800731c:	e00a      	b.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0xcf4>

      case RCC_USART234578CLKSOURCE_PLL3Q: /* PLL3_Q is used as clock source for USART2/USART3/UART4/UART5/UART7/UART8 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
 800731e:	4b49      	ldr	r3, [pc, #292]	@ (8007444 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8007320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007322:	4a48      	ldr	r2, [pc, #288]	@ (8007444 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8007324:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007328:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* USART2/USART3/UART4/UART5/UART7/UART8 clock source configuration done later after clock selection check */
        break;
 800732a:	e003      	b.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0xcf4>
        /* LSE,  oscillator is used as source of USART2/USART3/UART4/UART5/UART7/UART8 clock */
        /* USART2/USART3/UART4/UART5/UART7/UART8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800732c:	2301      	movs	r3, #1
 800732e:	75fb      	strb	r3, [r7, #23]
        break;
 8007330:	e000      	b.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0xcf4>
        break;
 8007332:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007334:	7dfb      	ldrb	r3, [r7, #23]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d109      	bne.n	800734e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
      /* Set the source of USART2/USART3/UART4/UART5/UART7/UART8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800733a:	4b42      	ldr	r3, [pc, #264]	@ (8007444 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 800733c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800733e:	f023 0207 	bic.w	r2, r3, #7
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007346:	493f      	ldr	r1, [pc, #252]	@ (8007444 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8007348:	4313      	orrs	r3, r2
 800734a:	650b      	str	r3, [r1, #80]	@ 0x50
 800734c:	e001      	b.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0xd12>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800734e:	7dfb      	ldrb	r3, [r7, #23]
 8007350:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USBPHYC Configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBPHYC) == RCC_PERIPHCLK_USBPHYC)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800735a:	2b00      	cmp	r3, #0
 800735c:	d027      	beq.n	80073ae <HAL_RCCEx_PeriphCLKConfig+0xd6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCCLKSOURCE(PeriphClkInit->UsbPhycClockSelection));

    switch (PeriphClkInit->UsbPhycClockSelection)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007362:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007366:	d008      	beq.n	800737a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8007368:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800736c:	d80c      	bhi.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0xd48>
 800736e:	2b00      	cmp	r3, #0
 8007370:	d00d      	beq.n	800738e <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8007372:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007376:	d00a      	beq.n	800738e <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8007378:	e006      	b.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0xd48>
    {
      case RCC_USBPHYCCLKSOURCE_PLL3Q: /* PLL3_Q is used as clock source for USBPHYC */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
 800737a:	4b32      	ldr	r3, [pc, #200]	@ (8007444 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 800737c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800737e:	4a31      	ldr	r2, [pc, #196]	@ (8007444 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8007380:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007384:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* USBPHYC clock source configuration done later after clock selection check */
        break;
 8007386:	e003      	b.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0xd50>
      case RCC_USBPHYCCLKSOURCE_HSE_DIV2: /* HSE divided by 2 is used as clock source for USBPHYC */
        /* USBPHYC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007388:	2301      	movs	r3, #1
 800738a:	75fb      	strb	r3, [r7, #23]
        break;
 800738c:	e000      	b.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800738e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007390:	7dfb      	ldrb	r3, [r7, #23]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d109      	bne.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0xd6a>
    {
      /* Set the source of USBPHYC clock*/
      __HAL_RCC_USBPHYC_CONFIG(PeriphClkInit->UsbPhycClockSelection);
 8007396:	4b2b      	ldr	r3, [pc, #172]	@ (8007444 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8007398:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800739a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80073a2:	4928      	ldr	r1, [pc, #160]	@ (8007444 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 80073a4:	4313      	orrs	r3, r2
 80073a6:	64cb      	str	r3, [r1, #76]	@ 0x4c
 80073a8:	e001      	b.n	80073ae <HAL_RCCEx_PeriphCLKConfig+0xd6e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073aa:	7dfb      	ldrb	r3, [r7, #23]
 80073ac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USBOTGFS Configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBOTGFS) == RCC_PERIPHCLK_USBOTGFS)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	da2c      	bge.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBOTGFSCLKSOURCE(PeriphClkInit->UsbOtgFsClockSelection));

    switch (PeriphClkInit->UsbOtgFsClockSelection)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80073ba:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80073be:	d017      	beq.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
 80073c0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80073c4:	d811      	bhi.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0xdaa>
 80073c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80073ca:	d011      	beq.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
 80073cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80073d0:	d80b      	bhi.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0xdaa>
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d00c      	beq.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
 80073d6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80073da:	d106      	bne.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    {
      case RCC_USBOTGFSCLKSOURCE_PLL3Q: /* PLL3_Q is used as clock source for USB OTG FS */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
 80073dc:	4b19      	ldr	r3, [pc, #100]	@ (8007444 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 80073de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073e0:	4a18      	ldr	r2, [pc, #96]	@ (8007444 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 80073e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80073e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* USB OTG FS clock source configuration done later after clock selection check */
        break;
 80073e8:	e003      	b.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0xdb2>
      case RCC_USBOTGFSCLKSOURCE_CLK48: /* USBPHYC CLK48 is used as clock source for USB OTG FS */
        /* USB OTG FS clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073ea:	2301      	movs	r3, #1
 80073ec:	75fb      	strb	r3, [r7, #23]
        break;
 80073ee:	e000      	b.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0xdb2>
        break;
 80073f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073f2:	7dfb      	ldrb	r3, [r7, #23]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d109      	bne.n	800740c <HAL_RCCEx_PeriphCLKConfig+0xdcc>
    {
      /* Set the source of USBPHYC clock*/
      __HAL_RCC_USBOTGFS_CONFIG(PeriphClkInit->UsbOtgFsClockSelection);
 80073f8:	4b12      	ldr	r3, [pc, #72]	@ (8007444 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 80073fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80073fc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007404:	490f      	ldr	r1, [pc, #60]	@ (8007444 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8007406:	4313      	orrs	r3, r2
 8007408:	64cb      	str	r3, [r1, #76]	@ 0x4c
 800740a:	e001      	b.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800740c:	7dfb      	ldrb	r3, [r7, #23]
 800740e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007418:	2b00      	cmp	r3, #0
 800741a:	d009      	beq.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0xdf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER_CONFIG(PeriphClkInit->TIMPresSelection);
 800741c:	4b09      	ldr	r3, [pc, #36]	@ (8007444 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 800741e:	691b      	ldr	r3, [r3, #16]
 8007420:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800742a:	4906      	ldr	r1, [pc, #24]	@ (8007444 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 800742c:	4313      	orrs	r3, r2
 800742e:	610b      	str	r3, [r1, #16]
  }

  if (status == HAL_OK)
 8007430:	7dbb      	ldrb	r3, [r7, #22]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d101      	bne.n	800743a <HAL_RCCEx_PeriphCLKConfig+0xdfa>
  {
    return HAL_OK;
 8007436:	2300      	movs	r3, #0
 8007438:	e000      	b.n	800743c <HAL_RCCEx_PeriphCLKConfig+0xdfc>
  }
  return HAL_ERROR;
 800743a:	2301      	movs	r3, #1
}
 800743c:	4618      	mov	r0, r3
 800743e:	3718      	adds	r7, #24
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}
 8007444:	58024400 	.word	0x58024400

08007448 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b082      	sub	sp, #8
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d101      	bne.n	800745a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007456:	2301      	movs	r3, #1
 8007458:	e049      	b.n	80074ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007460:	b2db      	uxtb	r3, r3
 8007462:	2b00      	cmp	r3, #0
 8007464:	d106      	bne.n	8007474 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2200      	movs	r2, #0
 800746a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f7f9 ff1c 	bl	80012ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2202      	movs	r2, #2
 8007478:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681a      	ldr	r2, [r3, #0]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	3304      	adds	r3, #4
 8007484:	4619      	mov	r1, r3
 8007486:	4610      	mov	r0, r2
 8007488:	f000 f9cc 	bl	8007824 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2201      	movs	r2, #1
 8007490:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2201      	movs	r2, #1
 8007498:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2201      	movs	r2, #1
 80074a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2201      	movs	r2, #1
 80074a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2201      	movs	r2, #1
 80074b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2201      	movs	r2, #1
 80074b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2201      	movs	r2, #1
 80074c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2201      	movs	r2, #1
 80074c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2201      	movs	r2, #1
 80074d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2201      	movs	r2, #1
 80074d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2201      	movs	r2, #1
 80074e0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2201      	movs	r2, #1
 80074e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80074ec:	2300      	movs	r3, #0
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3708      	adds	r7, #8
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}
	...

080074f8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b085      	sub	sp, #20
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007506:	b2db      	uxtb	r3, r3
 8007508:	2b01      	cmp	r3, #1
 800750a:	d001      	beq.n	8007510 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800750c:	2301      	movs	r3, #1
 800750e:	e04c      	b.n	80075aa <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2202      	movs	r2, #2
 8007514:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f1b3 4f84 	cmp.w	r3, #1107296256	@ 0x42000000
 8007520:	d022      	beq.n	8007568 <HAL_TIM_Base_Start+0x70>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800752a:	d01d      	beq.n	8007568 <HAL_TIM_Base_Start+0x70>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a21      	ldr	r2, [pc, #132]	@ (80075b8 <HAL_TIM_Base_Start+0xc0>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d018      	beq.n	8007568 <HAL_TIM_Base_Start+0x70>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a20      	ldr	r2, [pc, #128]	@ (80075bc <HAL_TIM_Base_Start+0xc4>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d013      	beq.n	8007568 <HAL_TIM_Base_Start+0x70>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a1e      	ldr	r2, [pc, #120]	@ (80075c0 <HAL_TIM_Base_Start+0xc8>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d00e      	beq.n	8007568 <HAL_TIM_Base_Start+0x70>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a1d      	ldr	r2, [pc, #116]	@ (80075c4 <HAL_TIM_Base_Start+0xcc>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d009      	beq.n	8007568 <HAL_TIM_Base_Start+0x70>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4a1b      	ldr	r2, [pc, #108]	@ (80075c8 <HAL_TIM_Base_Start+0xd0>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d004      	beq.n	8007568 <HAL_TIM_Base_Start+0x70>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a1a      	ldr	r2, [pc, #104]	@ (80075cc <HAL_TIM_Base_Start+0xd4>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d115      	bne.n	8007594 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	689a      	ldr	r2, [r3, #8]
 800756e:	4b18      	ldr	r3, [pc, #96]	@ (80075d0 <HAL_TIM_Base_Start+0xd8>)
 8007570:	4013      	ands	r3, r2
 8007572:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2b06      	cmp	r3, #6
 8007578:	d015      	beq.n	80075a6 <HAL_TIM_Base_Start+0xae>
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007580:	d011      	beq.n	80075a6 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	681a      	ldr	r2, [r3, #0]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f042 0201 	orr.w	r2, r2, #1
 8007590:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007592:	e008      	b.n	80075a6 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	681a      	ldr	r2, [r3, #0]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f042 0201 	orr.w	r2, r2, #1
 80075a2:	601a      	str	r2, [r3, #0]
 80075a4:	e000      	b.n	80075a8 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80075a8:	2300      	movs	r3, #0
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3714      	adds	r7, #20
 80075ae:	46bd      	mov	sp, r7
 80075b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b4:	4770      	bx	lr
 80075b6:	bf00      	nop
 80075b8:	40000400 	.word	0x40000400
 80075bc:	40000800 	.word	0x40000800
 80075c0:	40000c00 	.word	0x40000c00
 80075c4:	42004c00 	.word	0x42004c00
 80075c8:	40001800 	.word	0x40001800
 80075cc:	42004000 	.word	0x42004000
 80075d0:	00010007 	.word	0x00010007

080075d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b084      	sub	sp, #16
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
 80075dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80075de:	2300      	movs	r3, #0
 80075e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d101      	bne.n	80075f0 <HAL_TIM_ConfigClockSource+0x1c>
 80075ec:	2302      	movs	r3, #2
 80075ee:	e104      	b.n	80077fa <HAL_TIM_ConfigClockSource+0x226>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2201      	movs	r2, #1
 80075f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2202      	movs	r2, #2
 80075fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	689b      	ldr	r3, [r3, #8]
 8007606:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007608:	68ba      	ldr	r2, [r7, #8]
 800760a:	4b7e      	ldr	r3, [pc, #504]	@ (8007804 <HAL_TIM_ConfigClockSource+0x230>)
 800760c:	4013      	ands	r3, r2
 800760e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007616:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	68ba      	ldr	r2, [r7, #8]
 800761e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f1b3 1f20 	cmp.w	r3, #2097184	@ 0x200020
 8007628:	f000 80d1 	beq.w	80077ce <HAL_TIM_ConfigClockSource+0x1fa>
 800762c:	f1b3 1f20 	cmp.w	r3, #2097184	@ 0x200020
 8007630:	f200 80d6 	bhi.w	80077e0 <HAL_TIM_ConfigClockSource+0x20c>
 8007634:	4a74      	ldr	r2, [pc, #464]	@ (8007808 <HAL_TIM_ConfigClockSource+0x234>)
 8007636:	4293      	cmp	r3, r2
 8007638:	f000 80c9 	beq.w	80077ce <HAL_TIM_ConfigClockSource+0x1fa>
 800763c:	4a72      	ldr	r2, [pc, #456]	@ (8007808 <HAL_TIM_ConfigClockSource+0x234>)
 800763e:	4293      	cmp	r3, r2
 8007640:	f200 80ce 	bhi.w	80077e0 <HAL_TIM_ConfigClockSource+0x20c>
 8007644:	4a71      	ldr	r2, [pc, #452]	@ (800780c <HAL_TIM_ConfigClockSource+0x238>)
 8007646:	4293      	cmp	r3, r2
 8007648:	f000 80c1 	beq.w	80077ce <HAL_TIM_ConfigClockSource+0x1fa>
 800764c:	4a6f      	ldr	r2, [pc, #444]	@ (800780c <HAL_TIM_ConfigClockSource+0x238>)
 800764e:	4293      	cmp	r3, r2
 8007650:	f200 80c6 	bhi.w	80077e0 <HAL_TIM_ConfigClockSource+0x20c>
 8007654:	4a6e      	ldr	r2, [pc, #440]	@ (8007810 <HAL_TIM_ConfigClockSource+0x23c>)
 8007656:	4293      	cmp	r3, r2
 8007658:	f000 80b9 	beq.w	80077ce <HAL_TIM_ConfigClockSource+0x1fa>
 800765c:	4a6c      	ldr	r2, [pc, #432]	@ (8007810 <HAL_TIM_ConfigClockSource+0x23c>)
 800765e:	4293      	cmp	r3, r2
 8007660:	f200 80be 	bhi.w	80077e0 <HAL_TIM_ConfigClockSource+0x20c>
 8007664:	4a6b      	ldr	r2, [pc, #428]	@ (8007814 <HAL_TIM_ConfigClockSource+0x240>)
 8007666:	4293      	cmp	r3, r2
 8007668:	f000 80b1 	beq.w	80077ce <HAL_TIM_ConfigClockSource+0x1fa>
 800766c:	4a69      	ldr	r2, [pc, #420]	@ (8007814 <HAL_TIM_ConfigClockSource+0x240>)
 800766e:	4293      	cmp	r3, r2
 8007670:	f200 80b6 	bhi.w	80077e0 <HAL_TIM_ConfigClockSource+0x20c>
 8007674:	4a68      	ldr	r2, [pc, #416]	@ (8007818 <HAL_TIM_ConfigClockSource+0x244>)
 8007676:	4293      	cmp	r3, r2
 8007678:	f000 80a9 	beq.w	80077ce <HAL_TIM_ConfigClockSource+0x1fa>
 800767c:	4a66      	ldr	r2, [pc, #408]	@ (8007818 <HAL_TIM_ConfigClockSource+0x244>)
 800767e:	4293      	cmp	r3, r2
 8007680:	f200 80ae 	bhi.w	80077e0 <HAL_TIM_ConfigClockSource+0x20c>
 8007684:	4a65      	ldr	r2, [pc, #404]	@ (800781c <HAL_TIM_ConfigClockSource+0x248>)
 8007686:	4293      	cmp	r3, r2
 8007688:	f000 80a1 	beq.w	80077ce <HAL_TIM_ConfigClockSource+0x1fa>
 800768c:	4a63      	ldr	r2, [pc, #396]	@ (800781c <HAL_TIM_ConfigClockSource+0x248>)
 800768e:	4293      	cmp	r3, r2
 8007690:	f200 80a6 	bhi.w	80077e0 <HAL_TIM_ConfigClockSource+0x20c>
 8007694:	4a62      	ldr	r2, [pc, #392]	@ (8007820 <HAL_TIM_ConfigClockSource+0x24c>)
 8007696:	4293      	cmp	r3, r2
 8007698:	f000 8099 	beq.w	80077ce <HAL_TIM_ConfigClockSource+0x1fa>
 800769c:	4a60      	ldr	r2, [pc, #384]	@ (8007820 <HAL_TIM_ConfigClockSource+0x24c>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	f200 809e 	bhi.w	80077e0 <HAL_TIM_ConfigClockSource+0x20c>
 80076a4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80076a8:	f000 8091 	beq.w	80077ce <HAL_TIM_ConfigClockSource+0x1fa>
 80076ac:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80076b0:	f200 8096 	bhi.w	80077e0 <HAL_TIM_ConfigClockSource+0x20c>
 80076b4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80076b8:	f000 8089 	beq.w	80077ce <HAL_TIM_ConfigClockSource+0x1fa>
 80076bc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80076c0:	f200 808e 	bhi.w	80077e0 <HAL_TIM_ConfigClockSource+0x20c>
 80076c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80076c8:	d03e      	beq.n	8007748 <HAL_TIM_ConfigClockSource+0x174>
 80076ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80076ce:	f200 8087 	bhi.w	80077e0 <HAL_TIM_ConfigClockSource+0x20c>
 80076d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076d6:	f000 8086 	beq.w	80077e6 <HAL_TIM_ConfigClockSource+0x212>
 80076da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076de:	d87f      	bhi.n	80077e0 <HAL_TIM_ConfigClockSource+0x20c>
 80076e0:	2b70      	cmp	r3, #112	@ 0x70
 80076e2:	d01a      	beq.n	800771a <HAL_TIM_ConfigClockSource+0x146>
 80076e4:	2b70      	cmp	r3, #112	@ 0x70
 80076e6:	d87b      	bhi.n	80077e0 <HAL_TIM_ConfigClockSource+0x20c>
 80076e8:	2b60      	cmp	r3, #96	@ 0x60
 80076ea:	d050      	beq.n	800778e <HAL_TIM_ConfigClockSource+0x1ba>
 80076ec:	2b60      	cmp	r3, #96	@ 0x60
 80076ee:	d877      	bhi.n	80077e0 <HAL_TIM_ConfigClockSource+0x20c>
 80076f0:	2b50      	cmp	r3, #80	@ 0x50
 80076f2:	d03c      	beq.n	800776e <HAL_TIM_ConfigClockSource+0x19a>
 80076f4:	2b50      	cmp	r3, #80	@ 0x50
 80076f6:	d873      	bhi.n	80077e0 <HAL_TIM_ConfigClockSource+0x20c>
 80076f8:	2b40      	cmp	r3, #64	@ 0x40
 80076fa:	d058      	beq.n	80077ae <HAL_TIM_ConfigClockSource+0x1da>
 80076fc:	2b40      	cmp	r3, #64	@ 0x40
 80076fe:	d86f      	bhi.n	80077e0 <HAL_TIM_ConfigClockSource+0x20c>
 8007700:	2b30      	cmp	r3, #48	@ 0x30
 8007702:	d064      	beq.n	80077ce <HAL_TIM_ConfigClockSource+0x1fa>
 8007704:	2b30      	cmp	r3, #48	@ 0x30
 8007706:	d86b      	bhi.n	80077e0 <HAL_TIM_ConfigClockSource+0x20c>
 8007708:	2b20      	cmp	r3, #32
 800770a:	d060      	beq.n	80077ce <HAL_TIM_ConfigClockSource+0x1fa>
 800770c:	2b20      	cmp	r3, #32
 800770e:	d867      	bhi.n	80077e0 <HAL_TIM_ConfigClockSource+0x20c>
 8007710:	2b00      	cmp	r3, #0
 8007712:	d05c      	beq.n	80077ce <HAL_TIM_ConfigClockSource+0x1fa>
 8007714:	2b10      	cmp	r3, #16
 8007716:	d05a      	beq.n	80077ce <HAL_TIM_ConfigClockSource+0x1fa>
 8007718:	e062      	b.n	80077e0 <HAL_TIM_ConfigClockSource+0x20c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800772a:	f000 f9a7 	bl	8007a7c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	689b      	ldr	r3, [r3, #8]
 8007734:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800773c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	68ba      	ldr	r2, [r7, #8]
 8007744:	609a      	str	r2, [r3, #8]
      break;
 8007746:	e04f      	b.n	80077e8 <HAL_TIM_ConfigClockSource+0x214>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007758:	f000 f990 	bl	8007a7c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	689a      	ldr	r2, [r3, #8]
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800776a:	609a      	str	r2, [r3, #8]
      break;
 800776c:	e03c      	b.n	80077e8 <HAL_TIM_ConfigClockSource+0x214>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800777a:	461a      	mov	r2, r3
 800777c:	f000 f900 	bl	8007980 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	2150      	movs	r1, #80	@ 0x50
 8007786:	4618      	mov	r0, r3
 8007788:	f000 f95a 	bl	8007a40 <TIM_ITRx_SetConfig>
      break;
 800778c:	e02c      	b.n	80077e8 <HAL_TIM_ConfigClockSource+0x214>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800779a:	461a      	mov	r2, r3
 800779c:	f000 f91f 	bl	80079de <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	2160      	movs	r1, #96	@ 0x60
 80077a6:	4618      	mov	r0, r3
 80077a8:	f000 f94a 	bl	8007a40 <TIM_ITRx_SetConfig>
      break;
 80077ac:	e01c      	b.n	80077e8 <HAL_TIM_ConfigClockSource+0x214>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80077ba:	461a      	mov	r2, r3
 80077bc:	f000 f8e0 	bl	8007980 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	2140      	movs	r1, #64	@ 0x40
 80077c6:	4618      	mov	r0, r3
 80077c8:	f000 f93a 	bl	8007a40 <TIM_ITRx_SetConfig>
      break;
 80077cc:	e00c      	b.n	80077e8 <HAL_TIM_ConfigClockSource+0x214>
    case TIM_CLOCKSOURCE_ITR14:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681a      	ldr	r2, [r3, #0]
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4619      	mov	r1, r3
 80077d8:	4610      	mov	r0, r2
 80077da:	f000 f931 	bl	8007a40 <TIM_ITRx_SetConfig>
      break;
 80077de:	e003      	b.n	80077e8 <HAL_TIM_ConfigClockSource+0x214>
    }

    default:
      status = HAL_ERROR;
 80077e0:	2301      	movs	r3, #1
 80077e2:	73fb      	strb	r3, [r7, #15]
      break;
 80077e4:	e000      	b.n	80077e8 <HAL_TIM_ConfigClockSource+0x214>
      break;
 80077e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2201      	movs	r2, #1
 80077ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2200      	movs	r2, #0
 80077f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80077f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3710      	adds	r7, #16
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}
 8007802:	bf00      	nop
 8007804:	ffceff88 	.word	0xffceff88
 8007808:	00200010 	.word	0x00200010
 800780c:	00100070 	.word	0x00100070
 8007810:	00100060 	.word	0x00100060
 8007814:	00100050 	.word	0x00100050
 8007818:	00100040 	.word	0x00100040
 800781c:	00100030 	.word	0x00100030
 8007820:	00100020 	.word	0x00100020

08007824 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007824:	b480      	push	{r7}
 8007826:	b085      	sub	sp, #20
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f1b3 4f84 	cmp.w	r3, #1107296256	@ 0x42000000
 800783a:	d00f      	beq.n	800785c <TIM_Base_SetConfig+0x38>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007842:	d00b      	beq.n	800785c <TIM_Base_SetConfig+0x38>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	4a44      	ldr	r2, [pc, #272]	@ (8007958 <TIM_Base_SetConfig+0x134>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d007      	beq.n	800785c <TIM_Base_SetConfig+0x38>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	4a43      	ldr	r2, [pc, #268]	@ (800795c <TIM_Base_SetConfig+0x138>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d003      	beq.n	800785c <TIM_Base_SetConfig+0x38>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	4a42      	ldr	r2, [pc, #264]	@ (8007960 <TIM_Base_SetConfig+0x13c>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d108      	bne.n	800786e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007862:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	68fa      	ldr	r2, [r7, #12]
 800786a:	4313      	orrs	r3, r2
 800786c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f1b3 4f84 	cmp.w	r3, #1107296256	@ 0x42000000
 8007874:	d02b      	beq.n	80078ce <TIM_Base_SetConfig+0xaa>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800787c:	d027      	beq.n	80078ce <TIM_Base_SetConfig+0xaa>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	4a35      	ldr	r2, [pc, #212]	@ (8007958 <TIM_Base_SetConfig+0x134>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d023      	beq.n	80078ce <TIM_Base_SetConfig+0xaa>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	4a34      	ldr	r2, [pc, #208]	@ (800795c <TIM_Base_SetConfig+0x138>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d01f      	beq.n	80078ce <TIM_Base_SetConfig+0xaa>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	4a33      	ldr	r2, [pc, #204]	@ (8007960 <TIM_Base_SetConfig+0x13c>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d01b      	beq.n	80078ce <TIM_Base_SetConfig+0xaa>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	4a32      	ldr	r2, [pc, #200]	@ (8007964 <TIM_Base_SetConfig+0x140>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d017      	beq.n	80078ce <TIM_Base_SetConfig+0xaa>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	4a31      	ldr	r2, [pc, #196]	@ (8007968 <TIM_Base_SetConfig+0x144>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d013      	beq.n	80078ce <TIM_Base_SetConfig+0xaa>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	4a30      	ldr	r2, [pc, #192]	@ (800796c <TIM_Base_SetConfig+0x148>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d00f      	beq.n	80078ce <TIM_Base_SetConfig+0xaa>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	4a2f      	ldr	r2, [pc, #188]	@ (8007970 <TIM_Base_SetConfig+0x14c>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d00b      	beq.n	80078ce <TIM_Base_SetConfig+0xaa>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	4a2e      	ldr	r2, [pc, #184]	@ (8007974 <TIM_Base_SetConfig+0x150>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d007      	beq.n	80078ce <TIM_Base_SetConfig+0xaa>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	4a2d      	ldr	r2, [pc, #180]	@ (8007978 <TIM_Base_SetConfig+0x154>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d003      	beq.n	80078ce <TIM_Base_SetConfig+0xaa>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	4a2c      	ldr	r2, [pc, #176]	@ (800797c <TIM_Base_SetConfig+0x158>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d108      	bne.n	80078e0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80078d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	68db      	ldr	r3, [r3, #12]
 80078da:	68fa      	ldr	r2, [r7, #12]
 80078dc:	4313      	orrs	r3, r2
 80078de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	695b      	ldr	r3, [r3, #20]
 80078ea:	4313      	orrs	r3, r2
 80078ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	68fa      	ldr	r2, [r7, #12]
 80078f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	689a      	ldr	r2, [r3, #8]
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	681a      	ldr	r2, [r3, #0]
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f1b3 4f84 	cmp.w	r3, #1107296256	@ 0x42000000
 800790a:	d00b      	beq.n	8007924 <TIM_Base_SetConfig+0x100>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	4a19      	ldr	r2, [pc, #100]	@ (8007974 <TIM_Base_SetConfig+0x150>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d007      	beq.n	8007924 <TIM_Base_SetConfig+0x100>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	4a18      	ldr	r2, [pc, #96]	@ (8007978 <TIM_Base_SetConfig+0x154>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d003      	beq.n	8007924 <TIM_Base_SetConfig+0x100>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	4a17      	ldr	r2, [pc, #92]	@ (800797c <TIM_Base_SetConfig+0x158>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d103      	bne.n	800792c <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	691a      	ldr	r2, [r3, #16]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2201      	movs	r2, #1
 8007930:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	691b      	ldr	r3, [r3, #16]
 8007936:	f003 0301 	and.w	r3, r3, #1
 800793a:	2b01      	cmp	r3, #1
 800793c:	d105      	bne.n	800794a <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	691b      	ldr	r3, [r3, #16]
 8007942:	f023 0201 	bic.w	r2, r3, #1
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	611a      	str	r2, [r3, #16]
  }
}
 800794a:	bf00      	nop
 800794c:	3714      	adds	r7, #20
 800794e:	46bd      	mov	sp, r7
 8007950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007954:	4770      	bx	lr
 8007956:	bf00      	nop
 8007958:	40000400 	.word	0x40000400
 800795c:	40000800 	.word	0x40000800
 8007960:	40000c00 	.word	0x40000c00
 8007964:	42004c00 	.word	0x42004c00
 8007968:	40001800 	.word	0x40001800
 800796c:	40001c00 	.word	0x40001c00
 8007970:	40002000 	.word	0x40002000
 8007974:	42004000 	.word	0x42004000
 8007978:	42004400 	.word	0x42004400
 800797c:	42004800 	.word	0x42004800

08007980 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007980:	b480      	push	{r7}
 8007982:	b087      	sub	sp, #28
 8007984:	af00      	add	r7, sp, #0
 8007986:	60f8      	str	r0, [r7, #12]
 8007988:	60b9      	str	r1, [r7, #8]
 800798a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	6a1b      	ldr	r3, [r3, #32]
 8007990:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	6a1b      	ldr	r3, [r3, #32]
 8007996:	f023 0201 	bic.w	r2, r3, #1
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	699b      	ldr	r3, [r3, #24]
 80079a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80079aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	011b      	lsls	r3, r3, #4
 80079b0:	693a      	ldr	r2, [r7, #16]
 80079b2:	4313      	orrs	r3, r2
 80079b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	f023 030a 	bic.w	r3, r3, #10
 80079bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80079be:	697a      	ldr	r2, [r7, #20]
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	4313      	orrs	r3, r2
 80079c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	693a      	ldr	r2, [r7, #16]
 80079ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	697a      	ldr	r2, [r7, #20]
 80079d0:	621a      	str	r2, [r3, #32]
}
 80079d2:	bf00      	nop
 80079d4:	371c      	adds	r7, #28
 80079d6:	46bd      	mov	sp, r7
 80079d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079dc:	4770      	bx	lr

080079de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80079de:	b480      	push	{r7}
 80079e0:	b087      	sub	sp, #28
 80079e2:	af00      	add	r7, sp, #0
 80079e4:	60f8      	str	r0, [r7, #12]
 80079e6:	60b9      	str	r1, [r7, #8]
 80079e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	6a1b      	ldr	r3, [r3, #32]
 80079ee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	6a1b      	ldr	r3, [r3, #32]
 80079f4:	f023 0210 	bic.w	r2, r3, #16
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	699b      	ldr	r3, [r3, #24]
 8007a00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007a08:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	031b      	lsls	r3, r3, #12
 8007a0e:	693a      	ldr	r2, [r7, #16]
 8007a10:	4313      	orrs	r3, r2
 8007a12:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007a1a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	011b      	lsls	r3, r3, #4
 8007a20:	697a      	ldr	r2, [r7, #20]
 8007a22:	4313      	orrs	r3, r2
 8007a24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	693a      	ldr	r2, [r7, #16]
 8007a2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	697a      	ldr	r2, [r7, #20]
 8007a30:	621a      	str	r2, [r3, #32]
}
 8007a32:	bf00      	nop
 8007a34:	371c      	adds	r7, #28
 8007a36:	46bd      	mov	sp, r7
 8007a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3c:	4770      	bx	lr
	...

08007a40 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b085      	sub	sp, #20
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	689b      	ldr	r3, [r3, #8]
 8007a4e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007a50:	68fa      	ldr	r2, [r7, #12]
 8007a52:	4b09      	ldr	r3, [pc, #36]	@ (8007a78 <TIM_ITRx_SetConfig+0x38>)
 8007a54:	4013      	ands	r3, r2
 8007a56:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007a58:	683a      	ldr	r2, [r7, #0]
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	f043 0307 	orr.w	r3, r3, #7
 8007a62:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	68fa      	ldr	r2, [r7, #12]
 8007a68:	609a      	str	r2, [r3, #8]
}
 8007a6a:	bf00      	nop
 8007a6c:	3714      	adds	r7, #20
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a74:	4770      	bx	lr
 8007a76:	bf00      	nop
 8007a78:	ffcfff8f 	.word	0xffcfff8f

08007a7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b087      	sub	sp, #28
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	60f8      	str	r0, [r7, #12]
 8007a84:	60b9      	str	r1, [r7, #8]
 8007a86:	607a      	str	r2, [r7, #4]
 8007a88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	689b      	ldr	r3, [r3, #8]
 8007a8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007a96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	021a      	lsls	r2, r3, #8
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	431a      	orrs	r2, r3
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	697a      	ldr	r2, [r7, #20]
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	697a      	ldr	r2, [r7, #20]
 8007aae:	609a      	str	r2, [r3, #8]
}
 8007ab0:	bf00      	nop
 8007ab2:	371c      	adds	r7, #28
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aba:	4770      	bx	lr

08007abc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b085      	sub	sp, #20
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d101      	bne.n	8007ad4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007ad0:	2302      	movs	r3, #2
 8007ad2:	e068      	b.n	8007ba6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2202      	movs	r2, #2
 8007ae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	685b      	ldr	r3, [r3, #4]
 8007aea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	689b      	ldr	r3, [r3, #8]
 8007af2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f1b3 4f84 	cmp.w	r3, #1107296256	@ 0x42000000
 8007afc:	d108      	bne.n	8007b10 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007b04:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	685b      	ldr	r3, [r3, #4]
 8007b0a:	68fa      	ldr	r2, [r7, #12]
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b10:	68fa      	ldr	r2, [r7, #12]
 8007b12:	4b28      	ldr	r3, [pc, #160]	@ (8007bb4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007b14:	4013      	ands	r3, r2
 8007b16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	68fa      	ldr	r2, [r7, #12]
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	68fa      	ldr	r2, [r7, #12]
 8007b28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f1b3 4f84 	cmp.w	r3, #1107296256	@ 0x42000000
 8007b32:	d022      	beq.n	8007b7a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b3c:	d01d      	beq.n	8007b7a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	4a1d      	ldr	r2, [pc, #116]	@ (8007bb8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d018      	beq.n	8007b7a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4a1b      	ldr	r2, [pc, #108]	@ (8007bbc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d013      	beq.n	8007b7a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4a1a      	ldr	r2, [pc, #104]	@ (8007bc0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d00e      	beq.n	8007b7a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a18      	ldr	r2, [pc, #96]	@ (8007bc4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d009      	beq.n	8007b7a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	4a17      	ldr	r2, [pc, #92]	@ (8007bc8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d004      	beq.n	8007b7a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4a15      	ldr	r2, [pc, #84]	@ (8007bcc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d10c      	bne.n	8007b94 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007b80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	689b      	ldr	r3, [r3, #8]
 8007b86:	68ba      	ldr	r2, [r7, #8]
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	68ba      	ldr	r2, [r7, #8]
 8007b92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2201      	movs	r2, #1
 8007b98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007ba4:	2300      	movs	r3, #0
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3714      	adds	r7, #20
 8007baa:	46bd      	mov	sp, r7
 8007bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb0:	4770      	bx	lr
 8007bb2:	bf00      	nop
 8007bb4:	fdffff8f 	.word	0xfdffff8f
 8007bb8:	40000400 	.word	0x40000400
 8007bbc:	40000800 	.word	0x40000800
 8007bc0:	40000c00 	.word	0x40000c00
 8007bc4:	42004c00 	.word	0x42004c00
 8007bc8:	40001800 	.word	0x40001800
 8007bcc:	42004000 	.word	0x42004000

08007bd0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b082      	sub	sp, #8
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d101      	bne.n	8007be2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007bde:	2301      	movs	r3, #1
 8007be0:	e042      	b.n	8007c68 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d106      	bne.n	8007bfa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f7f9 fb79 	bl	80012ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2224      	movs	r2, #36	@ 0x24
 8007bfe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	681a      	ldr	r2, [r3, #0]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f022 0201 	bic.w	r2, r2, #1
 8007c10:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d002      	beq.n	8007c20 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f000 ffe6 	bl	8008bec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f000 fc4d 	bl	80084c0 <UART_SetConfig>
 8007c26:	4603      	mov	r3, r0
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	d101      	bne.n	8007c30 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	e01b      	b.n	8007c68 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	685a      	ldr	r2, [r3, #4]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007c3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	689a      	ldr	r2, [r3, #8]
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007c4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	681a      	ldr	r2, [r3, #0]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f042 0201 	orr.w	r2, r2, #1
 8007c5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f001 f865 	bl	8008d30 <UART_CheckIdleState>
 8007c66:	4603      	mov	r3, r0
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	3708      	adds	r7, #8
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}

08007c70 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b08c      	sub	sp, #48	@ 0x30
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	60f8      	str	r0, [r7, #12]
 8007c78:	60b9      	str	r1, [r7, #8]
 8007c7a:	4613      	mov	r3, r2
 8007c7c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;
  uint16_t nbByte = Size;
 8007c7e:	88fb      	ldrh	r3, [r7, #6]
 8007c80:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c88:	2b20      	cmp	r3, #32
 8007c8a:	f040 80ad 	bne.w	8007de8 <HAL_UART_Transmit_DMA+0x178>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d002      	beq.n	8007c9a <HAL_UART_Transmit_DMA+0x2a>
 8007c94:	88fb      	ldrh	r3, [r7, #6]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d101      	bne.n	8007c9e <HAL_UART_Transmit_DMA+0x2e>
    {
      return HAL_ERROR;
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	e0a5      	b.n	8007dea <HAL_UART_Transmit_DMA+0x17a>
    }

    huart->pTxBuffPtr  = pData;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	68ba      	ldr	r2, [r7, #8]
 8007ca2:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	88fa      	ldrh	r2, [r7, #6]
 8007ca8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	88fa      	ldrh	r2, [r7, #6]
 8007cb0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	2221      	movs	r2, #33	@ 0x21
 8007cc0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d06d      	beq.n	8007da8 <HAL_UART_Transmit_DMA+0x138>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007cd0:	4a48      	ldr	r2, [pc, #288]	@ (8007df4 <HAL_UART_Transmit_DMA+0x184>)
 8007cd2:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007cd8:	4a47      	ldr	r2, [pc, #284]	@ (8007df8 <HAL_UART_Transmit_DMA+0x188>)
 8007cda:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007ce0:	4a46      	ldr	r2, [pc, #280]	@ (8007dfc <HAL_UART_Transmit_DMA+0x18c>)
 8007ce2:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007ce8:	2200      	movs	r2, #0
 8007cea:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
         should be aligned on a u16 frontier, so nbByte should be equal to Size * 2 */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	689b      	ldr	r3, [r3, #8]
 8007cf0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007cf4:	d106      	bne.n	8007d04 <HAL_UART_Transmit_DMA+0x94>
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	691b      	ldr	r3, [r3, #16]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d102      	bne.n	8007d04 <HAL_UART_Transmit_DMA+0x94>
      {
        nbByte = Size * 2U;
 8007cfe:	88fb      	ldrh	r3, [r7, #6]
 8007d00:	005b      	lsls	r3, r3, #1
 8007d02:	85bb      	strh	r3, [r7, #44]	@ 0x2c
      }

      /* Check linked list mode */
      if ((huart->hdmatx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007d08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d02d      	beq.n	8007d6e <HAL_UART_Transmit_DMA+0xfe>
      {
        if ((huart->hdmatx->LinkedListQueue != NULL) && (huart->hdmatx->LinkedListQueue->Head != NULL))
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007d16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d024      	beq.n	8007d66 <HAL_UART_Transmit_DMA+0xf6>
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007d20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d01e      	beq.n	8007d66 <HAL_UART_Transmit_DMA+0xf6>
        {
          /* Set DMA data size */
          huart->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = nbByte;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007d2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8007d32:	609a      	str	r2, [r3, #8]

          /* Set DMA source address */
          huart->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)huart->pTxBuffPtr;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007d3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	60da      	str	r2, [r3, #12]

          /* Set DMA destination address */
          huart->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] =
            (uint32_t)&huart->Instance->TDR;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f103 0228 	add.w	r2, r3, #40	@ 0x28
          huart->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] =
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007d4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	611a      	str	r2, [r3, #16]

          /* Enable the UART transmit DMA channel */
          status = HAL_DMAEx_List_Start_IT(huart->hdmatx);
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f7fc f981 	bl	8004060 <HAL_DMAEx_List_Start_IT>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8007d64:	e012      	b.n	8007d8c <HAL_UART_Transmit_DMA+0x11c>
        }
        else
        {
          /* Update status */
          status = HAL_ERROR;
 8007d66:	2301      	movs	r3, #1
 8007d68:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8007d6c:	e00e      	b.n	8007d8c <HAL_UART_Transmit_DMA+0x11c>
        }
      }
      else
      {
        /* Enable the UART transmit DMA channel */
        status = HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, nbByte);
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d76:	4619      	mov	r1, r3
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	3328      	adds	r3, #40	@ 0x28
 8007d7e:	461a      	mov	r2, r3
 8007d80:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8007d82:	f7fb faf5 	bl	8003370 <HAL_DMA_Start_IT>
 8007d86:	4603      	mov	r3, r0
 8007d88:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }

      if (status != HAL_OK)
 8007d8c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d009      	beq.n	8007da8 <HAL_UART_Transmit_DMA+0x138>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	2210      	movs	r2, #16
 8007d98:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2220      	movs	r2, #32
 8007da0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8007da4:	2301      	movs	r3, #1
 8007da6:	e020      	b.n	8007dea <HAL_UART_Transmit_DMA+0x17a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	2240      	movs	r2, #64	@ 0x40
 8007dae:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	3308      	adds	r3, #8
 8007db6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007db8:	69bb      	ldr	r3, [r7, #24]
 8007dba:	e853 3f00 	ldrex	r3, [r3]
 8007dbe:	617b      	str	r3, [r7, #20]
   return(result);
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007dc6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	3308      	adds	r3, #8
 8007dce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007dd0:	627a      	str	r2, [r7, #36]	@ 0x24
 8007dd2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dd4:	6a39      	ldr	r1, [r7, #32]
 8007dd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007dd8:	e841 2300 	strex	r3, r2, [r1]
 8007ddc:	61fb      	str	r3, [r7, #28]
   return(result);
 8007dde:	69fb      	ldr	r3, [r7, #28]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d1e5      	bne.n	8007db0 <HAL_UART_Transmit_DMA+0x140>

    return HAL_OK;
 8007de4:	2300      	movs	r3, #0
 8007de6:	e000      	b.n	8007dea <HAL_UART_Transmit_DMA+0x17a>
  }
  else
  {
    return HAL_BUSY;
 8007de8:	2302      	movs	r3, #2
  }
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3730      	adds	r7, #48	@ 0x30
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}
 8007df2:	bf00      	nop
 8007df4:	080090ad 	.word	0x080090ad
 8007df8:	08009141 	.word	0x08009141
 8007dfc:	0800915d 	.word	0x0800915d

08007e00 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b0ba      	sub	sp, #232	@ 0xe8
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	69db      	ldr	r3, [r3, #28]
 8007e0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	689b      	ldr	r3, [r3, #8]
 8007e22:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007e26:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007e2a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007e2e:	4013      	ands	r3, r2
 8007e30:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007e34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d11b      	bne.n	8007e74 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007e3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e40:	f003 0320 	and.w	r3, r3, #32
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d015      	beq.n	8007e74 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007e48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e4c:	f003 0320 	and.w	r3, r3, #32
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d105      	bne.n	8007e60 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007e54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d009      	beq.n	8007e74 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	f000 82f8 	beq.w	800845a <HAL_UART_IRQHandler+0x65a>
      {
        huart->RxISR(huart);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	4798      	blx	r3
      }
      return;
 8007e72:	e2f2      	b.n	800845a <HAL_UART_IRQHandler+0x65a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007e74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	f000 8123 	beq.w	80080c4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007e7e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007e82:	4b8d      	ldr	r3, [pc, #564]	@ (80080b8 <HAL_UART_IRQHandler+0x2b8>)
 8007e84:	4013      	ands	r3, r2
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d106      	bne.n	8007e98 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007e8a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007e8e:	4b8b      	ldr	r3, [pc, #556]	@ (80080bc <HAL_UART_IRQHandler+0x2bc>)
 8007e90:	4013      	ands	r3, r2
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	f000 8116 	beq.w	80080c4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007e98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e9c:	f003 0301 	and.w	r3, r3, #1
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d011      	beq.n	8007ec8 <HAL_UART_IRQHandler+0xc8>
 8007ea4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ea8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d00b      	beq.n	8007ec8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	2201      	movs	r2, #1
 8007eb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ebe:	f043 0201 	orr.w	r2, r3, #1
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007ec8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ecc:	f003 0302 	and.w	r3, r3, #2
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d011      	beq.n	8007ef8 <HAL_UART_IRQHandler+0xf8>
 8007ed4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ed8:	f003 0301 	and.w	r3, r3, #1
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d00b      	beq.n	8007ef8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	2202      	movs	r2, #2
 8007ee6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007eee:	f043 0204 	orr.w	r2, r3, #4
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007ef8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007efc:	f003 0304 	and.w	r3, r3, #4
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d011      	beq.n	8007f28 <HAL_UART_IRQHandler+0x128>
 8007f04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007f08:	f003 0301 	and.w	r3, r3, #1
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d00b      	beq.n	8007f28 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	2204      	movs	r2, #4
 8007f16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f1e:	f043 0202 	orr.w	r2, r3, #2
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007f28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f2c:	f003 0308 	and.w	r3, r3, #8
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d017      	beq.n	8007f64 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007f34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f38:	f003 0320 	and.w	r3, r3, #32
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d105      	bne.n	8007f4c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007f40:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007f44:	4b5c      	ldr	r3, [pc, #368]	@ (80080b8 <HAL_UART_IRQHandler+0x2b8>)
 8007f46:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d00b      	beq.n	8007f64 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	2208      	movs	r2, #8
 8007f52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f5a:	f043 0208 	orr.w	r2, r3, #8
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007f64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d012      	beq.n	8007f96 <HAL_UART_IRQHandler+0x196>
 8007f70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f74:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d00c      	beq.n	8007f96 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007f84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f8c:	f043 0220 	orr.w	r2, r3, #32
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	f000 825e 	beq.w	800845e <HAL_UART_IRQHandler+0x65e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007fa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007fa6:	f003 0320 	and.w	r3, r3, #32
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d013      	beq.n	8007fd6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007fae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007fb2:	f003 0320 	and.w	r3, r3, #32
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d105      	bne.n	8007fc6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007fba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007fbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d007      	beq.n	8007fd6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d003      	beq.n	8007fd6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007fdc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	689b      	ldr	r3, [r3, #8]
 8007fe6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fea:	2b40      	cmp	r3, #64	@ 0x40
 8007fec:	d005      	beq.n	8007ffa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007fee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007ff2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d054      	beq.n	80080a4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f000 fff0 	bl	8008fe0 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	689b      	ldr	r3, [r3, #8]
 8008006:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800800a:	2b40      	cmp	r3, #64	@ 0x40
 800800c:	d146      	bne.n	800809c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	3308      	adds	r3, #8
 8008014:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008018:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800801c:	e853 3f00 	ldrex	r3, [r3]
 8008020:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008024:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008028:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800802c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	3308      	adds	r3, #8
 8008036:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800803a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800803e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008042:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008046:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800804a:	e841 2300 	strex	r3, r2, [r1]
 800804e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008052:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008056:	2b00      	cmp	r3, #0
 8008058:	d1d9      	bne.n	800800e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008060:	2b00      	cmp	r3, #0
 8008062:	d017      	beq.n	8008094 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800806a:	4a15      	ldr	r2, [pc, #84]	@ (80080c0 <HAL_UART_IRQHandler+0x2c0>)
 800806c:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008074:	4618      	mov	r0, r3
 8008076:	f7fb fa57 	bl	8003528 <HAL_DMA_Abort_IT>
 800807a:	4603      	mov	r3, r0
 800807c:	2b00      	cmp	r3, #0
 800807e:	d019      	beq.n	80080b4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008086:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008088:	687a      	ldr	r2, [r7, #4]
 800808a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800808e:	4610      	mov	r0, r2
 8008090:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008092:	e00f      	b.n	80080b4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f7f8 fc63 	bl	8000960 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800809a:	e00b      	b.n	80080b4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f7f8 fc5f 	bl	8000960 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080a2:	e007      	b.n	80080b4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f7f8 fc5b 	bl	8000960 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2200      	movs	r2, #0
 80080ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80080b2:	e1d4      	b.n	800845e <HAL_UART_IRQHandler+0x65e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080b4:	bf00      	nop
    return;
 80080b6:	e1d2      	b.n	800845e <HAL_UART_IRQHandler+0x65e>
 80080b8:	10000001 	.word	0x10000001
 80080bc:	04000120 	.word	0x04000120
 80080c0:	080091dd 	.word	0x080091dd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80080c8:	2b01      	cmp	r3, #1
 80080ca:	f040 8168 	bne.w	800839e <HAL_UART_IRQHandler+0x59e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80080ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080d2:	f003 0310 	and.w	r3, r3, #16
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	f000 8161 	beq.w	800839e <HAL_UART_IRQHandler+0x59e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80080dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80080e0:	f003 0310 	and.w	r3, r3, #16
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	f000 815a 	beq.w	800839e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	2210      	movs	r2, #16
 80080f0:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	689b      	ldr	r3, [r3, #8]
 80080f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080fc:	2b40      	cmp	r3, #64	@ 0x40
 80080fe:	f040 80d2 	bne.w	80082a6 <HAL_UART_IRQHandler+0x4a6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800810c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008110:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008114:	2b00      	cmp	r3, #0
 8008116:	f000 80ac 	beq.w	8008272 <HAL_UART_IRQHandler+0x472>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008120:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008124:	429a      	cmp	r2, r3
 8008126:	f080 80a4 	bcs.w	8008272 <HAL_UART_IRQHandler+0x472>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008130:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800813a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800813c:	2b81      	cmp	r3, #129	@ 0x81
 800813e:	f000 8087 	beq.w	8008250 <HAL_UART_IRQHandler+0x450>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800814a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800814e:	e853 3f00 	ldrex	r3, [r3]
 8008152:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008156:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800815a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800815e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	461a      	mov	r2, r3
 8008168:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800816c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008170:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008174:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008178:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800817c:	e841 2300 	strex	r3, r2, [r1]
 8008180:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008184:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008188:	2b00      	cmp	r3, #0
 800818a:	d1da      	bne.n	8008142 <HAL_UART_IRQHandler+0x342>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	3308      	adds	r3, #8
 8008192:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008194:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008196:	e853 3f00 	ldrex	r3, [r3]
 800819a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800819c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800819e:	f023 0301 	bic.w	r3, r3, #1
 80081a2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	3308      	adds	r3, #8
 80081ac:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80081b0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80081b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081b6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80081b8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80081bc:	e841 2300 	strex	r3, r2, [r1]
 80081c0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80081c2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d1e1      	bne.n	800818c <HAL_UART_IRQHandler+0x38c>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	3308      	adds	r3, #8
 80081ce:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80081d2:	e853 3f00 	ldrex	r3, [r3]
 80081d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80081d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80081da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80081de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	3308      	adds	r3, #8
 80081e8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80081ec:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80081ee:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081f0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80081f2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80081f4:	e841 2300 	strex	r3, r2, [r1]
 80081f8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80081fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d1e3      	bne.n	80081c8 <HAL_UART_IRQHandler+0x3c8>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2220      	movs	r2, #32
 8008204:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2200      	movs	r2, #0
 800820c:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008214:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008216:	e853 3f00 	ldrex	r3, [r3]
 800821a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800821c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800821e:	f023 0310 	bic.w	r3, r3, #16
 8008222:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	461a      	mov	r2, r3
 800822c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008230:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008232:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008234:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008236:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008238:	e841 2300 	strex	r3, r2, [r1]
 800823c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800823e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008240:	2b00      	cmp	r3, #0
 8008242:	d1e4      	bne.n	800820e <HAL_UART_IRQHandler+0x40e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800824a:	4618      	mov	r0, r3
 800824c:	f7fb f8f0 	bl	8003430 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2202      	movs	r2, #2
 8008254:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008262:	b29b      	uxth	r3, r3
 8008264:	1ad3      	subs	r3, r2, r3
 8008266:	b29b      	uxth	r3, r3
 8008268:	4619      	mov	r1, r3
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f000 f90e 	bl	800848c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008270:	e0f7      	b.n	8008462 <HAL_UART_IRQHandler+0x662>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008278:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800827c:	429a      	cmp	r2, r3
 800827e:	f040 80f0 	bne.w	8008462 <HAL_UART_IRQHandler+0x662>
          if (huart->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008288:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800828a:	2b81      	cmp	r3, #129	@ 0x81
 800828c:	f040 80e9 	bne.w	8008462 <HAL_UART_IRQHandler+0x662>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2202      	movs	r2, #2
 8008294:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800829c:	4619      	mov	r1, r3
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f000 f8f4 	bl	800848c <HAL_UARTEx_RxEventCallback>
      return;
 80082a4:	e0dd      	b.n	8008462 <HAL_UART_IRQHandler+0x662>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80082b2:	b29b      	uxth	r3, r3
 80082b4:	1ad3      	subs	r3, r2, r3
 80082b6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80082c0:	b29b      	uxth	r3, r3
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	f000 80cf 	beq.w	8008466 <HAL_UART_IRQHandler+0x666>
          && (nb_rx_data > 0U))
 80082c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	f000 80ca 	beq.w	8008466 <HAL_UART_IRQHandler+0x666>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082da:	e853 3f00 	ldrex	r3, [r3]
 80082de:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80082e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082e2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80082e6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	461a      	mov	r2, r3
 80082f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80082f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80082f6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80082fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80082fc:	e841 2300 	strex	r3, r2, [r1]
 8008300:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008302:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008304:	2b00      	cmp	r3, #0
 8008306:	d1e4      	bne.n	80082d2 <HAL_UART_IRQHandler+0x4d2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	3308      	adds	r3, #8
 800830e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008312:	e853 3f00 	ldrex	r3, [r3]
 8008316:	623b      	str	r3, [r7, #32]
   return(result);
 8008318:	6a3a      	ldr	r2, [r7, #32]
 800831a:	4b56      	ldr	r3, [pc, #344]	@ (8008474 <HAL_UART_IRQHandler+0x674>)
 800831c:	4013      	ands	r3, r2
 800831e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	3308      	adds	r3, #8
 8008328:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800832c:	633a      	str	r2, [r7, #48]	@ 0x30
 800832e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008330:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008332:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008334:	e841 2300 	strex	r3, r2, [r1]
 8008338:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800833a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800833c:	2b00      	cmp	r3, #0
 800833e:	d1e3      	bne.n	8008308 <HAL_UART_IRQHandler+0x508>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2220      	movs	r2, #32
 8008344:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2200      	movs	r2, #0
 800834c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2200      	movs	r2, #0
 8008352:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800835a:	693b      	ldr	r3, [r7, #16]
 800835c:	e853 3f00 	ldrex	r3, [r3]
 8008360:	60fb      	str	r3, [r7, #12]
   return(result);
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	f023 0310 	bic.w	r3, r3, #16
 8008368:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	461a      	mov	r2, r3
 8008372:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008376:	61fb      	str	r3, [r7, #28]
 8008378:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800837a:	69b9      	ldr	r1, [r7, #24]
 800837c:	69fa      	ldr	r2, [r7, #28]
 800837e:	e841 2300 	strex	r3, r2, [r1]
 8008382:	617b      	str	r3, [r7, #20]
   return(result);
 8008384:	697b      	ldr	r3, [r7, #20]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d1e4      	bne.n	8008354 <HAL_UART_IRQHandler+0x554>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2202      	movs	r2, #2
 800838e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008390:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008394:	4619      	mov	r1, r3
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f000 f878 	bl	800848c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800839c:	e063      	b.n	8008466 <HAL_UART_IRQHandler+0x666>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800839e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80083a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d00e      	beq.n	80083c8 <HAL_UART_IRQHandler+0x5c8>
 80083aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80083ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d008      	beq.n	80083c8 <HAL_UART_IRQHandler+0x5c8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80083be:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f000 ff48 	bl	8009256 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80083c6:	e051      	b.n	800846c <HAL_UART_IRQHandler+0x66c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80083c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80083cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d014      	beq.n	80083fe <HAL_UART_IRQHandler+0x5fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80083d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80083d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d105      	bne.n	80083ec <HAL_UART_IRQHandler+0x5ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80083e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80083e4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d008      	beq.n	80083fe <HAL_UART_IRQHandler+0x5fe>
  {
    if (huart->TxISR != NULL)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d03a      	beq.n	800846a <HAL_UART_IRQHandler+0x66a>
    {
      huart->TxISR(huart);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	4798      	blx	r3
    }
    return;
 80083fc:	e035      	b.n	800846a <HAL_UART_IRQHandler+0x66a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80083fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008402:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008406:	2b00      	cmp	r3, #0
 8008408:	d009      	beq.n	800841e <HAL_UART_IRQHandler+0x61e>
 800840a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800840e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008412:	2b00      	cmp	r3, #0
 8008414:	d003      	beq.n	800841e <HAL_UART_IRQHandler+0x61e>
  {
    UART_EndTransmit_IT(huart);
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f000 fef2 	bl	8009200 <UART_EndTransmit_IT>
    return;
 800841c:	e026      	b.n	800846c <HAL_UART_IRQHandler+0x66c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800841e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008422:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008426:	2b00      	cmp	r3, #0
 8008428:	d009      	beq.n	800843e <HAL_UART_IRQHandler+0x63e>
 800842a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800842e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008432:	2b00      	cmp	r3, #0
 8008434:	d003      	beq.n	800843e <HAL_UART_IRQHandler+0x63e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f000 ff21 	bl	800927e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800843c:	e016      	b.n	800846c <HAL_UART_IRQHandler+0x66c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800843e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008442:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008446:	2b00      	cmp	r3, #0
 8008448:	d010      	beq.n	800846c <HAL_UART_IRQHandler+0x66c>
 800844a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800844e:	2b00      	cmp	r3, #0
 8008450:	da0c      	bge.n	800846c <HAL_UART_IRQHandler+0x66c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f000 ff09 	bl	800926a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008458:	e008      	b.n	800846c <HAL_UART_IRQHandler+0x66c>
      return;
 800845a:	bf00      	nop
 800845c:	e006      	b.n	800846c <HAL_UART_IRQHandler+0x66c>
    return;
 800845e:	bf00      	nop
 8008460:	e004      	b.n	800846c <HAL_UART_IRQHandler+0x66c>
      return;
 8008462:	bf00      	nop
 8008464:	e002      	b.n	800846c <HAL_UART_IRQHandler+0x66c>
      return;
 8008466:	bf00      	nop
 8008468:	e000      	b.n	800846c <HAL_UART_IRQHandler+0x66c>
    return;
 800846a:	bf00      	nop
  }
}
 800846c:	37e8      	adds	r7, #232	@ 0xe8
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}
 8008472:	bf00      	nop
 8008474:	effffffe 	.word	0xeffffffe

08008478 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008478:	b480      	push	{r7}
 800847a:	b083      	sub	sp, #12
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008480:	bf00      	nop
 8008482:	370c      	adds	r7, #12
 8008484:	46bd      	mov	sp, r7
 8008486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848a:	4770      	bx	lr

0800848c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800848c:	b480      	push	{r7}
 800848e:	b083      	sub	sp, #12
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
 8008494:	460b      	mov	r3, r1
 8008496:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008498:	bf00      	nop
 800849a:	370c      	adds	r7, #12
 800849c:	46bd      	mov	sp, r7
 800849e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a2:	4770      	bx	lr

080084a4 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 80084a4:	b480      	push	{r7}
 80084a6:	b083      	sub	sp, #12
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	370c      	adds	r7, #12
 80084b6:	46bd      	mov	sp, r7
 80084b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084bc:	4770      	bx	lr
	...

080084c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80084c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80084c4:	b08c      	sub	sp, #48	@ 0x30
 80084c6:	af00      	add	r7, sp, #0
 80084c8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80084ca:	2300      	movs	r3, #0
 80084cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80084d0:	697b      	ldr	r3, [r7, #20]
 80084d2:	689a      	ldr	r2, [r3, #8]
 80084d4:	697b      	ldr	r3, [r7, #20]
 80084d6:	691b      	ldr	r3, [r3, #16]
 80084d8:	431a      	orrs	r2, r3
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	695b      	ldr	r3, [r3, #20]
 80084de:	431a      	orrs	r2, r3
 80084e0:	697b      	ldr	r3, [r7, #20]
 80084e2:	69db      	ldr	r3, [r3, #28]
 80084e4:	4313      	orrs	r3, r2
 80084e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	681a      	ldr	r2, [r3, #0]
 80084ee:	4bb3      	ldr	r3, [pc, #716]	@ (80087bc <UART_SetConfig+0x2fc>)
 80084f0:	4013      	ands	r3, r2
 80084f2:	697a      	ldr	r2, [r7, #20]
 80084f4:	6812      	ldr	r2, [r2, #0]
 80084f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80084f8:	430b      	orrs	r3, r1
 80084fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	685b      	ldr	r3, [r3, #4]
 8008502:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	68da      	ldr	r2, [r3, #12]
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	430a      	orrs	r2, r1
 8008510:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008512:	697b      	ldr	r3, [r7, #20]
 8008514:	699b      	ldr	r3, [r3, #24]
 8008516:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008518:	697b      	ldr	r3, [r7, #20]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4aa8      	ldr	r2, [pc, #672]	@ (80087c0 <UART_SetConfig+0x300>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d004      	beq.n	800852c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	6a1b      	ldr	r3, [r3, #32]
 8008526:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008528:	4313      	orrs	r3, r2
 800852a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	689a      	ldr	r2, [r3, #8]
 8008532:	4ba4      	ldr	r3, [pc, #656]	@ (80087c4 <UART_SetConfig+0x304>)
 8008534:	4013      	ands	r3, r2
 8008536:	697a      	ldr	r2, [r7, #20]
 8008538:	6812      	ldr	r2, [r2, #0]
 800853a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800853c:	430b      	orrs	r3, r1
 800853e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008546:	f023 010f 	bic.w	r1, r3, #15
 800854a:	697b      	ldr	r3, [r7, #20]
 800854c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	430a      	orrs	r2, r1
 8008554:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	4a9b      	ldr	r2, [pc, #620]	@ (80087c8 <UART_SetConfig+0x308>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d131      	bne.n	80085c4 <UART_SetConfig+0x104>
 8008560:	4b9a      	ldr	r3, [pc, #616]	@ (80087cc <UART_SetConfig+0x30c>)
 8008562:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008564:	f003 0307 	and.w	r3, r3, #7
 8008568:	2b05      	cmp	r3, #5
 800856a:	d827      	bhi.n	80085bc <UART_SetConfig+0xfc>
 800856c:	a201      	add	r2, pc, #4	@ (adr r2, 8008574 <UART_SetConfig+0xb4>)
 800856e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008572:	bf00      	nop
 8008574:	0800858d 	.word	0x0800858d
 8008578:	08008595 	.word	0x08008595
 800857c:	0800859d 	.word	0x0800859d
 8008580:	080085a5 	.word	0x080085a5
 8008584:	080085ad 	.word	0x080085ad
 8008588:	080085b5 	.word	0x080085b5
 800858c:	2301      	movs	r3, #1
 800858e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008592:	e0a0      	b.n	80086d6 <UART_SetConfig+0x216>
 8008594:	2304      	movs	r3, #4
 8008596:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800859a:	e09c      	b.n	80086d6 <UART_SetConfig+0x216>
 800859c:	2308      	movs	r3, #8
 800859e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80085a2:	e098      	b.n	80086d6 <UART_SetConfig+0x216>
 80085a4:	2310      	movs	r3, #16
 80085a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80085aa:	e094      	b.n	80086d6 <UART_SetConfig+0x216>
 80085ac:	2320      	movs	r3, #32
 80085ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80085b2:	e090      	b.n	80086d6 <UART_SetConfig+0x216>
 80085b4:	2340      	movs	r3, #64	@ 0x40
 80085b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80085ba:	e08c      	b.n	80086d6 <UART_SetConfig+0x216>
 80085bc:	2380      	movs	r3, #128	@ 0x80
 80085be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80085c2:	e088      	b.n	80086d6 <UART_SetConfig+0x216>
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4a81      	ldr	r2, [pc, #516]	@ (80087d0 <UART_SetConfig+0x310>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d018      	beq.n	8008600 <UART_SetConfig+0x140>
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4a80      	ldr	r2, [pc, #512]	@ (80087d4 <UART_SetConfig+0x314>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d013      	beq.n	8008600 <UART_SetConfig+0x140>
 80085d8:	697b      	ldr	r3, [r7, #20]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4a7e      	ldr	r2, [pc, #504]	@ (80087d8 <UART_SetConfig+0x318>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d00e      	beq.n	8008600 <UART_SetConfig+0x140>
 80085e2:	697b      	ldr	r3, [r7, #20]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4a7d      	ldr	r2, [pc, #500]	@ (80087dc <UART_SetConfig+0x31c>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d009      	beq.n	8008600 <UART_SetConfig+0x140>
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4a7b      	ldr	r2, [pc, #492]	@ (80087e0 <UART_SetConfig+0x320>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d004      	beq.n	8008600 <UART_SetConfig+0x140>
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4a7a      	ldr	r2, [pc, #488]	@ (80087e4 <UART_SetConfig+0x324>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d131      	bne.n	8008664 <UART_SetConfig+0x1a4>
 8008600:	4b72      	ldr	r3, [pc, #456]	@ (80087cc <UART_SetConfig+0x30c>)
 8008602:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008604:	f003 0307 	and.w	r3, r3, #7
 8008608:	2b05      	cmp	r3, #5
 800860a:	d827      	bhi.n	800865c <UART_SetConfig+0x19c>
 800860c:	a201      	add	r2, pc, #4	@ (adr r2, 8008614 <UART_SetConfig+0x154>)
 800860e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008612:	bf00      	nop
 8008614:	0800862d 	.word	0x0800862d
 8008618:	08008635 	.word	0x08008635
 800861c:	0800863d 	.word	0x0800863d
 8008620:	08008645 	.word	0x08008645
 8008624:	0800864d 	.word	0x0800864d
 8008628:	08008655 	.word	0x08008655
 800862c:	2300      	movs	r3, #0
 800862e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008632:	e016      	b.n	8008662 <UART_SetConfig+0x1a2>
 8008634:	2304      	movs	r3, #4
 8008636:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800863a:	e012      	b.n	8008662 <UART_SetConfig+0x1a2>
 800863c:	2308      	movs	r3, #8
 800863e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008642:	e00e      	b.n	8008662 <UART_SetConfig+0x1a2>
 8008644:	2310      	movs	r3, #16
 8008646:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800864a:	e00a      	b.n	8008662 <UART_SetConfig+0x1a2>
 800864c:	2320      	movs	r3, #32
 800864e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008652:	e006      	b.n	8008662 <UART_SetConfig+0x1a2>
 8008654:	2340      	movs	r3, #64	@ 0x40
 8008656:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800865a:	e002      	b.n	8008662 <UART_SetConfig+0x1a2>
 800865c:	2380      	movs	r3, #128	@ 0x80
 800865e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008662:	e038      	b.n	80086d6 <UART_SetConfig+0x216>
 8008664:	697b      	ldr	r3, [r7, #20]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	4a55      	ldr	r2, [pc, #340]	@ (80087c0 <UART_SetConfig+0x300>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d130      	bne.n	80086d0 <UART_SetConfig+0x210>
 800866e:	4b57      	ldr	r3, [pc, #348]	@ (80087cc <UART_SetConfig+0x30c>)
 8008670:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008672:	f003 0307 	and.w	r3, r3, #7
 8008676:	2b05      	cmp	r3, #5
 8008678:	d826      	bhi.n	80086c8 <UART_SetConfig+0x208>
 800867a:	a201      	add	r2, pc, #4	@ (adr r2, 8008680 <UART_SetConfig+0x1c0>)
 800867c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008680:	08008699 	.word	0x08008699
 8008684:	080086a1 	.word	0x080086a1
 8008688:	080086a9 	.word	0x080086a9
 800868c:	080086b1 	.word	0x080086b1
 8008690:	080086b9 	.word	0x080086b9
 8008694:	080086c1 	.word	0x080086c1
 8008698:	2302      	movs	r3, #2
 800869a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800869e:	e01a      	b.n	80086d6 <UART_SetConfig+0x216>
 80086a0:	2304      	movs	r3, #4
 80086a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80086a6:	e016      	b.n	80086d6 <UART_SetConfig+0x216>
 80086a8:	2308      	movs	r3, #8
 80086aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80086ae:	e012      	b.n	80086d6 <UART_SetConfig+0x216>
 80086b0:	2310      	movs	r3, #16
 80086b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80086b6:	e00e      	b.n	80086d6 <UART_SetConfig+0x216>
 80086b8:	2320      	movs	r3, #32
 80086ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80086be:	e00a      	b.n	80086d6 <UART_SetConfig+0x216>
 80086c0:	2340      	movs	r3, #64	@ 0x40
 80086c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80086c6:	e006      	b.n	80086d6 <UART_SetConfig+0x216>
 80086c8:	2380      	movs	r3, #128	@ 0x80
 80086ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80086ce:	e002      	b.n	80086d6 <UART_SetConfig+0x216>
 80086d0:	2380      	movs	r3, #128	@ 0x80
 80086d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	4a39      	ldr	r2, [pc, #228]	@ (80087c0 <UART_SetConfig+0x300>)
 80086dc:	4293      	cmp	r3, r2
 80086de:	f040 80fe 	bne.w	80088de <UART_SetConfig+0x41e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80086e2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80086e6:	2b20      	cmp	r3, #32
 80086e8:	dc48      	bgt.n	800877c <UART_SetConfig+0x2bc>
 80086ea:	2b02      	cmp	r3, #2
 80086ec:	f2c0 8088 	blt.w	8008800 <UART_SetConfig+0x340>
 80086f0:	3b02      	subs	r3, #2
 80086f2:	2b1e      	cmp	r3, #30
 80086f4:	f200 8084 	bhi.w	8008800 <UART_SetConfig+0x340>
 80086f8:	a201      	add	r2, pc, #4	@ (adr r2, 8008700 <UART_SetConfig+0x240>)
 80086fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086fe:	bf00      	nop
 8008700:	08008793 	.word	0x08008793
 8008704:	08008801 	.word	0x08008801
 8008708:	08008783 	.word	0x08008783
 800870c:	08008801 	.word	0x08008801
 8008710:	08008801 	.word	0x08008801
 8008714:	08008801 	.word	0x08008801
 8008718:	0800878b 	.word	0x0800878b
 800871c:	08008801 	.word	0x08008801
 8008720:	08008801 	.word	0x08008801
 8008724:	08008801 	.word	0x08008801
 8008728:	08008801 	.word	0x08008801
 800872c:	08008801 	.word	0x08008801
 8008730:	08008801 	.word	0x08008801
 8008734:	08008801 	.word	0x08008801
 8008738:	0800879b 	.word	0x0800879b
 800873c:	08008801 	.word	0x08008801
 8008740:	08008801 	.word	0x08008801
 8008744:	08008801 	.word	0x08008801
 8008748:	08008801 	.word	0x08008801
 800874c:	08008801 	.word	0x08008801
 8008750:	08008801 	.word	0x08008801
 8008754:	08008801 	.word	0x08008801
 8008758:	08008801 	.word	0x08008801
 800875c:	08008801 	.word	0x08008801
 8008760:	08008801 	.word	0x08008801
 8008764:	08008801 	.word	0x08008801
 8008768:	08008801 	.word	0x08008801
 800876c:	08008801 	.word	0x08008801
 8008770:	08008801 	.word	0x08008801
 8008774:	08008801 	.word	0x08008801
 8008778:	080087f3 	.word	0x080087f3
 800877c:	2b40      	cmp	r3, #64	@ 0x40
 800877e:	d03b      	beq.n	80087f8 <UART_SetConfig+0x338>
 8008780:	e03e      	b.n	8008800 <UART_SetConfig+0x340>
    {
      case UART_CLOCKSOURCE_PLL2Q:
        pclk = HAL_RCC_GetPLL2QFreq();
 8008782:	f7fd fccf 	bl	8006124 <HAL_RCC_GetPLL2QFreq>
 8008786:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008788:	e040      	b.n	800880c <UART_SetConfig+0x34c>
      case UART_CLOCKSOURCE_PLL3Q:
        pclk = HAL_RCC_GetPLL3QFreq();
 800878a:	f7fd fce1 	bl	8006150 <HAL_RCC_GetPLL3QFreq>
 800878e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008790:	e03c      	b.n	800880c <UART_SetConfig+0x34c>
      case UART_CLOCKSOURCE_PCLK4:
        pclk = HAL_RCC_GetPCLK4Freq();
 8008792:	f7fd fcab 	bl	80060ec <HAL_RCC_GetPCLK4Freq>
 8008796:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008798:	e038      	b.n	800880c <UART_SetConfig+0x34c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800879a:	4b0c      	ldr	r3, [pc, #48]	@ (80087cc <UART_SetConfig+0x30c>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f003 0320 	and.w	r3, r3, #32
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d022      	beq.n	80087ec <UART_SetConfig+0x32c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80087a6:	4b09      	ldr	r3, [pc, #36]	@ (80087cc <UART_SetConfig+0x30c>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	08db      	lsrs	r3, r3, #3
 80087ac:	f003 0303 	and.w	r3, r3, #3
 80087b0:	4a0d      	ldr	r2, [pc, #52]	@ (80087e8 <UART_SetConfig+0x328>)
 80087b2:	fa22 f303 	lsr.w	r3, r2, r3
 80087b6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80087b8:	e028      	b.n	800880c <UART_SetConfig+0x34c>
 80087ba:	bf00      	nop
 80087bc:	cfff69f3 	.word	0xcfff69f3
 80087c0:	58000c00 	.word	0x58000c00
 80087c4:	11fff4ff 	.word	0x11fff4ff
 80087c8:	42001000 	.word	0x42001000
 80087cc:	58024400 	.word	0x58024400
 80087d0:	40004400 	.word	0x40004400
 80087d4:	40004800 	.word	0x40004800
 80087d8:	40004c00 	.word	0x40004c00
 80087dc:	40005000 	.word	0x40005000
 80087e0:	40007800 	.word	0x40007800
 80087e4:	40007c00 	.word	0x40007c00
 80087e8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80087ec:	4b99      	ldr	r3, [pc, #612]	@ (8008a54 <UART_SetConfig+0x594>)
 80087ee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80087f0:	e00c      	b.n	800880c <UART_SetConfig+0x34c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80087f2:	4b99      	ldr	r3, [pc, #612]	@ (8008a58 <UART_SetConfig+0x598>)
 80087f4:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80087f6:	e009      	b.n	800880c <UART_SetConfig+0x34c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80087f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80087fc:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80087fe:	e005      	b.n	800880c <UART_SetConfig+0x34c>
      default:
        pclk = 0U;
 8008800:	2300      	movs	r3, #0
 8008802:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008804:	2301      	movs	r3, #1
 8008806:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800880a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800880c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800880e:	2b00      	cmp	r3, #0
 8008810:	f000 81ce 	beq.w	8008bb0 <UART_SetConfig+0x6f0>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008818:	4a90      	ldr	r2, [pc, #576]	@ (8008a5c <UART_SetConfig+0x59c>)
 800881a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800881e:	461a      	mov	r2, r3
 8008820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008822:	fbb3 f3f2 	udiv	r3, r3, r2
 8008826:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008828:	697b      	ldr	r3, [r7, #20]
 800882a:	685a      	ldr	r2, [r3, #4]
 800882c:	4613      	mov	r3, r2
 800882e:	005b      	lsls	r3, r3, #1
 8008830:	4413      	add	r3, r2
 8008832:	69ba      	ldr	r2, [r7, #24]
 8008834:	429a      	cmp	r2, r3
 8008836:	d305      	bcc.n	8008844 <UART_SetConfig+0x384>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	685b      	ldr	r3, [r3, #4]
 800883c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800883e:	69ba      	ldr	r2, [r7, #24]
 8008840:	429a      	cmp	r2, r3
 8008842:	d903      	bls.n	800884c <UART_SetConfig+0x38c>
      {
        ret = HAL_ERROR;
 8008844:	2301      	movs	r3, #1
 8008846:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800884a:	e1b1      	b.n	8008bb0 <UART_SetConfig+0x6f0>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800884c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800884e:	2200      	movs	r2, #0
 8008850:	60bb      	str	r3, [r7, #8]
 8008852:	60fa      	str	r2, [r7, #12]
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008858:	4a80      	ldr	r2, [pc, #512]	@ (8008a5c <UART_SetConfig+0x59c>)
 800885a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800885e:	b29b      	uxth	r3, r3
 8008860:	2200      	movs	r2, #0
 8008862:	603b      	str	r3, [r7, #0]
 8008864:	607a      	str	r2, [r7, #4]
 8008866:	e9d7 2300 	ldrd	r2, r3, [r7]
 800886a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800886e:	f7f7 fd3f 	bl	80002f0 <__aeabi_uldivmod>
 8008872:	4602      	mov	r2, r0
 8008874:	460b      	mov	r3, r1
 8008876:	4610      	mov	r0, r2
 8008878:	4619      	mov	r1, r3
 800887a:	f04f 0200 	mov.w	r2, #0
 800887e:	f04f 0300 	mov.w	r3, #0
 8008882:	020b      	lsls	r3, r1, #8
 8008884:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008888:	0202      	lsls	r2, r0, #8
 800888a:	6979      	ldr	r1, [r7, #20]
 800888c:	6849      	ldr	r1, [r1, #4]
 800888e:	0849      	lsrs	r1, r1, #1
 8008890:	2000      	movs	r0, #0
 8008892:	460c      	mov	r4, r1
 8008894:	4605      	mov	r5, r0
 8008896:	eb12 0804 	adds.w	r8, r2, r4
 800889a:	eb43 0905 	adc.w	r9, r3, r5
 800889e:	697b      	ldr	r3, [r7, #20]
 80088a0:	685b      	ldr	r3, [r3, #4]
 80088a2:	2200      	movs	r2, #0
 80088a4:	469a      	mov	sl, r3
 80088a6:	4693      	mov	fp, r2
 80088a8:	4652      	mov	r2, sl
 80088aa:	465b      	mov	r3, fp
 80088ac:	4640      	mov	r0, r8
 80088ae:	4649      	mov	r1, r9
 80088b0:	f7f7 fd1e 	bl	80002f0 <__aeabi_uldivmod>
 80088b4:	4602      	mov	r2, r0
 80088b6:	460b      	mov	r3, r1
 80088b8:	4613      	mov	r3, r2
 80088ba:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80088bc:	6a3b      	ldr	r3, [r7, #32]
 80088be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80088c2:	d308      	bcc.n	80088d6 <UART_SetConfig+0x416>
 80088c4:	6a3b      	ldr	r3, [r7, #32]
 80088c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80088ca:	d204      	bcs.n	80088d6 <UART_SetConfig+0x416>
        {
          huart->Instance->BRR = usartdiv;
 80088cc:	697b      	ldr	r3, [r7, #20]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	6a3a      	ldr	r2, [r7, #32]
 80088d2:	60da      	str	r2, [r3, #12]
 80088d4:	e16c      	b.n	8008bb0 <UART_SetConfig+0x6f0>
        }
        else
        {
          ret = HAL_ERROR;
 80088d6:	2301      	movs	r3, #1
 80088d8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80088dc:	e168      	b.n	8008bb0 <UART_SetConfig+0x6f0>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	69db      	ldr	r3, [r3, #28]
 80088e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80088e6:	f040 80bd 	bne.w	8008a64 <UART_SetConfig+0x5a4>
  {
    switch (clocksource)
 80088ea:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80088ee:	2b20      	cmp	r3, #32
 80088f0:	dc48      	bgt.n	8008984 <UART_SetConfig+0x4c4>
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	db73      	blt.n	80089de <UART_SetConfig+0x51e>
 80088f6:	2b20      	cmp	r3, #32
 80088f8:	d871      	bhi.n	80089de <UART_SetConfig+0x51e>
 80088fa:	a201      	add	r2, pc, #4	@ (adr r2, 8008900 <UART_SetConfig+0x440>)
 80088fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008900:	0800898b 	.word	0x0800898b
 8008904:	08008993 	.word	0x08008993
 8008908:	080089df 	.word	0x080089df
 800890c:	080089df 	.word	0x080089df
 8008910:	0800899b 	.word	0x0800899b
 8008914:	080089df 	.word	0x080089df
 8008918:	080089df 	.word	0x080089df
 800891c:	080089df 	.word	0x080089df
 8008920:	080089a3 	.word	0x080089a3
 8008924:	080089df 	.word	0x080089df
 8008928:	080089df 	.word	0x080089df
 800892c:	080089df 	.word	0x080089df
 8008930:	080089df 	.word	0x080089df
 8008934:	080089df 	.word	0x080089df
 8008938:	080089df 	.word	0x080089df
 800893c:	080089df 	.word	0x080089df
 8008940:	080089ab 	.word	0x080089ab
 8008944:	080089df 	.word	0x080089df
 8008948:	080089df 	.word	0x080089df
 800894c:	080089df 	.word	0x080089df
 8008950:	080089df 	.word	0x080089df
 8008954:	080089df 	.word	0x080089df
 8008958:	080089df 	.word	0x080089df
 800895c:	080089df 	.word	0x080089df
 8008960:	080089df 	.word	0x080089df
 8008964:	080089df 	.word	0x080089df
 8008968:	080089df 	.word	0x080089df
 800896c:	080089df 	.word	0x080089df
 8008970:	080089df 	.word	0x080089df
 8008974:	080089df 	.word	0x080089df
 8008978:	080089df 	.word	0x080089df
 800897c:	080089df 	.word	0x080089df
 8008980:	080089d1 	.word	0x080089d1
 8008984:	2b40      	cmp	r3, #64	@ 0x40
 8008986:	d026      	beq.n	80089d6 <UART_SetConfig+0x516>
 8008988:	e029      	b.n	80089de <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800898a:	f7fd fb77 	bl	800607c <HAL_RCC_GetPCLK1Freq>
 800898e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008990:	e02b      	b.n	80089ea <UART_SetConfig+0x52a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008992:	f7fd fb8f 	bl	80060b4 <HAL_RCC_GetPCLK2Freq>
 8008996:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008998:	e027      	b.n	80089ea <UART_SetConfig+0x52a>
      case UART_CLOCKSOURCE_PLL2Q:
        pclk = HAL_RCC_GetPLL2QFreq();
 800899a:	f7fd fbc3 	bl	8006124 <HAL_RCC_GetPLL2QFreq>
 800899e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80089a0:	e023      	b.n	80089ea <UART_SetConfig+0x52a>
      case UART_CLOCKSOURCE_PLL3Q:
        pclk = HAL_RCC_GetPLL3QFreq();
 80089a2:	f7fd fbd5 	bl	8006150 <HAL_RCC_GetPLL3QFreq>
 80089a6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80089a8:	e01f      	b.n	80089ea <UART_SetConfig+0x52a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80089aa:	4b2d      	ldr	r3, [pc, #180]	@ (8008a60 <UART_SetConfig+0x5a0>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f003 0320 	and.w	r3, r3, #32
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d009      	beq.n	80089ca <UART_SetConfig+0x50a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80089b6:	4b2a      	ldr	r3, [pc, #168]	@ (8008a60 <UART_SetConfig+0x5a0>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	08db      	lsrs	r3, r3, #3
 80089bc:	f003 0303 	and.w	r3, r3, #3
 80089c0:	4a24      	ldr	r2, [pc, #144]	@ (8008a54 <UART_SetConfig+0x594>)
 80089c2:	fa22 f303 	lsr.w	r3, r2, r3
 80089c6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80089c8:	e00f      	b.n	80089ea <UART_SetConfig+0x52a>
          pclk = (uint32_t) HSI_VALUE;
 80089ca:	4b22      	ldr	r3, [pc, #136]	@ (8008a54 <UART_SetConfig+0x594>)
 80089cc:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80089ce:	e00c      	b.n	80089ea <UART_SetConfig+0x52a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80089d0:	4b21      	ldr	r3, [pc, #132]	@ (8008a58 <UART_SetConfig+0x598>)
 80089d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80089d4:	e009      	b.n	80089ea <UART_SetConfig+0x52a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80089d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80089da:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80089dc:	e005      	b.n	80089ea <UART_SetConfig+0x52a>
      default:
        pclk = 0U;
 80089de:	2300      	movs	r3, #0
 80089e0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80089e2:	2301      	movs	r3, #1
 80089e4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80089e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80089ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	f000 80df 	beq.w	8008bb0 <UART_SetConfig+0x6f0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089f6:	4a19      	ldr	r2, [pc, #100]	@ (8008a5c <UART_SetConfig+0x59c>)
 80089f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80089fc:	461a      	mov	r2, r3
 80089fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a00:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a04:	005a      	lsls	r2, r3, #1
 8008a06:	697b      	ldr	r3, [r7, #20]
 8008a08:	685b      	ldr	r3, [r3, #4]
 8008a0a:	085b      	lsrs	r3, r3, #1
 8008a0c:	441a      	add	r2, r3
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	685b      	ldr	r3, [r3, #4]
 8008a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a16:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a18:	6a3b      	ldr	r3, [r7, #32]
 8008a1a:	2b0f      	cmp	r3, #15
 8008a1c:	d916      	bls.n	8008a4c <UART_SetConfig+0x58c>
 8008a1e:	6a3b      	ldr	r3, [r7, #32]
 8008a20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a24:	d212      	bcs.n	8008a4c <UART_SetConfig+0x58c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008a26:	6a3b      	ldr	r3, [r7, #32]
 8008a28:	b29b      	uxth	r3, r3
 8008a2a:	f023 030f 	bic.w	r3, r3, #15
 8008a2e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008a30:	6a3b      	ldr	r3, [r7, #32]
 8008a32:	085b      	lsrs	r3, r3, #1
 8008a34:	b29b      	uxth	r3, r3
 8008a36:	f003 0307 	and.w	r3, r3, #7
 8008a3a:	b29a      	uxth	r2, r3
 8008a3c:	8bfb      	ldrh	r3, [r7, #30]
 8008a3e:	4313      	orrs	r3, r2
 8008a40:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008a42:	697b      	ldr	r3, [r7, #20]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	8bfa      	ldrh	r2, [r7, #30]
 8008a48:	60da      	str	r2, [r3, #12]
 8008a4a:	e0b1      	b.n	8008bb0 <UART_SetConfig+0x6f0>
      }
      else
      {
        ret = HAL_ERROR;
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008a52:	e0ad      	b.n	8008bb0 <UART_SetConfig+0x6f0>
 8008a54:	03d09000 	.word	0x03d09000
 8008a58:	003d0900 	.word	0x003d0900
 8008a5c:	0800952c 	.word	0x0800952c
 8008a60:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008a64:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008a68:	2b20      	cmp	r3, #32
 8008a6a:	dc49      	bgt.n	8008b00 <UART_SetConfig+0x640>
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	db74      	blt.n	8008b5a <UART_SetConfig+0x69a>
 8008a70:	2b20      	cmp	r3, #32
 8008a72:	d872      	bhi.n	8008b5a <UART_SetConfig+0x69a>
 8008a74:	a201      	add	r2, pc, #4	@ (adr r2, 8008a7c <UART_SetConfig+0x5bc>)
 8008a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a7a:	bf00      	nop
 8008a7c:	08008b07 	.word	0x08008b07
 8008a80:	08008b0f 	.word	0x08008b0f
 8008a84:	08008b5b 	.word	0x08008b5b
 8008a88:	08008b5b 	.word	0x08008b5b
 8008a8c:	08008b17 	.word	0x08008b17
 8008a90:	08008b5b 	.word	0x08008b5b
 8008a94:	08008b5b 	.word	0x08008b5b
 8008a98:	08008b5b 	.word	0x08008b5b
 8008a9c:	08008b1f 	.word	0x08008b1f
 8008aa0:	08008b5b 	.word	0x08008b5b
 8008aa4:	08008b5b 	.word	0x08008b5b
 8008aa8:	08008b5b 	.word	0x08008b5b
 8008aac:	08008b5b 	.word	0x08008b5b
 8008ab0:	08008b5b 	.word	0x08008b5b
 8008ab4:	08008b5b 	.word	0x08008b5b
 8008ab8:	08008b5b 	.word	0x08008b5b
 8008abc:	08008b27 	.word	0x08008b27
 8008ac0:	08008b5b 	.word	0x08008b5b
 8008ac4:	08008b5b 	.word	0x08008b5b
 8008ac8:	08008b5b 	.word	0x08008b5b
 8008acc:	08008b5b 	.word	0x08008b5b
 8008ad0:	08008b5b 	.word	0x08008b5b
 8008ad4:	08008b5b 	.word	0x08008b5b
 8008ad8:	08008b5b 	.word	0x08008b5b
 8008adc:	08008b5b 	.word	0x08008b5b
 8008ae0:	08008b5b 	.word	0x08008b5b
 8008ae4:	08008b5b 	.word	0x08008b5b
 8008ae8:	08008b5b 	.word	0x08008b5b
 8008aec:	08008b5b 	.word	0x08008b5b
 8008af0:	08008b5b 	.word	0x08008b5b
 8008af4:	08008b5b 	.word	0x08008b5b
 8008af8:	08008b5b 	.word	0x08008b5b
 8008afc:	08008b4d 	.word	0x08008b4d
 8008b00:	2b40      	cmp	r3, #64	@ 0x40
 8008b02:	d026      	beq.n	8008b52 <UART_SetConfig+0x692>
 8008b04:	e029      	b.n	8008b5a <UART_SetConfig+0x69a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b06:	f7fd fab9 	bl	800607c <HAL_RCC_GetPCLK1Freq>
 8008b0a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008b0c:	e02b      	b.n	8008b66 <UART_SetConfig+0x6a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b0e:	f7fd fad1 	bl	80060b4 <HAL_RCC_GetPCLK2Freq>
 8008b12:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008b14:	e027      	b.n	8008b66 <UART_SetConfig+0x6a6>
      case UART_CLOCKSOURCE_PLL2Q:
        pclk = HAL_RCC_GetPLL2QFreq();
 8008b16:	f7fd fb05 	bl	8006124 <HAL_RCC_GetPLL2QFreq>
 8008b1a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008b1c:	e023      	b.n	8008b66 <UART_SetConfig+0x6a6>
      case UART_CLOCKSOURCE_PLL3Q:
        pclk = HAL_RCC_GetPLL3QFreq();
 8008b1e:	f7fd fb17 	bl	8006150 <HAL_RCC_GetPLL3QFreq>
 8008b22:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008b24:	e01f      	b.n	8008b66 <UART_SetConfig+0x6a6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008b26:	4b2d      	ldr	r3, [pc, #180]	@ (8008bdc <UART_SetConfig+0x71c>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f003 0320 	and.w	r3, r3, #32
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d009      	beq.n	8008b46 <UART_SetConfig+0x686>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008b32:	4b2a      	ldr	r3, [pc, #168]	@ (8008bdc <UART_SetConfig+0x71c>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	08db      	lsrs	r3, r3, #3
 8008b38:	f003 0303 	and.w	r3, r3, #3
 8008b3c:	4a28      	ldr	r2, [pc, #160]	@ (8008be0 <UART_SetConfig+0x720>)
 8008b3e:	fa22 f303 	lsr.w	r3, r2, r3
 8008b42:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008b44:	e00f      	b.n	8008b66 <UART_SetConfig+0x6a6>
          pclk = (uint32_t) HSI_VALUE;
 8008b46:	4b26      	ldr	r3, [pc, #152]	@ (8008be0 <UART_SetConfig+0x720>)
 8008b48:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008b4a:	e00c      	b.n	8008b66 <UART_SetConfig+0x6a6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008b4c:	4b25      	ldr	r3, [pc, #148]	@ (8008be4 <UART_SetConfig+0x724>)
 8008b4e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008b50:	e009      	b.n	8008b66 <UART_SetConfig+0x6a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008b56:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008b58:	e005      	b.n	8008b66 <UART_SetConfig+0x6a6>
      default:
        pclk = 0U;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008b5e:	2301      	movs	r3, #1
 8008b60:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008b64:	bf00      	nop
    }

    if (pclk != 0U)
 8008b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d021      	beq.n	8008bb0 <UART_SetConfig+0x6f0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b6c:	697b      	ldr	r3, [r7, #20]
 8008b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b70:	4a1d      	ldr	r2, [pc, #116]	@ (8008be8 <UART_SetConfig+0x728>)
 8008b72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b76:	461a      	mov	r2, r3
 8008b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b7a:	fbb3 f2f2 	udiv	r2, r3, r2
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	685b      	ldr	r3, [r3, #4]
 8008b82:	085b      	lsrs	r3, r3, #1
 8008b84:	441a      	add	r2, r3
 8008b86:	697b      	ldr	r3, [r7, #20]
 8008b88:	685b      	ldr	r3, [r3, #4]
 8008b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b8e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b90:	6a3b      	ldr	r3, [r7, #32]
 8008b92:	2b0f      	cmp	r3, #15
 8008b94:	d909      	bls.n	8008baa <UART_SetConfig+0x6ea>
 8008b96:	6a3b      	ldr	r3, [r7, #32]
 8008b98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b9c:	d205      	bcs.n	8008baa <UART_SetConfig+0x6ea>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008b9e:	6a3b      	ldr	r3, [r7, #32]
 8008ba0:	b29a      	uxth	r2, r3
 8008ba2:	697b      	ldr	r3, [r7, #20]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	60da      	str	r2, [r3, #12]
 8008ba8:	e002      	b.n	8008bb0 <UART_SetConfig+0x6f0>
      }
      else
      {
        ret = HAL_ERROR;
 8008baa:	2301      	movs	r3, #1
 8008bac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	2201      	movs	r2, #1
 8008bb4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008bb8:	697b      	ldr	r3, [r7, #20]
 8008bba:	2201      	movs	r2, #1
 8008bbc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008bc6:	697b      	ldr	r3, [r7, #20]
 8008bc8:	2200      	movs	r2, #0
 8008bca:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008bcc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	3730      	adds	r7, #48	@ 0x30
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008bda:	bf00      	nop
 8008bdc:	58024400 	.word	0x58024400
 8008be0:	03d09000 	.word	0x03d09000
 8008be4:	003d0900 	.word	0x003d0900
 8008be8:	0800952c 	.word	0x0800952c

08008bec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008bec:	b480      	push	{r7}
 8008bee:	b083      	sub	sp, #12
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bf8:	f003 0308 	and.w	r3, r3, #8
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d00a      	beq.n	8008c16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	685b      	ldr	r3, [r3, #4]
 8008c06:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	430a      	orrs	r2, r1
 8008c14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c1a:	f003 0301 	and.w	r3, r3, #1
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d00a      	beq.n	8008c38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	685b      	ldr	r3, [r3, #4]
 8008c28:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	430a      	orrs	r2, r1
 8008c36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c3c:	f003 0302 	and.w	r3, r3, #2
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d00a      	beq.n	8008c5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	685b      	ldr	r3, [r3, #4]
 8008c4a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	430a      	orrs	r2, r1
 8008c58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c5e:	f003 0304 	and.w	r3, r3, #4
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d00a      	beq.n	8008c7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	685b      	ldr	r3, [r3, #4]
 8008c6c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	430a      	orrs	r2, r1
 8008c7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c80:	f003 0310 	and.w	r3, r3, #16
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d00a      	beq.n	8008c9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	689b      	ldr	r3, [r3, #8]
 8008c8e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	430a      	orrs	r2, r1
 8008c9c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ca2:	f003 0320 	and.w	r3, r3, #32
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d00a      	beq.n	8008cc0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	689b      	ldr	r3, [r3, #8]
 8008cb0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	430a      	orrs	r2, r1
 8008cbe:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d01a      	beq.n	8008d02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	685b      	ldr	r3, [r3, #4]
 8008cd2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	430a      	orrs	r2, r1
 8008ce0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ce6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008cea:	d10a      	bne.n	8008d02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	685b      	ldr	r3, [r3, #4]
 8008cf2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	430a      	orrs	r2, r1
 8008d00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d00a      	beq.n	8008d24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	685b      	ldr	r3, [r3, #4]
 8008d14:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	430a      	orrs	r2, r1
 8008d22:	605a      	str	r2, [r3, #4]
  }
}
 8008d24:	bf00      	nop
 8008d26:	370c      	adds	r7, #12
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2e:	4770      	bx	lr

08008d30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b098      	sub	sp, #96	@ 0x60
 8008d34:	af02      	add	r7, sp, #8
 8008d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008d40:	f7f8 fc84 	bl	800164c <HAL_GetTick>
 8008d44:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	f003 0308 	and.w	r3, r3, #8
 8008d50:	2b08      	cmp	r3, #8
 8008d52:	d12f      	bne.n	8008db4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d54:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008d58:	9300      	str	r3, [sp, #0]
 8008d5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f000 f88e 	bl	8008e84 <UART_WaitOnFlagUntilTimeout>
 8008d68:	4603      	mov	r3, r0
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d022      	beq.n	8008db4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d76:	e853 3f00 	ldrex	r3, [r3]
 8008d7a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008d7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d7e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008d82:	653b      	str	r3, [r7, #80]	@ 0x50
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	461a      	mov	r2, r3
 8008d8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008d8c:	647b      	str	r3, [r7, #68]	@ 0x44
 8008d8e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d90:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008d92:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008d94:	e841 2300 	strex	r3, r2, [r1]
 8008d98:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008d9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d1e6      	bne.n	8008d6e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2220      	movs	r2, #32
 8008da4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2200      	movs	r2, #0
 8008dac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008db0:	2303      	movs	r3, #3
 8008db2:	e063      	b.n	8008e7c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f003 0304 	and.w	r3, r3, #4
 8008dbe:	2b04      	cmp	r3, #4
 8008dc0:	d149      	bne.n	8008e56 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008dc2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008dc6:	9300      	str	r3, [sp, #0]
 8008dc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008dca:	2200      	movs	r2, #0
 8008dcc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	f000 f857 	bl	8008e84 <UART_WaitOnFlagUntilTimeout>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d03c      	beq.n	8008e56 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008de4:	e853 3f00 	ldrex	r3, [r3]
 8008de8:	623b      	str	r3, [r7, #32]
   return(result);
 8008dea:	6a3b      	ldr	r3, [r7, #32]
 8008dec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008df0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	461a      	mov	r2, r3
 8008df8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008dfa:	633b      	str	r3, [r7, #48]	@ 0x30
 8008dfc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dfe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008e00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e02:	e841 2300 	strex	r3, r2, [r1]
 8008e06:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008e08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d1e6      	bne.n	8008ddc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	3308      	adds	r3, #8
 8008e14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e16:	693b      	ldr	r3, [r7, #16]
 8008e18:	e853 3f00 	ldrex	r3, [r3]
 8008e1c:	60fb      	str	r3, [r7, #12]
   return(result);
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	f023 0301 	bic.w	r3, r3, #1
 8008e24:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	3308      	adds	r3, #8
 8008e2c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008e2e:	61fa      	str	r2, [r7, #28]
 8008e30:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e32:	69b9      	ldr	r1, [r7, #24]
 8008e34:	69fa      	ldr	r2, [r7, #28]
 8008e36:	e841 2300 	strex	r3, r2, [r1]
 8008e3a:	617b      	str	r3, [r7, #20]
   return(result);
 8008e3c:	697b      	ldr	r3, [r7, #20]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d1e5      	bne.n	8008e0e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2220      	movs	r2, #32
 8008e46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e52:	2303      	movs	r3, #3
 8008e54:	e012      	b.n	8008e7c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2220      	movs	r2, #32
 8008e5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2220      	movs	r2, #32
 8008e62:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2200      	movs	r2, #0
 8008e6a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2200      	movs	r2, #0
 8008e76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008e7a:	2300      	movs	r3, #0
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	3758      	adds	r7, #88	@ 0x58
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bd80      	pop	{r7, pc}

08008e84 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b084      	sub	sp, #16
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	60f8      	str	r0, [r7, #12]
 8008e8c:	60b9      	str	r1, [r7, #8]
 8008e8e:	603b      	str	r3, [r7, #0]
 8008e90:	4613      	mov	r3, r2
 8008e92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e94:	e04f      	b.n	8008f36 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e96:	69bb      	ldr	r3, [r7, #24]
 8008e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e9c:	d04b      	beq.n	8008f36 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e9e:	f7f8 fbd5 	bl	800164c <HAL_GetTick>
 8008ea2:	4602      	mov	r2, r0
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	1ad3      	subs	r3, r2, r3
 8008ea8:	69ba      	ldr	r2, [r7, #24]
 8008eaa:	429a      	cmp	r2, r3
 8008eac:	d302      	bcc.n	8008eb4 <UART_WaitOnFlagUntilTimeout+0x30>
 8008eae:	69bb      	ldr	r3, [r7, #24]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d101      	bne.n	8008eb8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008eb4:	2303      	movs	r3, #3
 8008eb6:	e04e      	b.n	8008f56 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f003 0304 	and.w	r3, r3, #4
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d037      	beq.n	8008f36 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	2b80      	cmp	r3, #128	@ 0x80
 8008eca:	d034      	beq.n	8008f36 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	2b40      	cmp	r3, #64	@ 0x40
 8008ed0:	d031      	beq.n	8008f36 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	69db      	ldr	r3, [r3, #28]
 8008ed8:	f003 0308 	and.w	r3, r3, #8
 8008edc:	2b08      	cmp	r3, #8
 8008ede:	d110      	bne.n	8008f02 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	2208      	movs	r2, #8
 8008ee6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008ee8:	68f8      	ldr	r0, [r7, #12]
 8008eea:	f000 f879 	bl	8008fe0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	2208      	movs	r2, #8
 8008ef2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	2200      	movs	r2, #0
 8008efa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008efe:	2301      	movs	r3, #1
 8008f00:	e029      	b.n	8008f56 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	69db      	ldr	r3, [r3, #28]
 8008f08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008f0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008f10:	d111      	bne.n	8008f36 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008f1a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008f1c:	68f8      	ldr	r0, [r7, #12]
 8008f1e:	f000 f85f 	bl	8008fe0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	2220      	movs	r2, #32
 8008f26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008f32:	2303      	movs	r3, #3
 8008f34:	e00f      	b.n	8008f56 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	69da      	ldr	r2, [r3, #28]
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	4013      	ands	r3, r2
 8008f40:	68ba      	ldr	r2, [r7, #8]
 8008f42:	429a      	cmp	r2, r3
 8008f44:	bf0c      	ite	eq
 8008f46:	2301      	moveq	r3, #1
 8008f48:	2300      	movne	r3, #0
 8008f4a:	b2db      	uxtb	r3, r3
 8008f4c:	461a      	mov	r2, r3
 8008f4e:	79fb      	ldrb	r3, [r7, #7]
 8008f50:	429a      	cmp	r2, r3
 8008f52:	d0a0      	beq.n	8008e96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008f54:	2300      	movs	r3, #0
}
 8008f56:	4618      	mov	r0, r3
 8008f58:	3710      	adds	r7, #16
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}

08008f5e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008f5e:	b480      	push	{r7}
 8008f60:	b08f      	sub	sp, #60	@ 0x3c
 8008f62:	af00      	add	r7, sp, #0
 8008f64:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f6c:	6a3b      	ldr	r3, [r7, #32]
 8008f6e:	e853 3f00 	ldrex	r3, [r3]
 8008f72:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f74:	69fb      	ldr	r3, [r7, #28]
 8008f76:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008f7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	461a      	mov	r2, r3
 8008f82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008f86:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008f8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008f8c:	e841 2300 	strex	r3, r2, [r1]
 8008f90:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d1e6      	bne.n	8008f66 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	3308      	adds	r3, #8
 8008f9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	e853 3f00 	ldrex	r3, [r3]
 8008fa6:	60bb      	str	r3, [r7, #8]
   return(result);
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008fae:	633b      	str	r3, [r7, #48]	@ 0x30
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	3308      	adds	r3, #8
 8008fb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008fb8:	61ba      	str	r2, [r7, #24]
 8008fba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fbc:	6979      	ldr	r1, [r7, #20]
 8008fbe:	69ba      	ldr	r2, [r7, #24]
 8008fc0:	e841 2300 	strex	r3, r2, [r1]
 8008fc4:	613b      	str	r3, [r7, #16]
   return(result);
 8008fc6:	693b      	ldr	r3, [r7, #16]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d1e5      	bne.n	8008f98 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2220      	movs	r2, #32
 8008fd0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8008fd4:	bf00      	nop
 8008fd6:	373c      	adds	r7, #60	@ 0x3c
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fde:	4770      	bx	lr

08008fe0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008fe0:	b480      	push	{r7}
 8008fe2:	b095      	sub	sp, #84	@ 0x54
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ff0:	e853 3f00 	ldrex	r3, [r3]
 8008ff4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ff8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008ffc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	461a      	mov	r2, r3
 8009004:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009006:	643b      	str	r3, [r7, #64]	@ 0x40
 8009008:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800900a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800900c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800900e:	e841 2300 	strex	r3, r2, [r1]
 8009012:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009014:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009016:	2b00      	cmp	r3, #0
 8009018:	d1e6      	bne.n	8008fe8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	3308      	adds	r3, #8
 8009020:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009022:	6a3b      	ldr	r3, [r7, #32]
 8009024:	e853 3f00 	ldrex	r3, [r3]
 8009028:	61fb      	str	r3, [r7, #28]
   return(result);
 800902a:	69fa      	ldr	r2, [r7, #28]
 800902c:	4b1e      	ldr	r3, [pc, #120]	@ (80090a8 <UART_EndRxTransfer+0xc8>)
 800902e:	4013      	ands	r3, r2
 8009030:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	3308      	adds	r3, #8
 8009038:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800903a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800903c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800903e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009040:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009042:	e841 2300 	strex	r3, r2, [r1]
 8009046:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800904a:	2b00      	cmp	r3, #0
 800904c:	d1e5      	bne.n	800901a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009052:	2b01      	cmp	r3, #1
 8009054:	d118      	bne.n	8009088 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	e853 3f00 	ldrex	r3, [r3]
 8009062:	60bb      	str	r3, [r7, #8]
   return(result);
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	f023 0310 	bic.w	r3, r3, #16
 800906a:	647b      	str	r3, [r7, #68]	@ 0x44
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	461a      	mov	r2, r3
 8009072:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009074:	61bb      	str	r3, [r7, #24]
 8009076:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009078:	6979      	ldr	r1, [r7, #20]
 800907a:	69ba      	ldr	r2, [r7, #24]
 800907c:	e841 2300 	strex	r3, r2, [r1]
 8009080:	613b      	str	r3, [r7, #16]
   return(result);
 8009082:	693b      	ldr	r3, [r7, #16]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d1e6      	bne.n	8009056 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2220      	movs	r2, #32
 800908c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2200      	movs	r2, #0
 8009094:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2200      	movs	r2, #0
 800909a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800909c:	bf00      	nop
 800909e:	3754      	adds	r7, #84	@ 0x54
 80090a0:	46bd      	mov	sp, r7
 80090a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a6:	4770      	bx	lr
 80090a8:	effffffe 	.word	0xeffffffe

080090ac <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b090      	sub	sp, #64	@ 0x40
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80090b8:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if DMA in circular mode */
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090be:	2b81      	cmp	r3, #129	@ 0x81
 80090c0:	d037      	beq.n	8009132 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 80090c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090c4:	2200      	movs	r2, #0
 80090c6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80090ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	3308      	adds	r3, #8
 80090d0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090d4:	e853 3f00 	ldrex	r3, [r3]
 80090d8:	623b      	str	r3, [r7, #32]
   return(result);
 80090da:	6a3b      	ldr	r3, [r7, #32]
 80090dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80090e0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80090e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	3308      	adds	r3, #8
 80090e8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80090ea:	633a      	str	r2, [r7, #48]	@ 0x30
 80090ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80090f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80090f2:	e841 2300 	strex	r3, r2, [r1]
 80090f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80090f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d1e5      	bne.n	80090ca <UART_DMATransmitCplt+0x1e>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80090fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009104:	693b      	ldr	r3, [r7, #16]
 8009106:	e853 3f00 	ldrex	r3, [r3]
 800910a:	60fb      	str	r3, [r7, #12]
   return(result);
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009112:	637b      	str	r3, [r7, #52]	@ 0x34
 8009114:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	461a      	mov	r2, r3
 800911a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800911c:	61fb      	str	r3, [r7, #28]
 800911e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009120:	69b9      	ldr	r1, [r7, #24]
 8009122:	69fa      	ldr	r2, [r7, #28]
 8009124:	e841 2300 	strex	r3, r2, [r1]
 8009128:	617b      	str	r3, [r7, #20]
   return(result);
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d1e6      	bne.n	80090fe <UART_DMATransmitCplt+0x52>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009130:	e002      	b.n	8009138 <UART_DMATransmitCplt+0x8c>
    HAL_UART_TxCpltCallback(huart);
 8009132:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8009134:	f7f7 fbfa 	bl	800092c <HAL_UART_TxCpltCallback>
}
 8009138:	bf00      	nop
 800913a:	3740      	adds	r7, #64	@ 0x40
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}

08009140 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b084      	sub	sp, #16
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800914c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800914e:	68f8      	ldr	r0, [r7, #12]
 8009150:	f7ff f992 	bl	8008478 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009154:	bf00      	nop
 8009156:	3710      	adds	r7, #16
 8009158:	46bd      	mov	sp, r7
 800915a:	bd80      	pop	{r7, pc}

0800915c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b086      	sub	sp, #24
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009168:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800916a:	697b      	ldr	r3, [r7, #20]
 800916c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009170:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009172:	697b      	ldr	r3, [r7, #20]
 8009174:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009178:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800917a:	697b      	ldr	r3, [r7, #20]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	689b      	ldr	r3, [r3, #8]
 8009180:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009184:	2b80      	cmp	r3, #128	@ 0x80
 8009186:	d109      	bne.n	800919c <UART_DMAError+0x40>
 8009188:	693b      	ldr	r3, [r7, #16]
 800918a:	2b21      	cmp	r3, #33	@ 0x21
 800918c:	d106      	bne.n	800919c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800918e:	697b      	ldr	r3, [r7, #20]
 8009190:	2200      	movs	r2, #0
 8009192:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8009196:	6978      	ldr	r0, [r7, #20]
 8009198:	f7ff fee1 	bl	8008f5e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800919c:	697b      	ldr	r3, [r7, #20]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	689b      	ldr	r3, [r3, #8]
 80091a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091a6:	2b40      	cmp	r3, #64	@ 0x40
 80091a8:	d109      	bne.n	80091be <UART_DMAError+0x62>
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	2b22      	cmp	r3, #34	@ 0x22
 80091ae:	d106      	bne.n	80091be <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80091b0:	697b      	ldr	r3, [r7, #20]
 80091b2:	2200      	movs	r2, #0
 80091b4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 80091b8:	6978      	ldr	r0, [r7, #20]
 80091ba:	f7ff ff11 	bl	8008fe0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80091be:	697b      	ldr	r3, [r7, #20]
 80091c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091c4:	f043 0210 	orr.w	r2, r3, #16
 80091c8:	697b      	ldr	r3, [r7, #20]
 80091ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80091ce:	6978      	ldr	r0, [r7, #20]
 80091d0:	f7f7 fbc6 	bl	8000960 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80091d4:	bf00      	nop
 80091d6:	3718      	adds	r7, #24
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}

080091dc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b084      	sub	sp, #16
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80091e8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	2200      	movs	r2, #0
 80091ee:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80091f2:	68f8      	ldr	r0, [r7, #12]
 80091f4:	f7f7 fbb4 	bl	8000960 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80091f8:	bf00      	nop
 80091fa:	3710      	adds	r7, #16
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd80      	pop	{r7, pc}

08009200 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b088      	sub	sp, #32
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	e853 3f00 	ldrex	r3, [r3]
 8009214:	60bb      	str	r3, [r7, #8]
   return(result);
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800921c:	61fb      	str	r3, [r7, #28]
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	461a      	mov	r2, r3
 8009224:	69fb      	ldr	r3, [r7, #28]
 8009226:	61bb      	str	r3, [r7, #24]
 8009228:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800922a:	6979      	ldr	r1, [r7, #20]
 800922c:	69ba      	ldr	r2, [r7, #24]
 800922e:	e841 2300 	strex	r3, r2, [r1]
 8009232:	613b      	str	r3, [r7, #16]
   return(result);
 8009234:	693b      	ldr	r3, [r7, #16]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d1e6      	bne.n	8009208 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2220      	movs	r2, #32
 800923e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2200      	movs	r2, #0
 8009246:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f7f7 fb6f 	bl	800092c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800924e:	bf00      	nop
 8009250:	3720      	adds	r7, #32
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}

08009256 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009256:	b480      	push	{r7}
 8009258:	b083      	sub	sp, #12
 800925a:	af00      	add	r7, sp, #0
 800925c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800925e:	bf00      	nop
 8009260:	370c      	adds	r7, #12
 8009262:	46bd      	mov	sp, r7
 8009264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009268:	4770      	bx	lr

0800926a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800926a:	b480      	push	{r7}
 800926c:	b083      	sub	sp, #12
 800926e:	af00      	add	r7, sp, #0
 8009270:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009272:	bf00      	nop
 8009274:	370c      	adds	r7, #12
 8009276:	46bd      	mov	sp, r7
 8009278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927c:	4770      	bx	lr

0800927e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800927e:	b480      	push	{r7}
 8009280:	b083      	sub	sp, #12
 8009282:	af00      	add	r7, sp, #0
 8009284:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009286:	bf00      	nop
 8009288:	370c      	adds	r7, #12
 800928a:	46bd      	mov	sp, r7
 800928c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009290:	4770      	bx	lr

08009292 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009292:	b480      	push	{r7}
 8009294:	b085      	sub	sp, #20
 8009296:	af00      	add	r7, sp, #0
 8009298:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80092a0:	2b01      	cmp	r3, #1
 80092a2:	d101      	bne.n	80092a8 <HAL_UARTEx_DisableFifoMode+0x16>
 80092a4:	2302      	movs	r3, #2
 80092a6:	e027      	b.n	80092f8 <HAL_UARTEx_DisableFifoMode+0x66>
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2201      	movs	r2, #1
 80092ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2224      	movs	r2, #36	@ 0x24
 80092b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	681a      	ldr	r2, [r3, #0]
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f022 0201 	bic.w	r2, r2, #1
 80092ce:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80092d6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2200      	movs	r2, #0
 80092dc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	68fa      	ldr	r2, [r7, #12]
 80092e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2220      	movs	r2, #32
 80092ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2200      	movs	r2, #0
 80092f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80092f6:	2300      	movs	r3, #0
}
 80092f8:	4618      	mov	r0, r3
 80092fa:	3714      	adds	r7, #20
 80092fc:	46bd      	mov	sp, r7
 80092fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009302:	4770      	bx	lr

08009304 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b084      	sub	sp, #16
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
 800930c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009314:	2b01      	cmp	r3, #1
 8009316:	d101      	bne.n	800931c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009318:	2302      	movs	r3, #2
 800931a:	e02d      	b.n	8009378 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2201      	movs	r2, #1
 8009320:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2224      	movs	r2, #36	@ 0x24
 8009328:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	681a      	ldr	r2, [r3, #0]
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f022 0201 	bic.w	r2, r2, #1
 8009342:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	689b      	ldr	r3, [r3, #8]
 800934a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	683a      	ldr	r2, [r7, #0]
 8009354:	430a      	orrs	r2, r1
 8009356:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f000 f84f 	bl	80093fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	68fa      	ldr	r2, [r7, #12]
 8009364:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2220      	movs	r2, #32
 800936a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2200      	movs	r2, #0
 8009372:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009376:	2300      	movs	r3, #0
}
 8009378:	4618      	mov	r0, r3
 800937a:	3710      	adds	r7, #16
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}

08009380 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b084      	sub	sp, #16
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
 8009388:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009390:	2b01      	cmp	r3, #1
 8009392:	d101      	bne.n	8009398 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009394:	2302      	movs	r3, #2
 8009396:	e02d      	b.n	80093f4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2201      	movs	r2, #1
 800939c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2224      	movs	r2, #36	@ 0x24
 80093a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	681a      	ldr	r2, [r3, #0]
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f022 0201 	bic.w	r2, r2, #1
 80093be:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	689b      	ldr	r3, [r3, #8]
 80093c6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	683a      	ldr	r2, [r7, #0]
 80093d0:	430a      	orrs	r2, r1
 80093d2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80093d4:	6878      	ldr	r0, [r7, #4]
 80093d6:	f000 f811 	bl	80093fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	68fa      	ldr	r2, [r7, #12]
 80093e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2220      	movs	r2, #32
 80093e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2200      	movs	r2, #0
 80093ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80093f2:	2300      	movs	r3, #0
}
 80093f4:	4618      	mov	r0, r3
 80093f6:	3710      	adds	r7, #16
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}

080093fc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80093fc:	b480      	push	{r7}
 80093fe:	b085      	sub	sp, #20
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009408:	2b00      	cmp	r3, #0
 800940a:	d108      	bne.n	800941e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2201      	movs	r2, #1
 8009410:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2201      	movs	r2, #1
 8009418:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800941c:	e031      	b.n	8009482 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800941e:	2310      	movs	r3, #16
 8009420:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009422:	2310      	movs	r3, #16
 8009424:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	689b      	ldr	r3, [r3, #8]
 800942c:	0e5b      	lsrs	r3, r3, #25
 800942e:	b2db      	uxtb	r3, r3
 8009430:	f003 0307 	and.w	r3, r3, #7
 8009434:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	689b      	ldr	r3, [r3, #8]
 800943c:	0f5b      	lsrs	r3, r3, #29
 800943e:	b2db      	uxtb	r3, r3
 8009440:	f003 0307 	and.w	r3, r3, #7
 8009444:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009446:	7bbb      	ldrb	r3, [r7, #14]
 8009448:	7b3a      	ldrb	r2, [r7, #12]
 800944a:	4911      	ldr	r1, [pc, #68]	@ (8009490 <UARTEx_SetNbDataToProcess+0x94>)
 800944c:	5c8a      	ldrb	r2, [r1, r2]
 800944e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009452:	7b3a      	ldrb	r2, [r7, #12]
 8009454:	490f      	ldr	r1, [pc, #60]	@ (8009494 <UARTEx_SetNbDataToProcess+0x98>)
 8009456:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009458:	fb93 f3f2 	sdiv	r3, r3, r2
 800945c:	b29a      	uxth	r2, r3
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009464:	7bfb      	ldrb	r3, [r7, #15]
 8009466:	7b7a      	ldrb	r2, [r7, #13]
 8009468:	4909      	ldr	r1, [pc, #36]	@ (8009490 <UARTEx_SetNbDataToProcess+0x94>)
 800946a:	5c8a      	ldrb	r2, [r1, r2]
 800946c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009470:	7b7a      	ldrb	r2, [r7, #13]
 8009472:	4908      	ldr	r1, [pc, #32]	@ (8009494 <UARTEx_SetNbDataToProcess+0x98>)
 8009474:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009476:	fb93 f3f2 	sdiv	r3, r3, r2
 800947a:	b29a      	uxth	r2, r3
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009482:	bf00      	nop
 8009484:	3714      	adds	r7, #20
 8009486:	46bd      	mov	sp, r7
 8009488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948c:	4770      	bx	lr
 800948e:	bf00      	nop
 8009490:	08009544 	.word	0x08009544
 8009494:	0800954c 	.word	0x0800954c

08009498 <memset>:
 8009498:	4402      	add	r2, r0
 800949a:	4603      	mov	r3, r0
 800949c:	4293      	cmp	r3, r2
 800949e:	d100      	bne.n	80094a2 <memset+0xa>
 80094a0:	4770      	bx	lr
 80094a2:	f803 1b01 	strb.w	r1, [r3], #1
 80094a6:	e7f9      	b.n	800949c <memset+0x4>

080094a8 <__libc_init_array>:
 80094a8:	b570      	push	{r4, r5, r6, lr}
 80094aa:	4d0d      	ldr	r5, [pc, #52]	@ (80094e0 <__libc_init_array+0x38>)
 80094ac:	4c0d      	ldr	r4, [pc, #52]	@ (80094e4 <__libc_init_array+0x3c>)
 80094ae:	1b64      	subs	r4, r4, r5
 80094b0:	10a4      	asrs	r4, r4, #2
 80094b2:	2600      	movs	r6, #0
 80094b4:	42a6      	cmp	r6, r4
 80094b6:	d109      	bne.n	80094cc <__libc_init_array+0x24>
 80094b8:	4d0b      	ldr	r5, [pc, #44]	@ (80094e8 <__libc_init_array+0x40>)
 80094ba:	4c0c      	ldr	r4, [pc, #48]	@ (80094ec <__libc_init_array+0x44>)
 80094bc:	f000 f826 	bl	800950c <_init>
 80094c0:	1b64      	subs	r4, r4, r5
 80094c2:	10a4      	asrs	r4, r4, #2
 80094c4:	2600      	movs	r6, #0
 80094c6:	42a6      	cmp	r6, r4
 80094c8:	d105      	bne.n	80094d6 <__libc_init_array+0x2e>
 80094ca:	bd70      	pop	{r4, r5, r6, pc}
 80094cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80094d0:	4798      	blx	r3
 80094d2:	3601      	adds	r6, #1
 80094d4:	e7ee      	b.n	80094b4 <__libc_init_array+0xc>
 80094d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80094da:	4798      	blx	r3
 80094dc:	3601      	adds	r6, #1
 80094de:	e7f2      	b.n	80094c6 <__libc_init_array+0x1e>
 80094e0:	0800955c 	.word	0x0800955c
 80094e4:	0800955c 	.word	0x0800955c
 80094e8:	0800955c 	.word	0x0800955c
 80094ec:	08009560 	.word	0x08009560

080094f0 <memcpy>:
 80094f0:	440a      	add	r2, r1
 80094f2:	4291      	cmp	r1, r2
 80094f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80094f8:	d100      	bne.n	80094fc <memcpy+0xc>
 80094fa:	4770      	bx	lr
 80094fc:	b510      	push	{r4, lr}
 80094fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009502:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009506:	4291      	cmp	r1, r2
 8009508:	d1f9      	bne.n	80094fe <memcpy+0xe>
 800950a:	bd10      	pop	{r4, pc}

0800950c <_init>:
 800950c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800950e:	bf00      	nop
 8009510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009512:	bc08      	pop	{r3}
 8009514:	469e      	mov	lr, r3
 8009516:	4770      	bx	lr

08009518 <_fini>:
 8009518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800951a:	bf00      	nop
 800951c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800951e:	bc08      	pop	{r3}
 8009520:	469e      	mov	lr, r3
 8009522:	4770      	bx	lr
